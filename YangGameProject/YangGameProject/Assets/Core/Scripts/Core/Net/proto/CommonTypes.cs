// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common_types.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Stardom {

  /// <summary>Holder for reflection information generated from common_types.proto</summary>
  public static partial class CommonTypesReflection {

    #region Descriptor
    /// <summary>File descriptor for common_types.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommonTypesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJjb21tb25fdHlwZXMucHJvdG8SB1N0YXJkb20iIwoJV29ybGRJbmZvEhYK",
            "DmRhaWx5X3Jlc2V0X3RzGAEgASgEIocBCgpQbGF5ZXJJbmZvEioKCW9wZW5f",
            "aW5mbxgBIAEoCzIXLlN0YXJkb20uUGxheWVyT3BlbkluZm8SDwoHaW5pdF9p",
            "ZBgKIAEoBRITCgtjcmVhdGVfdGltZRgLIAEoBBISCgpsb2dpbl90aW1lGA0g",
            "ASgEEhMKC2xvZ291dF90aW1lGA4gASgEIsQCCg5QbGF5ZXJPcGVuSW5mbxIR",
            "CglwbGF5ZXJfaWQYASABKAQSDAoEbmFtZRgCIAEoCRIQCghuaWNrbmFtZRgD",
            "IAEoCRIWCg5zeXN0ZW1faGVhZF9pZBgEIAEoBRIUCgxoZWFkX2VkZ2VfaWQY",
            "BSABKAUSDwoHZmFjdGlvbhgGIAEoBRIRCgl2aXBfbGV2ZWwYByABKAUSDwoH",
            "dmlwX2V4cBgIIAEoBRINCgVncmFkZRgJIAEoBRIVCg1zcGVjaWFsX2dyYWRl",
            "GAogASgFEhMKC2ZpZ2h0X3Bvd2VyGAsgASgFEhIKCmNwX3pvbmVfaWQYDCAB",
            "KAUSEwoLb25saW5lX3RpbWUYDiABKAUSGQoRbmFtZV9tb2RpZnlfdGltZXMY",
            "DyABKAUSHQoVbmlja25hbWVfbW9kaWZ5X3RpbWVzGBAgASgFIloKDVBsYXll",
            "clN5bkluZm8SEAoIc3luX3R5cGUYASABKAUSEQoJc3luX2lfdmFsGAIgASgF",
            "EhEKCXN5bl9sX3ZhbBgDIAEoBBIRCglzeW5fc192YWwYBCABKAkiugEKC1Bs",
            "YXllckNhY2hlEioKCW9wZW5faW5mbxgBIAEoCzIXLlN0YXJkb20uUGxheWVy",
            "T3BlbkluZm8SDQoFbGV2ZWwYAiABKAUSCwoDc2V4GAMgASgFEhAKCGd1aWxk",
            "X2lkGAQgASgEEhIKCmd1aWxkX25hbWUYBSABKAkSDAoEZmFucxgGIAEoBRIM",
            "CgRzaWduGAcgASgJEg8KB3RlYW1faWQYCCABKAQSEAoIdGl0bGVfaWQYCSAB",
            "KAUi/gEKD1BsYXllclJvbGVDYWNoZRIRCglwbGF5ZXJfaWQYASABKAQSEgoK",
            "cm9sZV9jb3VudBgCIAEoBRImCghyb2xlX3BvcxgDIAMoCzIULlN0YXJkb20u",
            "Um9sZVBvc0luZm8SIAoFcm9sZXMYBCADKAsyES5TdGFyZG9tLlJvbGVJbmZv",
            "EiIKBmVxdWlwcxgFIAMoCzISLlN0YXJkb20uRXF1aXBJbmZvEikKCnJvbGVf",
            "YXR0cnMYBiADKAsyFS5TdGFyZG9tLlJvbGVBdHRySW5mbxIrCghlbWJhdHRs",
            "ZRgHIAEoCzIZLlN0YXJkb20uUm9sZUVtYmF0dGxlSW5mbyJLChJQbGF5ZXJB",
            "VldvcmtzQ2FjaGUSEQoJcGxheWVyX2lkGAEgASgEEiIKBXdvcmtzGAIgAygL",
            "MhMuU3RhcmRvbS5BVldvcmtJbmZvIosDChBQbGF5ZXJDb21tb25JbmZvEhAK",
            "CHByb3BfY2FwGAEgASgFEhEKCWVxdWlwX2NhcBgCIAEoBRIWCg5kYXlfcmVz",
            "ZXRfdGltZRgDIAEoBBIXCg93ZWVrX3Jlc2V0X3RpbWUYBCABKAQSFwoPZ2xv",
            "YmFsX21haWxfaWRzGAUgAygEEhoKEmdyYWRlX2FyZW5hX3Jld2FyZBgGIAEo",
            "BRIZChFncmFkZV9hcmVuYV90aW1lcxgHIAEoBRIdChVncmFkZV9hcmVuYV9i",
            "dXlfdGltZXMYCCABKAUSFgoOYWNoaWV2ZV9ncmFkZXMYCSADKAUSEwoLcmVu",
            "YW1lX3RpbWUYCiABKAQSHAoUcmVuYW1lX25pY2tuYW1lX3RpbWUYCyABKAQS",
            "GgoScmV3YXJkZWRfZ2lmdF9jb2RlGAwgAygJEhoKEm1vcm5pbmdfcmVzZXRf",
            "dGltZRgNIAEoBBIYChBtb250aF9yZXNldF90aW1lGA4gASgEEhUKDWlzX3Bo",
            "b25lX3NpZ24YDyABKAUi1AIKCkZyaWVuZEluZm8SEQoJc2VydmVyX2lkGAEg",
            "ASgFEhEKCXBsYXllcl9pZBgCIAEoBBITCgtwbGF5ZXJfbmFtZRgDIAEoCRIP",
            "CgdoZWFkX2lkGAQgASgFEg0KBWxldmVsGAUgASgFEgsKA3NleBgGIAEoBRIT",
            "CgtmaWdodF9wb3dlchgHIAEoBRINCgVncmFkZRgIIAEoBRIQCghpbnRpbWFj",
            "eRgJIAEoBRIQCghndWlsZF9pZBgKIAEoBBISCgpndWlsZF9uYW1lGAsgASgJ",
            "EhMKC2xvZ291dF90aW1lGAwgASgEEhMKC2NyZWF0ZV90aW1lGA0gASgEEhUK",
            "DWxhc3RfbXNnX3RpbWUYDiABKAQSGAoQcmVjb21tZW5kX3JlYXNvbhgPIAEo",
            "BRITCgtwaWFub19sZXZlbBgQIAEoBRISCgpkcnVtX2xldmVsGBEgASgFIl8K",
            "D0ZyaWVuZExvY2FsSW5mbxIRCglwbGF5ZXJfaWQYASABKAQSEAoIaW50aW1h",
            "Y3kYAiABKAUSEAoIaXNfdmlzaXQYAyABKAUSFQoNbGFzdF9tc2dfdGltZRgE",
            "IAEoBCJiCg9GcmllbmRBcHBseUluZm8SKAoLZnJpZW5kX2luZm8YASABKAsy",
            "Ey5TdGFyZG9tLkZyaWVuZEluZm8SEQoJbGVhdmVfbXNnGAIgASgJEhIKCmFw",
            "cGx5X3RpbWUYAyABKAQiegoNRnJpZW5kVGFsa01zZxIOCgZtc2dfaWQYASAB",
            "KAQSDwoHZnJvbV9pZBgCIAEoBBINCgV0b19pZBgDIAEoBBISCgplbW9qaV90",
            "eXBlGAQgASgFEhAKCHRhbGtfbXNnGAUgASgJEhMKC2NyZWF0ZV90aW1lGAYg",
            "ASgEIkAKEFBsYXllckZyaWVuZEluZm8SLAoKbG9jYWxfaW5mbxgBIAMoCzIY",
            "LlN0YXJkb20uRnJpZW5kTG9jYWxJbmZvIrcEChFQbGF5ZXJPZmZsaW5lSW5m",
            "bxINCgVsZXZlbBgBIAEoBRINCgVncmFkZRgCIAEoBRILCgNzZXgYAyABKAUS",
            "DwoHZmFjdGlvbhgEIAEoBRITCgtmaWdodF9wb3dlchgFIAEoBRIPCgdoZWFk",
            "X2lkGAYgASgFEhIKCnByb2Zlc3Npb24YByABKAUSDwoHY2FyZF9pZBgIIAEo",
            "BRIRCglwbGF5ZXJfaWQYCSABKAQSEAoIZ3VpbGRfaWQYCiABKAQSDAoEbmFt",
            "ZRgLIAEoCRIRCgluaWNrX25hbWUYDCABKAkSEgoKZ3VpbGRfbmFtZRgNIAEo",
            "CRIMCgRzaWduGA4gASgJEjAKDGZhc2hpb25faW5mbxgPIAEoCzIaLlN0YXJk",
            "b20uRmFzaGlvblNjaGVtZUluZm8SFQoNYWN0aXZlX3NraWxscxgQIAMoBRIq",
            "CghmaWdodGVycxgRIAMoCzIYLlN0YXJkb20uSW5pdEZpZ2h0ZXJJbmZvEhQK",
            "DGFyZGVudF92YWx1ZRgSIAEoBRItCgthc3Npc3RfaW5mbxgTIAEoCzIYLlN0",
            "YXJkb20uSW5pdEZpZ2h0ZXJJbmZvEjYKDmFzc2lzdF9yZWNvcmRzGBQgAygL",
            "Mh4uU3RhcmRvbS5UcmFpblRvb2xBc3Npc3RSZWNvcmQSLwoNYXJlbmFfcmVj",
            "b3JkcxgVIAMoCzIYLlN0YXJkb20uR3JhZGVBcmVuYUV2ZW50EhAKCHRpdGxl",
            "X2lkGBYgASgFIkQKDEFjdGl2aXR5SW5mbxITCgthY3Rpdml0eV9pZBgBIAEo",
            "BRINCgVjb3VudBgCIAEoBRIQCghkYXljb3VudBgDIAEoBSJtChJQbGF5ZXJB",
            "Y3Rpdml0eUluZm8SKQoKYWN0aXZpdGllcxgBIAMoCzIVLlN0YXJkb20uQWN0",
            "aXZpdHlJbmZvEhUKDWlzX3Bob25lX3NpZ24YAiABKAUSFQoNdGVsZXBob25l",
            "X251bRgDIAEoCSI4Cg1PcGVyYXRpb25JbmZvEhQKDG9wZXJhdGlvbl9pZBgB",
            "IAEoBRIRCglpc19maW5pc2gYAiABKAUiQQoTUGxheWVyT3BlcmF0aW9uSW5m",
            "bxIqCgpvcGVyYXRpb25zGAEgAygLMhYuU3RhcmRvbS5PcGVyYXRpb25JbmZv",
            "IjsKC0RhaWx5UmVjb3JkEgsKA2NpZBgBIAEoDRIMCgR1dWlkGAIgASgEEhEK",
            "CXRvZGF5X3VzZRgDIAEoDSIiCgdIdWJJbmZvEgoKAmlkGAEgASgEEgsKA3Zh",
            "bBgCIAEoDSJMChBHYW1lQWN0aXZpdHlJbmZvEhMKC2FjdGl2aXR5X2lkGAEg",
            "ASgFEg0KBXBoYXNlGAIgASgFEhQKDHBoYXNlX2VuZF90cxgDIAEoBCIpChFP",
            "cGVyYXRpb25RdWVzdGlvbhIUCgxxdWVzdGlvbl91cmwYASABKAkieQoRR2Ft",
            "ZU9wZXJhdGlvbkluZm8SFAoMb3BlcmF0aW9uX2lkGAEgASgFEhAKCHN0YXJ0",
            "X3RzGAIgASgEEg4KBmVuZF90cxgDIAEoBBIsCghxdWVzdGlvbhgKIAEoCzIa",
            "LlN0YXJkb20uT3BlcmF0aW9uUXVlc3Rpb24iOAoUQWN0aXZpdHlSZXdhcmRT",
            "dGF0dXMSEAoIdmFsdWVfaWQYASABKAUSDgoGc3RhdHVzGAIgASgFIi0KCkdl",
            "bVBvc0luZm8SDwoHZ2VtX3BvcxgBIAEoBRIOCgZnZW1faWQYAiABKAUihQEK",
            "DEVxdWlwUG9zSW5mbxIRCgllcXVpcF9wb3MYASABKAUSEgoKZXF1aXBfdXVp",
            "ZBgCIAEoBBISCgplcXVpcF9za2luGAMgASgFEhMKC2VxdWlwX2xldmVsGAQg",
            "ASgFEiUKCGdlbV9pbmZvGAogAygLMhMuU3RhcmRvbS5HZW1Qb3NJbmZvImoK",
            "C1JvbGVQb3NJbmZvEgsKA3BvcxgBIAEoBRIRCglyb2xlX3V1aWQYAiABKAQS",
            "KQoKZXF1aXBfbGlzdBgDIAMoCzIVLlN0YXJkb20uRXF1aXBQb3NJbmZvEhAK",
            "CHN1aXRfaWRzGAQgAygFIrwBChBSb2xlRW1iYXR0bGVJbmZvEg8KB2Zyb250",
            "XzEYASABKAUSDwoHZnJvbnRfMhgCIAEoBRIOCgZiYWNrXzEYAyABKAUSDgoG",
            "YmFja18yGAQgASgFEg4KBmJhY2tfMxgFIAEoBRIUCgxmYW5zX3NraWxsXzEY",
            "BiABKAUSFAoMZmFuc19za2lsbF8yGAcgASgFEhQKDGZhbnNfc2tpbGxfMxgI",
            "IAEoBRIUCgxmYW5zX3NraWxsXzQYCSABKAUilQEKDEl0ZW1CYXNlSW5mbxIM",
            "CgR0eXBlGAEgASgFEgwKBHV1aWQYAiABKAQSCwoDY2lkGAMgASgFEhMKC2Jp",
            "bmRfc3RhdHVzGAQgASgFEgsKA251bRgFIAEoBRISCgpleHBpcmF0aW9uGAYg",
            "ASgEEhEKCW9yaWdpbl9pZBgHIAEoBRITCgtvcmlnaW5fdHlwZRgIIAEoBSKC",
            "AQoMSWRsZVBsYXlJbmZvEhEKCWZyZWVfdGltZRgBIAEoBRIQCghmZWVfdGlt",
            "ZRgCIAEoBRITCgtwbGF5ZWRfdGltZRgDIAEoBRISCgp3YXN0ZV90aW1lGAQg",
            "ASgFEiQKBWl0ZW1zGAUgAygLMhUuU3RhcmRvbS5JdGVtQmFzZUluZm8i1QEK",
            "D1N2cklkbGVQbGF5SW5mbxIWCg51c2VfZnJlZV90aW1lcxgBIAEoBRIVCg11",
            "c2VfZmVlX3RpbWVzGAIgASgFEg8KB2lzX29wZW4YAyABKAUSFQoNbGFzdF9n",
            "ZXRfdGltZRgEIAEoBBIWCg5sYXN0X2NhbGNfdGltZRgFIAEoBBIaChJjdXJf",
            "c3dlZXBfc3RhZ2VfaWQYBiABKAUSEQoJY3VyX2thd2VpGAcgASgFEiQKBWl0",
            "ZW1zGAggAygLMhUuU3RhcmRvbS5JdGVtQmFzZUluZm8iVQoIUHJvcEluZm8S",
            "IwoEYmFzZRgBIAEoCzIVLlN0YXJkb20uSXRlbUJhc2VJbmZvEhEKCXVzZV90",
            "aW1lcxgCIAEoBRIRCglkYWlseV9udW0YAyABKAUiNgoNUm9sZVNraWxsSW5m",
            "bxIQCghza2lsbF9pZBgBIAEoBRITCgtza2lsbF9sZXZlbBgCIAEoBSLTAQoM",
            "Um9sZUF0dHJJbmZvEhEKCXJvbGVfdXVpZBgBIAEoBBITCgtmaWdodF9wb3dl",
            "chgCIAEoBRIKCgJocBgDIAEoBRINCgVzcGVlZBgEIAEoBRIOCgZhdHRhY2sY",
            "BSABKAUSDgoGZGVmaW5lGAYgASgFEgsKA2hpdBgHIAEoBRINCgVldmFkZRgI",
            "IAEoBRIMCgRjcml0GAkgASgFEhAKCHRlbmFjaXR5GAogASgFEhAKCHN0YXRl",
            "aGl0GAsgASgFEhIKCnN0YXRlZXZhZGUYDCABKAUiaQoWUm9sZVF1YWxpdHlV",
            "cENvbmRpdGlvbhIKCgJpZBgBIAEoBRIOCgZjb3VudDEYAiABKAUSDgoGY291",
            "bnQyGAMgASgFEg4KBmNvdW50MxgEIAEoBRITCgtpc19maW5pc2hlZBgFIAEo",
            "BSL0BQoIUm9sZUluZm8SDAoEdXVpZBgBIAEoBBILCgNjaWQYAiABKAUSEQoJ",
            "aXNfcGxheWVyGAMgASgFEg0KBWxldmVsGAQgASgFEgsKA2V4cBgFIAEoBRIM",
            "CgRza2luGAYgASgFEhMKC2Zhc2hpb25faGF0GAcgASgFEhUKDWZhc2hpb25f",
            "Y2xvdGgYCCABKAUSFgoOdHJhbnNtaWdyYXRpb24YFCABKAUSFAoMYnJlYWt0",
            "aHJvdWdoGBUgASgFEg4KBmF3YWtlbhgWIAEoBRIcChR1c2luZ191bHRpbWF0",
            "ZV9za2lsbBgXIAEoBRIcChR1bHRpbWF0ZV9za2lsbF9sZXZlbBgYIAEoBRIe",
            "ChZ1bmxvY2tfdWx0aW1hdGVfc2tpbGxzGBkgAygFEhsKE3VzaW5nX3Bhc3Np",
            "dmVfc2tpbGwYGiABKAUSGwoTcGFzc2l2ZV9za2lsbF9sZXZlbBgbIAEoBRId",
            "ChV1bmxvY2tfcGFzc2l2ZV9za2lsbHMYHCADKAUSHAoUaXNfcXVhbGl0eV9j",
            "aGFsbGVuZ2UYHSABKAUSGAoQaXNfcXVhbGl0eV9wcm9wcxgeIAEoBRIyCglj",
            "b25kaXRpb24YHyABKAsyHy5TdGFyZG9tLlJvbGVRdWFsaXR5VXBDb25kaXRp",
            "b24SEwoLaHBfZW5lcmdpemUYICABKAUSFgoOc3BlZWRfZW5lcmdpemUYISAB",
            "KAUSFwoPYXR0YWNrX2VuZXJnaXplGCIgASgFEhcKD2RlZmVuZF9lbmVyZ2l6",
            "ZRgjIAEoBRIWCg5lbmVyZ2l6ZV9waGFzZRgkIAEoBRIbChNlbmVyZ2l6ZV9l",
            "dmVudF90eXBlGCUgASgFEhwKFGVuZXJnaXplX2V2ZW50X3RpbWVzGCYgASgF",
            "Eh8KF2VuZXJnaXplX2V2ZW50X2RlYWR0aW1lGCcgASgEEjIKE2VuZXJnaXpl",
            "X2Nvc3RfaXRlbXMYKCADKAsyFS5TdGFyZG9tLkl0ZW1CYXNlSW5mbyJCCglF",
            "cXVpcEluZm8SIwoEYmFzZRgBIAEoCzIVLlN0YXJkb20uSXRlbUJhc2VJbmZv",
            "EhAKCHJvbGVfcG9zGAIgASgFIi4KB0dlbUluZm8SIwoEYmFzZRgBIAEoCzIV",
            "LlN0YXJkb20uSXRlbUJhc2VJbmZvIkMKC0FWQWN0b3JJbmZvEhIKCmFjdG9y",
            "X3R5cGUYASABKAUSDwoHcm9sZV9pZBgCIAEoBRIPCgdwb3N0X2lkGAMgASgF",
            "IpYBCgdBVkV2ZW50EhAKCGV2ZW50X2lkGAEgASgFEhIKCmlzX2hhbmRsZWQY",
            "AiABKAUSFAoMZXZlbnRfb3B0aW9uGAMgASgFEhIKCnRyaWdnZXJfdHMYBCAB",
            "KAQSFQoNc3ViX2V2ZW50X2lkcxgFIAMoBRIkCgVpdGVtcxgGIAMoCzIVLlN0",
            "YXJkb20uSXRlbUJhc2VJbmZvIoQBCg1BVkNoYXB0ZXJJbmZvEhIKCmNoYXB0",
            "ZXJfaWQYASABKAUSDgoGc3RhdHVzGAIgASgFEhMKC2N1c3RvbV9uYW1lGAMg",
            "ASgJEhQKDGN1c3RvbV9icmllZhgEIAEoCRISCgpzdGFydF90aW1lGAUgASgE",
            "EhAKCGVuZF90aW1lGAYgASgEIlgKDEFkZGl0aW9uQXR0chIPCgdhdHRyX2lk",
            "GAEgASgFEhEKCWF0dHJfdHlwZRgCIAEoBRISCgphdHRyX3ZhbHVlGAMgASgF",
            "EhAKCGF0dHJfaGl0GAQgASgFIjIKC0FWR2lmdHNJbmZvEhIKCndvcmtzX3V1",
            "aWQYASABKAQSDwoHZHJvcF9pZBgCIAEoBSKmAwoKQVZXb3JrSW5mbxIMCgR1",
            "dWlkGAEgASgEEgsKA2NpZBgCIAEoBRIOCgZzdGF0dXMYAyABKAUSDwoHYXZf",
            "bmFtZRgEIAEoCRIQCghhdl9icmllZhgFIAEoCRIoCgl0ZW1wX2F0dHIYBiAB",
            "KAsyFS5TdGFyZG9tLkFkZGl0aW9uQXR0chIoCglhdHRyX2luZm8YByABKAsy",
            "FS5TdGFyZG9tLkFkZGl0aW9uQXR0chIgCgZldmVudHMYCCADKAsyEC5TdGFy",
            "ZG9tLkFWRXZlbnQSJAoGYWN0b3JzGAkgAygLMhQuU3RhcmRvbS5BVkFjdG9y",
            "SW5mbxIsCgxjaGFwdGVyX2luZm8YCiADKAsyFi5TdGFyZG9tLkFWQ2hhcHRl",
            "ckluZm8SEwoLZmlnaHRfcG93ZXIYCyABKA0SEgoKc3Rhcl9sZXZlbBgMIAEo",
            "BRIWCg5kaXNjdXNzX2RlZ3JlZRgNIAEoBRIZChFkaXNjX2NvbnN1bWVfbnVt",
            "cxgOIAMoBRISCgpzdGFydF90aW1lGA8gASgEEhAKCGVuZF90aW1lGBAgASgE",
            "IkwKDkFWV29ya0NvbmRBdHRyEgoKAmlkGAEgASgFEg0KBWNvdW50GAIgASgF",
            "EhAKCGZpbmlzaGVkGAMgASgFEg0KBXBhcmFtGAQgASgFIowBCgxQYXJ0bmVy",
            "RXZlbnQSEAoIZXZlbnRfaWQYASABKAUSFAoMZXZlbnRfc3RhdHVzGAIgASgF",
            "EhIKCmV2ZW50X3BhcnQYAyABKAUSFAoMZXZlbnRfcmVzdWx0GAQgASgFEhMK",
            "C2V2ZW50X2RlbGF5GAUgASgEEhUKDWV2ZW50X3dhaXRfdHMYBiABKAQifwoT",
            "UGFydG5lclJlbGF0aW9uc2hpcBIUCgxwYXJ0bmVyX2FfaWQYASABKAUSFAoM",
            "cGFydG5lcl9iX2lkGAIgASgFEg8KB2JvbmRhZ2UYAyABKAUSFQoNYm9uZGFn",
            "ZV9sZXZlbBgEIAEoBRIUCgxib25kYWdlX25hbWUYBSABKAkiXAoPUGFydG5l",
            "ckRhdGVJbmZvEg8KB2RhdGVfaWQYASABKAUSFQoNdmVyc2FfZGF0ZV9pZBgC",
            "IAEoBRIRCglpc191bmxvY2sYAyABKAUSDgoGc3RhdHVzGAQgASgFIvECCgtQ",
            "YXJ0bmVySW5mbxIMCgR1dWlkGAEgASgEEgsKA2NpZBgCIAEoBRIPCgdib25k",
            "YWdlGAMgASgFEhUKDWJvbmRhZ2VfbGV2ZWwYBCABKAUSDwoHY2hhdF9pZBgG",
            "IAEoBRIbChNjb3JyZWN0X2NoYXRfb3B0aW9uGAcgASgFEhkKEXRvZGF5X2No",
            "YXR0ZWRfaWRzGAggAygFEisKCWRhdGVfaW5mbxgJIAMoCzIYLlN0YXJkb20u",
            "UGFydG5lckRhdGVJbmZvEhEKCW5pY2tfbmFtZRgKIAEoCRIUCgxib25kYWdl",
            "X25hbWUYCyABKAkSGQoRdG9kYXlfYWRkX2JvbmRhZ2UYDCABKAUSFwoPZ3Jl",
            "ZXRpbmdzX3RpbWVzGA0gAygFEhwKFGlzX3RvZGF5X3BsYXllZF9nYW1lGA4g",
            "ASgFEhAKCGdhbWVfbG9nGA8gASgJEhwKFHRvZGF5X3BsYXlfYmFyX3RpbWVz",
            "GBEgASgFIj4KDFBhcnRuZXJQaG90bxISCgpwYXJ0bmVyX2lkGAEgASgFEgoK",
            "AmlkGAIgASgFEg4KBnN0YXR1cxgDIAEoBSKRAQoRUGFydG5lckNvbW1pc3Np",
            "b24SFAoMcHJpbmNpcGFsX2lkGAEgASgFEhUKDWNvbW1pc3Npb25faWQYAiAB",
            "KAUSGQoRY29tbWlzc2lvbl9zdGF0dXMYAyABKAUSGQoRdGFyZ2V0X3BhcnRu",
            "ZXJfaWQYBCABKAUSGQoRc2V0dGxlX3BhcnRuZXJfaWQYBSABKAUigQMKC015",
            "R3VpbGRJbmZvEhAKCGd1aWxkX2lkGAEgASgEEhwKFGRhaWx5X3BheV9mdW5k",
            "X3RpbWVzGAMgASgFEhYKDmxhc3RfZXhpdF90aW1lGAQgASgEEh0KFWRhaWx5",
            "X2NoYWxsZW5nZV90aW1lcxgFIAEoBRIWCg5yZXdhcmRlZF9zdGFnZRgGIAMo",
            "BRIUCgxhcHBseV9ndWlsZHMYCiADKAQSHAoUcmV3YXJkZWRfd2VsZmFyZV9p",
            "ZHMYCyADKAUSLAoLYXR0cl9za2lsbHMYDCADKAsyFy5TdGFyZG9tLkd1aWxk",
            "U2tpbGxJbmZvEi0KDGFzc2V0X3NraWxscxgNIAMoCzIXLlN0YXJkb20uR3Vp",
            "bGRTa2lsbEluZm8SGwoTZGFpbHlfcHJlc2VudF90aW1lcxgOIAEoBRIfChd0",
            "ZWFfcGFydHlfYWRkX2V4cF90aW1lcxgPIAEoBRIkChxjYXJkX3RlYV9wYXJ0",
            "eV9hZGRfZXhwX3RpbWVzGBAgASgFIsUBCg5HdWlsZEFwcGx5SW5mbxIRCglw",
            "bGF5ZXJfaWQYASABKAQSEwoLcGxheWVyX25hbWUYAiABKAkSCwoDc2V4GAMg",
            "ASgFEg8KB2hlYWRfaWQYBCABKAUSDQoFbGV2ZWwYBSABKAUSDQoFa2F3ZWkY",
            "BiABKAUSEQoJaXNfb25saW5lGAcgASgFEhMKC2ZpZ2h0X3Bvd2VyGAggASgN",
            "EhMKC3BpYW5vX2xldmVsGAkgASgFEhIKCmRydW1fbGV2ZWwYCiABKAUiUQoR",
            "R3VpbGRCdWlsZGluZ0luZm8SEgoKYnVpbGRfdHlwZRgBIAEoBRINCgVsZXZl",
            "bBgCIAEoBRIZChFidWlsZF9jb21wbGV0ZV90cxgDIAEoBCItCg9HdWlsZEV2",
            "ZW50UGFyYW0SCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJIloKEEd1aWxk",
            "UGF5RnVuZFJhbmsSEQoJcGxheWVyX2lkGAEgASgEEgwKBHJhbmsYAiABKAUS",
            "EAoIcGF5X2Z1bmQYAyABKAUSEwoLcGxheWVyX25hbWUYBCABKAkiegoOR3Vp",
            "bGRFdmVudEluZm8SEgoKZXZlbnRfdHlwZRgBIAEoBRIQCghldmVudF9pZBgC",
            "IAEoBRISCgpldmVudF90aW1lGAMgASgEEi4KDGV2ZW50X3BhcmFtcxgEIAMo",
            "CzIYLlN0YXJkb20uR3VpbGRFdmVudFBhcmFtIk4KFEd1aWxkU3RhZ2VEYW1h",
            "Z2VSYW5rEhEKCXBsYXllcl9pZBgBIAEoBBIOCgZkYW1hZ2UYAiABKAUSEwoL",
            "cGxheWVyX25hbWUYAyABKAkiQgoRR3VpbGRTdGFnZU1vbnN0ZXISDAoEd2F2",
            "ZRgBIAEoBRILCgNwb3MYAiABKAUSEgoKbW9uc3Rlcl9ocBgDIAEoBSLYAQoO",
            "R3VpbGRTdGFnZUluZm8SFgoOZ3VpbGRfc3RhZ2VfaWQYASABKAUSDwoHYm9z",
            "c19ocBgCIAEoBRIXCg9sYXN0X2hpdF9wbGF5ZXIYAyABKAQSHAoUbGFzdF9o",
            "aXRfcGxheWVyX25hbWUYBCABKAkSMgoLZGFtYWdlX3JhbmsYBSADKAsyHS5T",
            "dGFyZG9tLkd1aWxkU3RhZ2VEYW1hZ2VSYW5rEjIKDnN0YWdlX21vbnN0ZXJz",
            "GAYgAygLMhouU3RhcmRvbS5HdWlsZFN0YWdlTW9uc3RlciK/BQoJR3VpbGRJ",
            "bmZvEhAKCGd1aWxkX2lkGAEgASgEEg8KB2ZhY3Rpb24YAiABKAUSEwoLZ3Vp",
            "bGRfbGV2ZWwYAyABKAUSEgoKZ3VpbGRfbmFtZRgEIAEoCRINCgV0ZW5ldBgF",
            "IAEoCRIQCghiYWRnZV9pZBgGIAEoBRISCgpndWlsZF9mdW5kGAcgASgFEhcK",
            "D2d1aWxkX2luZmx1ZW5jZRgIIAEoBRIMCgRyYW5rGAkgASgFEhIKCm1heF9t",
            "ZW1iZXIYCiABKAUSGAoQcmVxdWlyZV9sZXZlbF9pZBgLIAEoBRIYChByZXF1",
            "aXJlX2thd2VpX2lkGAwgASgFEhcKD2lzX2F1dG9fZXhhbWluZRgNIAEoBRIp",
            "CgdtZW1iZXJzGA4gAygLMhguU3RhcmRvbS5HdWlsZE1lbWJlckluZm8SKwoK",
            "YXBwbHlfbGlzdBgPIAMoCzIXLlN0YXJkb20uR3VpbGRBcHBseUluZm8SMQoN",
            "YnVpbGRpbmdfaW5mbxgQIAMoCzIaLlN0YXJkb20uR3VpbGRCdWlsZGluZ0lu",
            "Zm8SLQoMZ3VpbGRfZXZlbnRzGBEgAygLMhcuU3RhcmRvbS5HdWlsZEV2ZW50",
            "SW5mbxItCgxndWlsZF9zdGFnZXMYEiADKAsyFy5TdGFyZG9tLkd1aWxkU3Rh",
            "Z2VJbmZvEi8KD2d1aWxkX3dpc2hfaW5mbxgTIAMoCzIWLlN0YXJkb20uR3Vp",
            "bGRXaXNoSW5mbxIxCg5ndWlsZF9yZXRpbnVlcxgUIAMoCzIZLlN0YXJkb20u",
            "R3VpbGRSZXRpbnVlSW5mbxISCgptYWlsX3RpbWVzGBkgASgFEhQKDGJ1aWxk",
            "ZWRfdGltZRgaIAEoBBIyCg50ZWFfcGFydHlfaW5mbxgbIAEoCzIaLlN0YXJk",
            "b20uR3VpbGRUZWFQYXJ0eUluZm8ipgIKD0d1aWxkTWVtYmVySW5mbxIRCglw",
            "bGF5ZXJfaWQYASABKAQSDAoEbmFtZRgCIAEoCRILCgNzZXgYAyABKAUSDwoH",
            "aGVhZF9pZBgEIAEoBRINCgVsZXZlbBgFIAEoBRINCgVrYXdlaRgGIAEoBRIW",
            "Cg5ndWlsZF9wb3NpdGlvbhgHIAEoBRIWCg5kYWlseV9wYXlfZnVuZBgIIAEo",
            "BRIZChF3ZWVrX2NvbnRyaWJ1dGlvbhgJIAEoBRIaChJ0b3RhbF9jb250cmli",
            "dXRpb24YCiABKAUSEQoJbG9nb3V0X3RzGAsgASgEEhMKC2ZpZ2h0X3Bvd2Vy",
            "GAwgASgNEhMKC3BpYW5vX2xldmVsGA0gASgFEhIKCmRydW1fbGV2ZWwYDiAB",
            "KAUiXwoXR3VpbGRUZWFQYXJ0eUFkZEV4cEluZm8SEQoJcGxheWVyX2lkGAEg",
            "ASgEEhUKDWFkZF9leHBfdGltZXMYAiABKAUSGgoSY2FyZF9hZGRfZXhwX3Rp",
            "bWVzGAMgASgFItYBChFHdWlsZFRlYVBhcnR5SW5mbxIZChFpc190ZWFfcGFy",
            "dHlfb3BlbhgBIAEoBRIXCg9vcGVudGltZV9vcHRpb24YAiABKAUSFAoMdGVh",
            "X3BhcnR5X2lkGAMgASgFEhkKEXdlZWtseV9vcGVuX3RpbWVzGAQgASgFEhAK",
            "CHN0YXJ0X3RzGAUgASgEEg4KBmVuZF90cxgGIAEoBBI6ChBwbGF5ZXJfZXhw",
            "X2luZm9zGAcgAygLMiAuU3RhcmRvbS5HdWlsZFRlYVBhcnR5QWRkRXhwSW5m",
            "byKnAQoNR3VpbGRXaXNoSW5mbxIRCglwbGF5ZXJfaWQYASABKAQSFgoOd2lz",
            "aF9kZWJyaXNfaWQYAiABKAUSMgoTc3dpdGNoX2RlYnJpc19pdGVtcxgDIAMo",
            "CzIVLlN0YXJkb20uSXRlbUJhc2VJbmZvEhoKEnByZXNlbnRfcGxheWVyX2lk",
            "cxgEIAMoBBIbChNzd2l0Y2hlZF9wbGF5ZXJfaWRzGAUgAygEIlsKEEd1aWxk",
            "UmV0aW51ZUluZm8SEQoJcGxheWVyX2lkGAEgASgEEjQKDHJldGludWVfaW5m",
            "bxgCIAEoCzIeLlN0YXJkb20uQXJlYUVudGl0eVJldGludWVJbmZvIm4KD0d1",
            "aWxkV2lzaFJlY29yZBITCgtyZWNvcmRfdHlwZRgBIAEoBRIQCghzX3BhcmFt",
            "MRgCIAEoCRIQCghzX3BhcmFtMhgDIAEoCRIQCghpX3BhcmFtMRgEIAEoBRIQ",
            "CghpX3BhcmFtMhgFIAEoBSJPCg5HdWlsZFNraWxsSW5mbxIQCghza2lsbF9p",
            "ZBgBIAEoBRIWCg5za2lsbF9ncm91cF9pZBgCIAEoBRITCgtza2lsbF9sZXZl",
            "bBgDIAEoBSKwAQoNRmFuc0RlbGF5SW5mbxIZChFub3RpZmljYXRpb25fdHlw",
            "ZRgBIAEoBRIaChJub3RpZmljYXRpb25fcGFyYW0YAiABKAUSEAoIYWRkX2Zh",
            "bnMYAyABKAUSEAoIc3ViX2ZhbnMYBCABKAUSFwoPYWRkX2JsYWNrX3JhdGlv",
            "GAUgASgFEhcKD3N1Yl9ibGFja19yYXRpbxgGIAEoBRISCgpkZWxheV90aW1l",
            "GAcgASgEIpIBCgxDbHViQWN0aXZpdHkSGAoQY2x1Yl9hY3Rpdml0eV9pZBgB",
            "IAEoBRISCgp1c2VfZmNfbnVtGAIgASgFEhAKCGVuZF90aW1lGAMgASgEEhEK",
            "CWlzX3Jld2FyZBgEIAEoBRIRCglpc191cmdlbnQYBSABKAUSDAoEc29ydBgG",
            "IAEoBRIOCgZpc19uZXcYByABKAUiYAoNRmFuc0NsYXNzSW5mbxIPCgdmY190",
            "eXBlGAEgASgFEg4KBmZjX251bRgCIAEoBRIWCg5mY19sZWlzdXJlX251bRgD",
            "IAEoBRIWCg5mY19za2lsbF9sZXZlbBgEIAEoBSKCAgoURmFuc0NsdWJBY3Rp",
            "dml0eUluZm8SFQoNcmVmcmVzaF90aW1lcxgBIAEoBRITCgtleHRyYV90aW1l",
            "cxgCIAEoBRISCgpjbHViX3JvdW5kGAMgASgFEhcKD2NsdWJfbmV4dF9yb3Vu",
            "ZBgEIAEoBRIVCg1pbnZpdGVfZmNfbnVtGAYgASgFEiwKDGZhbnNfY2xhc3Nl",
            "cxgHIAMoCzIWLlN0YXJkb20uRmFuc0NsYXNzSW5mbxItCg5jbHViX2FjdGl2",
            "aXR5cxgIIAMoCzIVLlN0YXJkb20uQ2x1YkFjdGl2aXR5Eh0KFWZhbnNfY2xh",
            "c3NfbGV0dGVyX2lkcxgJIAMoBSJLCg9GYW5zQWNoaWV2ZW1lbnQSGAoQYWNo",
            "aWV2ZW1lbnRfdHlwZRgBIAEoBRIOCgZwYXJhbTEYAiABKAUSDgoGcGFyYW0y",
            "GAMgASgFIlgKEUZhbnNQdWJsaWNCZW5lZml0EhIKCmJlbmVmaXRfaWQYASAB",
            "KAUSGgoSZGFpbHlfY29udHJpYnV0aW9uGAIgASgFEhMKC2Nvb2xkb3duX3Rz",
            "GAMgASgEIn4KDkZhbnNQb3B1bGFyaXR5EhUKDXBvcHVsYXJpdHlfaWQYASAB",
            "KAUSEwoLZGFpbHlfdGltZXMYAiABKAUSFwoPZGFpbHlfZmVlX3RpbWVzGAMg",
            "ASgFEhgKEGRhaWx5X3BvcHVsYXJpdHkYBCABKAUSDQoFcGFyYW0YBSABKAUi",
            "2gEKCEZhbnNOb3RlEhkKEW5vdGlmaWNhdGlvbl90eXBlGAEgASgFEhoKEm5v",
            "dGlmaWNhdGlvbl9wYXJhbRgCIAEoBRIZChFub3RpZmljYXRpb25fdGltZRgD",
            "IAEoBBIQCghhZGRfZmFucxgEIAEoBRIQCghzdWJfZmFucxgFIAEoBRIXCg9h",
            "ZGRfYmxhY2tfcmF0aW8YBiABKAUSFwoPc3ViX2JsYWNrX3JhdGlvGAcgASgF",
            "EiYKC25vdGVfcGFyYW1zGAggAygLMhEuU3RhcmRvbS5LZXlQYXJhbSLjBAoO",
            "UGxheWVyRmFuc0luZm8SEAoIYmlydGhkYXkYASABKAUSDgoGaGVpZ2h0GAIg",
            "ASgFEg4KBndlaWdodBgDIAEoBRIVCg1wcm92aW5jZV9jb2RlGAQgASgFEhEK",
            "CWNpdHlfY29kZRgFIAEoBRISCgpmYW5zX2NvbG9yGAYgASgFEhEKCXNpZ25h",
            "dHVyZRgHIAEoCRIRCglmYW5zX2NhbGwYCCABKAkSDQoFZmxhZ3MYCSADKAUS",
            "DAoEZmFucxgKIAEoBRITCgtibGFja19yYXRpbxgLIAEoBRIRCglzaWduX3Rp",
            "bWUYDCABKAQSHQoVaGF2ZV96ZXJvYmxhY2tfcmV3YXJkGA0gASgFEioKCGFj",
            "aGlldmVzGA4gAygLMhguU3RhcmRvbS5GYW5zQWNoaWV2ZW1lbnQSMwoPcHVi",
            "bGljX2JlbmVmaXRzGA8gAygLMhouU3RhcmRvbS5GYW5zUHVibGljQmVuZWZp",
            "dBIrCgpwb3B1bGFyaXR5GBAgAygLMhcuU3RhcmRvbS5GYW5zUG9wdWxhcml0",
            "eRIlCgpmYW5zX25vdGVzGBEgAygLMhEuU3RhcmRvbS5GYW5zTm90ZRI0Cg1j",
            "bHViX2FjdGl2aXR5GBIgASgLMh0uU3RhcmRvbS5GYW5zQ2x1YkFjdGl2aXR5",
            "SW5mbxIrCgtkZWxheV9xdWV1ZRgTIAMoCzIWLlN0YXJkb20uRmFuc0RlbGF5",
            "SW5mbxIeChZmYW5zX2NhbGxfbW9kaWZ5X3RpbWVzGBQgASgFEh8KF2ZhbnNf",
            "Y29sb3JfbW9kaWZ5X3RpbWVzGBUgASgFIkwKDlBob25lR3JvdXBGYW5zEhUK",
            "DXBob25lX3JvbGVfaWQYASABKAUSEgoKcGhvbmVfZmFucxgCIAEoBRIPCgdm",
            "YW5zX2lkGAMgAygFIjYKClBob25lVG9waWMSEAoIdG9waWNfaWQYASABKAUS",
            "FgoOY2hhdF9vcHRpb25faWQYAiADKAUiMgoKUGhvbmVEZWxheRIQCgh0b3Bp",
            "Y19pZBgBIAEoBRISCgpkZWxheV90aW1lGAIgASgEItUBCg9QbGF5ZXJQaG9u",
            "ZUluZm8SKwoKZ3JvdXBfZmFucxgBIAEoCzIXLlN0YXJkb20uUGhvbmVHcm91",
            "cEZhbnMSKQoMcmVhZHlfdG9waWNzGAIgAygLMhMuU3RhcmRvbS5QaG9uZVRv",
            "cGljEioKDWZpbmlzaF90b3BpY3MYAyADKAsyEy5TdGFyZG9tLlBob25lVG9w",
            "aWMSFAoMcmV3YXJkX3RvcGljGAQgAygFEigKC2RlbGF5X3RvcGljGAUgAygL",
            "MhMuU3RhcmRvbS5QaG9uZURlbGF5Ij0KEVdlaWJvUmVwbHlDb21tZW50EhYK",
            "Dm5wY19jb21tZW50X2lkGAEgASgFEhAKCHJlcGx5X2lkGAIgASgFIrICChBX",
            "ZWlib01lc3NhZ2VJbmZvEhIKCndlaWJvX3V1aWQYASABKAQSEQoJcG9zdF90",
            "aW1lGAIgASgEEhQKDGlzX25wY193ZWlibxgDIAEoBRIQCgh3ZWlib19pZBgE",
            "IAEoBRIcChRmb3J3YXJkX25wY193ZWlib19pZBgFIAEoBRIZChFmb3J3YXJk",
            "X3JlYXNvbl9pZBgGIAEoBRIRCglhdF9ucGNfaWQYByADKAUSKwoHcmVwbGll",
            "cxgIIAMoCzIaLlN0YXJkb20uV2VpYm9SZXBseUNvbW1lbnQSFAoMbnBjX3dl",
            "aWJvX2lkGAkgASgFEhYKDmlzX3BsYXllcl9saWtlGAogASgFEhQKDHBsYXll",
            "cl9yZXBseRgLIAEoBRISCgpyZXBseV90aW1lGAwgASgEIsoBCg9QbGF5ZXJX",
            "ZWlib0luZm8SFQoNZm9sbG93X3BsYXllchgBIAMoBRIaChJmb2xsb3dlZF9i",
            "eV9wbGF5ZXIYAiADKAUSEwoLZGlzcGxheV9ucGMYAyADKAUSGgoSZGlzcGxh",
            "eV9jYW5jZWxfbnBjGAQgAygFEhYKDnJlYWR5X3dlaWJvX2lkGAUgAygFEi0K",
            "CndlaWJvX21zZ3MYBiADKAsyGS5TdGFyZG9tLldlaWJvTWVzc2FnZUluZm8S",
            "DAoEZmFucxgHIAEoBSJQCg5QbGF5ZXJOZXdHdWlkZRIPCgdpc19za2lwGAEg",
            "ASgFEhUKDW5ld19ndWlkZV9pZHMYAiADKAUSFgoOZnVuY19ndWlkZV9pZHMY",
            "AyADKAUisAIKDkdyYWRlQXJlbmFJbmZvEgwKBHJhbmsYASABKAUSEQoJcGxh",
            "eWVyX2lkGAIgASgEEg0KBWxldmVsGAMgASgFEg0KBWdyYWRlGAQgASgFEgsK",
            "A3NleBgFIAEoBRIPCgdmYWN0aW9uGAcgASgFEhMKC29wcG9uZW50X2lkGAgg",
            "ASgEEhAKCGd1aWxkX2lkGAkgASgEEhMKC2ZpZ2h0X3Bvd2VyGAogASgFEhMK",
            "C3BsYXllcl9uYW1lGAsgASgJEhIKCmd1aWxkX25hbWUYDCABKAkSFwoPeWVz",
            "dGVyZGF5X2dyYWRlGA0gASgFEhYKDnllc3RlcmRheV9yYW5rGA4gASgFEisK",
            "B2Zhc2hpb24YDyABKAsyGi5TdGFyZG9tLkZhc2hpb25TY2hlbWVJbmZvIl0K",
            "EUdyYWRlUmVnaXN0ZXJJbmZvEhEKCXBsYXllcl9pZBgBIAEoBBILCgNzZXgY",
            "AiABKAUSEwoLcGxheWVyX25hbWUYAyABKAkSEwoLZmlnaHRfcG93ZXIYBCAB",
            "KAUimQEKDkdyYWRlTWF0Y2hJbmZvEhMKC21hdGNoX2luZGV4GAEgASgFEg4K",
            "Bndpbm5lchgCIAEoBBIOCgZpc19ieWUYAyABKAUSKAoHcGxheWVyMRgEIAEo",
            "CzIXLlN0YXJkb20uR3JhZGVBcmVuYUluZm8SKAoHcGxheWVyMhgFIAEoCzIX",
            "LlN0YXJkb20uR3JhZGVBcmVuYUluZm8ibwoPR3JhZGVBcmVuYUV2ZW50EhAK",
            "CGV2ZW50X2lkGAEgASgFEhIKCmV2ZW50X3RpbWUYAiABKAQSEwoLb3Bwb25l",
            "bnRfaWQYAyABKAQSIQoGcGFyYW1zGAQgAygLMhEuU3RhcmRvbS5LZXlQYXJh",
            "bSKMAQoPR3JhZGVBcmVuYUNhY2hlEg0KBWdyYWRlGAEgASgFEhQKDHJhbmtf",
            "cGxheWVycxgCIAMoBBIeChZ5ZXN0ZXJkYXlfcmFua19wbGF5ZXJzGAMgAygE",
            "EjQKEHJlZ2lzdGVyX3BsYXllcnMYBCADKAsyGi5TdGFyZG9tLkdyYWRlUmVn",
            "aXN0ZXJJbmZvItsDCg9Jbml0RmlnaHRlckluZm8SCwoDd2lkGAEgASgFEgsK",
            "A3BvcxgCIAEoBRIPCgdjYXJkX2lkGAMgASgFEgwKBG5hbWUYBCABKAkSEgoK",
            "aXNfbW9uc3RlchgFIAEoBRINCgVsZXZlbBgGIAEoBRIVCg1iYXNlX3NraWxs",
            "X2lkGAcgASgFEhkKEXVsdGltYXRlX3NraWxsX2lkGAggASgFEhgKEHBhc3Np",
            "dmVfc2tpbGxfaWQYCSABKAUSCgoCaHAYCiABKAUSDgoGbWF4X2hwGAsgASgF",
            "Eg4KBmF0dGFjaxgMIAEoBRINCgVzcGVlZBgNIAEoBRIPCgdkZWZlbmNlGA4g",
            "ASgFEgsKA2hpdBgPIAEoBRINCgVkb2RnZRgQIAEoBRIQCghjcml0aWNhbBgR",
            "IAEoBRIRCgl0b3VnaG5lc3MYEiABKAUSEQoJc3RhdGVfaGl0GBMgASgFEhQK",
            "DHN0YXRlX3Jlc2lzdBgUIAEoBRIMCgRyYWdlGBUgASgFEhAKCGhpdF9yYWdl",
            "GBYgASgFEhAKCGF0a19yYWdlGBcgASgFEhAKCG1heF9yYWdlGBggASgFEhEK",
            "CXNoaWVsZF9ocBgZIAEoBRITCgtmaWdodF9wb3dlchgaIAEoBSKvAgoOV2Fy",
            "RmlnaHRlckluZm8SCwoDd2lkGAEgASgFEgwKBG5hbWUYAiABKAkSDAoEY2Ft",
            "cBgDIAEoBRISCgppc19tb25zdGVyGAQgASgFEgsKA3BvcxgFIAEoBRIPCgdj",
            "YXJkX2lkGAYgASgFEg0KBWxldmVsGAcgASgFEhUKDWJhc2Vfc2tpbGxfaWQY",
            "CCABKAUSGQoRdWx0aW1hdGVfc2tpbGxfaWQYCSABKAUSGAoQcGFzc2l2ZV9z",
            "a2lsbF9pZBgKIAEoBRIKCgJocBgLIAEoBRIOCgZtYXhfaHAYDCABKAUSDAoE",
            "cmFnZRgNIAEoBRIQCghtYXhfcmFnZRgOIAEoBRIrCgdmYXNoaW9uGA8gASgL",
            "MhouU3RhcmRvbS5GYXNoaW9uU2NoZW1lSW5mbyJqCgtXYXJDYW1wSW5mbxIM",
            "CgRjYW1wGAEgASgFEg0KBXN0YXJzGAIgASgFEgsKA3F0ZRgDIAEoBRIxCg1h",
            "Y3RpdmVfc3RhdHVzGAQgAygLMhouU3RhcmRvbS5BY3RpdmVTa2lsbFN0YXR1",
            "cyJzCgtXYXJCYXNlSW5mbxIQCgh3YXJfdXVpZBgBIAEoBBIpCghmaWdodGVy",
            "cxgDIAMoCzIXLlN0YXJkb20uV2FyRmlnaHRlckluZm8SJwoJY2FtcF9pbmZv",
            "GAQgAygLMhQuU3RhcmRvbS5XYXJDYW1wSW5mbyKOAQoHV2FySW5mbxIRCgli",
            "bHVlX3V1aWQYASABKAQSEAoIcmVkX3V1aWQYAiABKAQSEQoJaXNfbWFudWFs",
            "GAMgASgFEicKCWJhc2VfaW5mbxgEIAEoCzIULlN0YXJkb20uV2FyQmFzZUlu",
            "Zm8SIgoGb3JkZXJzGAUgAygLMhIuU3RhcmRvbS5PcmRlckluZm8iqgMKCU9y",
            "ZGVySW5mbxISCgpvcmRlcl90eXBlGAEgASgFEi0KDGJhdHRsZV9iZWdpbhgC",
            "IAEoCzIXLlN0YXJkb20uV2FyQmF0dGxlQmVnaW4SKwoLcm91bmRfYmVnaW4Y",
            "AyABKAsyFi5TdGFyZG9tLldhclJvdW5kQmVnaW4SLQoMc2tpbGxfYWN0aW9u",
            "GAQgASgLMhcuU3RhcmRvbS5XYXJTa2lsbEFjdGlvbhIvCg1hY3RpdmVfYWN0",
            "aW9uGAUgASgLMhguU3RhcmRvbS5XYXJBY3RpdmVBY3Rpb24SJwoJcm91bmRf",
            "ZW5kGAYgASgLMhQuU3RhcmRvbS5XYXJSb3VuZEVuZBIpCgpiYXR0bGVfZW5k",
            "GAcgASgLMhUuU3RhcmRvbS5XYXJCYXR0bGVFbmQSJQoFc2hvd3MYCCADKAsy",
            "Fi5TdGFyZG9tLldhckRhbWFnZVNob3cSKQoGc3RhdHVzGAkgAygLMhkuU3Rh",
            "cmRvbS5XYXJGaWdodGVyU3RhdHVzEicKCWNhbXBfaW5mbxgKIAMoCzIULlN0",
            "YXJkb20uV2FyQ2FtcEluZm8iRQoRQWN0aXZlU2tpbGxTdGF0dXMSFwoPYWN0",
            "aXZlX3NraWxsX2lkGAEgASgFEhcKD2FjdGl2ZV9za2lsbF9jZBgCIAEoBSIm",
            "Cg5XYXJCYXR0bGVCZWdpbhIUCgxiYXR0bGVfaW5kZXgYASABKAUiJAoMV2Fy",
            "QmF0dGxlRW5kEhQKDGJhdHRsZV9pbmRleBgBIAEoBSIxCg5XYXJTa2lsbEFj",
            "dGlvbhIQCghza2lsbF9pZBgBIAEoBRINCgVhY3RvchgCIAEoBSI4Cg9XYXJB",
            "Y3RpdmVBY3Rpb24SDAoEY2FtcBgBIAEoBRIXCg9hY3RpdmVfc2tpbGxfaWQY",
            "AiABKAUiJAoNV2FyUm91bmRCZWdpbhITCgtyb3VuZF9pbmRleBgBIAEoBSIi",
            "CgtXYXJSb3VuZEVuZBITCgtyb3VuZF9pbmRleBgBIAEoBSJkChBXYXJGaWdo",
            "dGVyU3RhdHVzEgsKA3dobxgBIAEoBRIKCgJocBgCIAEoBRIMCgRyYWdlGAMg",
            "ASgFEikKCWJ1ZmZfbGlzdBgEIAMoCzIWLlN0YXJkb20uV2FyQnVmZlN0YXR1",
            "cyI/Cg1XYXJCdWZmU3RhdHVzEg8KB2J1ZmZfaWQYASABKAUSDQoFcm91bmQY",
            "AiABKAUSDgoGbGF5ZXJzGAMgASgFIm0KDVdhckRhbWFnZVNob3cSDgoGc291",
            "cmNlGAEgASgFEgoKAmlkGAIgASgFEhAKCGF0dGFja2VyGAMgASgFEg4KBnRh",
            "cmdldBgEIAEoBRIRCglzaG93X3R5cGUYBSABKAUSCwoDdmFsGAYgASgFIsEB",
            "ChRUZXN0V2FyU3RhdGlzdGljSW5mbxITCgtzaW11bGF0ZV9pZBgBIAEoBRIX",
            "Cg9hY3RpdmVfc2tpbGxfaWQYAiABKAUSDgoGZGFtYWdlGAMgASgEEgwKBGh1",
            "cnQYBCABKAQSDAoEaGVhbBgFIAEoBBIbChNub3JtYWxfYXR0YWNrX3RpbWVz",
            "GAYgASgEEhwKFHVsdGltYXRlX3NraWxsX3RpbWVzGAcgASgEEhQKDGlzX2Js",
            "dWVfdGVhbRgIIAEoBSLbAQoLVGVzdFdhckluZm8SKwoEaW5mbxgBIAMoCzId",
            "LlN0YXJkb20uVGVzdFdhclN0YXRpc3RpY0luZm8SEwoLYmx1ZV9kYW1hZ2UY",
            "AiABKAQSEgoKcmVkX2RhbWFnZRgDIAEoBBIRCglibHVlX2h1cnQYBCABKAQS",
            "EAoIcmVkX2h1cnQYBSABKAQSEQoJYmx1ZV9oZWFsGAYgASgEEhAKCHJlZF9o",
            "ZWFsGAcgASgEEhkKEWlzX2JsdWVfd2luX3JvdW5kGAggASgFEhEKCWFsbF9y",
            "b3VuZBgJIAEoBSJ2ChVBcmVhRW50aXR5UmV0aW51ZUluZm8SGQoRcmV0aW51",
            "ZV9jYXJkX3V1aWQYASABKAQSFAoMcmV0aW51ZV9za2luGAIgASgFEhQKDHJl",
            "dGludWVfbmFtZRgDIAEoCRIWCg5sYXN0X2NoYW5nZV90cxgEIAEoBCKpAQoO",
            "QXJlYUVudGl0eUluZm8SEQoJZW50aXR5X2lkGAEgASgEEg0KBXBvc194GAIg",
            "ASgFEg0KBXBvc195GAMgASgFEhQKDG1haW5fY2FyZF9pZBgEIAEoBRIMCgRu",
            "YW1lGAUgASgJEhAKCG5pY2tuYW1lGAYgASgJEjAKDGZhc2hpb25faW5mbxgH",
            "IAEoCzIaLlN0YXJkb20uRmFzaGlvblNjaGVtZUluZm8iJgoIS2V5UGFyYW0S",
            "CwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJIikKC0tleVBhcmFtSW50EgsK",
            "A2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBSKLAgoITWFpbEluZm8SDwoHbWFp",
            "bF9pZBgBIAEoBBIMCgR0eXBlGAIgASgFEhMKC3RlbXBsYXRlX2lkGAMgASgF",
            "Eg4KBnNlbmRlchgFIAEoCRINCgV0aXRsZRgEIAEoCRIPCgdjb250ZW50GAYg",
            "ASgJEg8KB2lzX3JlYWQYByABKAUSDwoHaXNfcmVjdhgIIAEoBRISCgpleHBp",
            "cmF0aW9uGAkgASgEEhMKC2NyZWF0ZV90aW1lGAogASgEEigKCWl0ZW1fbGlz",
            "dBgLIAMoCzIVLlN0YXJkb20uSXRlbUJhc2VJbmZvEiYKC21haWxfcGFyYW1z",
            "GAwgAygLMhEuU3RhcmRvbS5LZXlQYXJhbSLrAgoOR2xvYmFsTWFpbEluZm8S",
            "DwoHbWFpbF9pZBgBIAEoBBITCgt0ZW1wbGF0ZV9pZBgCIAEoBRIOCgZzZW5k",
            "ZXIYAyABKAkSDQoFdGl0bGUYBCABKAkSDwoHY29udGVudBgFIAEoCRIRCglt",
            "aW5fbGV2ZWwYBiABKAUSEQoJbWF4X2xldmVsGAcgASgFEg8KB21pbl9wYXkY",
            "CCABKAUSDwoHbWF4X3BheRgJIAEoBRIUCgxtaW5fcmVnX3RpbWUYCiABKAQS",
            "FAoMbWF4X3JlZ190aW1lGAsgASgEEhAKCGVuZF90aW1lGAwgASgEEhMKC2Ny",
            "ZWF0ZV90aW1lGA0gASgEEigKCWl0ZW1fbGlzdBgOIAMoCzIVLlN0YXJkb20u",
            "SXRlbUJhc2VJbmZvEiYKC21haWxfcGFyYW1zGA8gAygLMhEuU3RhcmRvbS5L",
            "ZXlQYXJhbRIWCg5sYXN0X2xvZ2ludGltZRgQIAEoBCLdAgoOUGVyc29uUmFu",
            "a0luZm8SDAoEcmFuaxgBIAEoBRIRCglwbGF5ZXJfaWQYAiABKAQSDAoEbmFt",
            "ZRgDIAEoCRIPCgdmYWN0aW9uGAQgASgFEhIKCmd1aWxkX25hbWUYBSABKAkS",
            "CwoDc2V4GAYgASgFEhMKC2ZpZ2h0X3Bvd2VyGAcgASgFEg0KBWxldmVsGAgg",
            "ASgFEg0KBWthd2VpGAkgASgFEhIKCnBvcHVsYXJpdHkYCiABKAUSHAoUeWVz",
            "dGVyZGF5X3BvcHVsYXJpdHkYCyABKAUSEAoIZmFuc19udW0YDCABKAUSCwoD",
            "ZXhwGA0gASgFEg8KB2hlYWRfaWQYDiABKAUSEAoIZmFuc190YWcYDyADKAUS",
            "EgoKZmFuc19tb3R0bxgQIAEoCRIZChFjb3Vyc2VfZmFxX3JlY29yZBgRIAEo",
            "BRIUCgxmYW5zX3RhZ19zdHIYEiABKAkivwEKDUd1aWxkUmFua0luZm8SDAoE",
            "cmFuaxgBIAEoBRIPCgdmYWN0aW9uGAIgASgFEhAKCGd1aWxkX2lkGAMgASgE",
            "EhIKCmd1aWxkX25hbWUYBCABKAkSEwoLZ3VpbGRfbGV2ZWwYBSABKAUSFAoM",
            "Z3VpbGRfbnVtYmVyGAYgASgFEhkKEWd1aWxkX2xlYWRlcl9uYW1lGAcgASgJ",
            "EhMKC2d1aWxkX3RlbmV0GAggASgJEg4KBmltcGFjdBgKIAEoBSJrCgtTdGFn",
            "ZVJlc3VsdBISCgp3YXJfcmVzdWx0GAEgASgFEiIKCHdhcl9pbmZvGAIgASgL",
            "MhAuU3RhcmRvbS5XYXJJbmZvEiQKBWl0ZW1zGAMgAygLMhUuU3RhcmRvbS5J",
            "dGVtQmFzZUluZm8i2wEKCFRhc2tJbmZvEg8KB3Rhc2tfaWQYASABKAUSEwoL",
            "dGFza19zdGF0dXMYAiABKAUSEgoKdGFza19jb3VudBgDIAEoBRIRCgl0YXNr",
            "X25lZWQYBCABKAUSEwoLdGFza19jb3VudDIYBSABKAUSEgoKdGFza19uZWVk",
            "MhgGIAEoBRIWCg50YXNrX2FjY2VwdF90cxgHIAEoBBIYChB0YXNrX2RlYWRs",
            "aW5lX3RzGAggASgEEhMKC3Rhc2tfY291bnQzGAkgASgFEhIKCnRhc2tfbmVl",
            "ZDMYCiABKAUiQwoPRGFpbHlUYXNrUmV3YXJkEg4KBmNmZ19pZBgBIAEoBRIQ",
            "CghsaXZlbmVzcxgCIAEoBRIOCgZzdGF0dXMYAyABKAUiNAoMUGxvdFNlbGVj",
            "dGVkEg8KB3Bsb3RfaWQYASABKAUSEwoLcGxvdF9zZWxlY3QYAiABKAUi3AEK",
            "DFNob3BJdGVtSW5mbxISCgpwcm9kdWN0X2lkGAEgASgFEg8KB2RpZmZfaWQY",
            "AiABKAUSGAoQaXRlbV9idXllZF90aW1lcxgDIAEoBRIYChBpdGVtX2J1eWVk",
            "X2xpbWl0GAQgASgFEhgKEGl0ZW1fbGV2ZWxfbGltaXQYBSABKAUSHgoWaXRl",
            "bV9ndWlsZF9sZXZlbF9saW1pdBgGIAEoBRIXCg9pdGVtX2FkZGVkX3RpbWUY",
            "ByABKAQSIAoYaXRlbV9oaXN0b3J5X2dyYWRlX2xpbWl0GAggASgFIlYKEFNo",
            "b3BTZWxJdGVtc0luZm8SEQoJaXRlbV90eXBlGAEgASgFEg8KB2l0ZW1faWQY",
            "AiABKAUSEAoIaXRlbV9udW0YAyABKAUSDAoEZ3VpZBgEIAEoBCLGAQoKQ2hh",
            "dEVudGl0eRIRCglwbGF5ZXJfaWQYASABKAQSDAoEbmFtZRgCIAEoCRINCgVs",
            "ZXZlbBgDIAEoBRIPCgdjYXJkX2lkGAQgASgFEgsKA3ZpcBgFIAEoBRINCgVr",
            "YXdlaRgGIAEoBRIPCgdmYWN0aW9uGAcgASgFEhAKCGd1aWxkX2lkGAggASgE",
            "EhYKDmd1aWxkX3Bvc2l0aW9uGAkgASgFEg8KB2hlYWRfaWQYCiABKAUSDwoH",
            "dGVhbV9pZBgLIAEoBCI/Cg9QbGF5QmFyVHJlYXN1cmUSEwoLdHJlYXN1cmVf",
            "aWQYASABKAUSFwoPdHJlYXN1cmVfc3RhdHVzGAIgASgFIkIKElBsYXlCYXJX",
            "ZWF0aGVySW5mbxISCgp3ZWF0aGVyX2lkGAEgASgFEhgKEHdlYXRoZXJfZXZl",
            "bnRfaWQYAiABKAUiwwEKC1BsYXlCYXJJbmZvEioKCHRyZWFzdXJlGAEgAygL",
            "MhguU3RhcmRvbS5QbGF5QmFyVHJlYXN1cmUSEgoKZXZlbnRfbGlzdBgCIAMo",
            "BRIPCgdsZXR0ZXJzGAMgAygFEhkKEXVuaGFuZGxlX2V2ZW50X2lkGAQgASgF",
            "EhUKDXdhaXRfdW50aWxfdHMYBSABKAQSMQoMd2VhdGhlcl9pbmZvGAYgAygL",
            "MhsuU3RhcmRvbS5QbGF5QmFyV2VhdGhlckluZm8igwEKD1BsYXlCYXJDdXN0",
            "b21lchIKCgJpZBgBIAEoBRIZChFjb25zdW1wdGlvbl90aW1lcxgCIAEoBRIb",
            "ChN0b2RheV9jb25zdW1lX3RpbWVzGAMgASgFEhEKCXZpcF9sZXZlbBgEIAEo",
            "BRIZChF2aXBfY29uc3VtZV90aW1lcxgFIAEoBSJRCg9Td2VlcEludml0YXRp",
            "b24SCgoCaWQYASABKAUSDgoGc3RhdHVzGAIgASgFEgsKA3JlZBgDIAEoBRIV",
            "Cg1pbnZpdGF0aW9uX3RzGAQgASgEIs4BCg9QbGF5ZXJTd2VlcEluZm8SHAoU",
            "ZnJlZV9jaGFsbGVuZ2VfdGltZXMYASABKAUSHwoXY3VyX3N3ZWVwX21haW5f",
            "c3RhZ2VfaWQYAiABKAUSHQoVZmluaXNoX3N3ZWVwX3N0YWdlX2lkGAMgASgF",
            "EhMKC3JlY292ZXJ5X3RzGAQgASgEEi0KC2ludml0YXRpb25zGAYgAygLMhgu",
            "U3RhcmRvbS5Td2VlcEludml0YXRpb24SGQoRdG9kYXlfc3dlZXBfdGltZXMY",
            "ByABKAUiMwoLU3dlZXBSZXN1bHQSJAoFaXRlbXMYASADKAsyFS5TdGFyZG9t",
            "Lkl0ZW1CYXNlSW5mbyJSCg5Td2VlcFN0YWdlSW5mbxIQCghzd2VlcF9pZBgB",
            "IAEoBRIYChBpc19jaGFsbGVuZ2VhYmxlGAIgASgFEhQKDGlzX3N3ZWVwYWJs",
            "ZRgDIAEoBSI7CgtTd2VlcFNwSW5mbxIQCghzd2VlcF9pZBgBIAEoBRIaChJz",
            "cGVjaWFsX2Ryb3BfdGltZXMYBCABKAUiMQoTT3BlblN2ck9ubGluZVN0YXR1",
            "cxIKCgJpZBgBIAEoBRIOCgZzdGF0dXMYAiABKAUiNAoWT3BlblN2clNldmVu",
            "U2lnblN0YXR1cxIKCgJpZBgBIAEoBRIOCgZzdGF0dXMYAiABKAUiQwoWU2V2",
            "ZW5BY2hpZXZlbWVudFN0YXR1cxIKCgJpZBgBIAEoBRIOCgZzdGF0dXMYAiAB",
            "KAUSDQoFY291bnQYAyABKAUiWAoXU2V2ZW5BY2hpZXZlbWVudERheUluZm8S",
            "DgoGc3RhdHVzGAEgASgFEi0KBGluZm8YAiADKAsyHy5TdGFyZG9tLlNldmVu",
            "QWNoaWV2ZW1lbnRTdGF0dXMi0QEKFVNldmVuRGF5c0FjdGl2aXR5SW5mbxIK",
            "CgJpZBgBIAEoBRIRCglvcGVuX3RpbWUYAiABKAQSEAoIZW5kX3RpbWUYAyAB",
            "KAQSFwoPaXNfZW5kX3Jld2FyZGVkGAQgASgFEjMKCWRheV9pbmZvcxgFIAMo",
            "CzIgLlN0YXJkb20uU2V2ZW5BY2hpZXZlbWVudERheUluZm8SOQoKbGl2ZW5l",
            "c3NlcxgGIAMoCzIlLlN0YXJkb20uU2V2ZW5BY2hpZXZlbWVudExpdmVuZXNz",
            "SW5mbyI+ChxTZXZlbkFjaGlldmVtZW50TGl2ZW5lc3NJbmZvEg4KBmRlZ3Jl",
            "ZRgBIAEoBRIOCgZzdGF0dXMYAiABKAUiLAoPTW9udGhseVNpZ25JbmZvEgsK",
            "A2RheRgBIAEoBRIMCgRtb29kGAIgASgFIuEBCgtSZWNydWl0SW5mbxIMCgR0",
            "eXBlGAEgASgFEhgKEGd1YXJhbnRlZWRfdGltZXMYAiABKAUSFwoPdXNlZF9m",
            "cmVlX3RpbWVzGAMgASgFEhYKDnRyZWFzdXJlX3RpbWVzGAQgASgFEhMKC3Ry",
            "ZWFzdXJlX2lkGAUgASgFEhgKEHRvZGF5X2RyZXdfdGltZXMYBiABKAUSFQoN",
            "ZnJlZV9hZnRlcl90cxgHIAEoBBIWCg5hbGxfZHJld190aW1lcxgIIAEoBBIb",
            "ChNzcl9ndWFyYW50ZWVkX3RpbWVzGAkgASgFIlQKCkxlc3NvbkluZm8SFQoN",
            "c3ViX2xlc3Nvbl9pZBgBIAEoBRIVCg1sZXNzb25fcGFzc2VkGAIgASgFEhgK",
            "EGxlc3Nvbl9jb21wbGV0ZWQYAyABKAUiaQoRQ291cnNlQWNoaWV2ZW1lbnQS",
            "CgoCaWQYASABKAUSDgoGY291bnQxGAIgASgFEg4KBmNvdW50MhgDIAEoBRIT",
            "Cgtpc19maW5pc2hlZBgEIAEoBRITCgtpc19yZXdhcmRlZBgFIAEoBSKEAgoK",
            "Q291cnNlSW5mbxIRCgljb3Vyc2VfaWQYASABKAUSFAoMY291cnNlX2xldmVs",
            "GAIgASgFEhsKE2NvdXJzZV9wbGF5ZWRfdGltZXMYAyABKAUSHgoWY291cnNl",
            "X2NvbXBsZXRlZF90aW1lcxgEIAEoBRIYChBjb3Vyc2VfZGF5X3RpbWVzGAUg",
            "ASgFEhgKEGNvdXJzZV9wbG90X3NlZW4YBiABKAUSEQoJbGVzc29uX2lkGAcg",
            "ASgFEhYKDmlzX3RvZGF5X3Rva2VuGAggASgFEg8KB3JlY29yZDEYCSABKAUS",
            "DwoHcmVjb3JkMhgKIAEoBRIPCgdyZWNvcmQzGAsgASgFIoABCgtDb3Vyc2VT",
            "aGVldBIQCghzaGVldF9pZBgBIAEoBRIaChJzaGVldF9wbGF5ZWRfdGltZXMY",
            "AiABKAUSFQoNc2hlZXRfcmVjb3JkMRgDIAEoBRIVCg1zaGVldF9yZWNvcmQy",
            "GAQgASgFEhUKDXNoZWV0X3JlY29yZDMYBSABKAUiRgoRUGxhY2VSZXdhcmRT",
            "dGF0dXMSDQoFbGV2ZWwYASABKAUSEAoIcmV3YXJkXzEYAiABKAUSEAoIcmV3",
            "YXJkXzIYAyABKAUi6QEKCVBsYWNlSW5mbxIQCghwbGFjZV9pZBgBIAEoBRIR",
            "Cglqb2JfbGV2ZWwYAiABKAUSDgoGam9iX2lkGAMgASgFEhAKCGVuZF90aW1l",
            "GAQgASgEEhIKCndvcmtlcl9pZHMYBSADKAQSGAoQZmluaXNoX2pvYl90aW1l",
            "cxgGIAEoBRIWCg5wYXNzX2ludGVydmlldxgHIAEoBRIxCg1yZXdhcmRfc3Rh",
            "dHVzGAggAygLMhouU3RhcmRvbS5QbGFjZVJld2FyZFN0YXR1cxIcChRhbGxf",
            "ZmluaXNoX2pvYl90aW1lcxgJIAEoBSIxCgxUb3dlck1hcEdyaWQSDwoHZ3Jp",
            "ZF9pZBgBIAEoBRIQCghldmVudF9pZBgCIAEoBSKJAQoMVG93ZXJNYXBJbmZv",
            "EhEKCWN1cl9mbG9vchgBIAEoBRIQCghjdXJfZ3JpZBgCIAEoBRIUCgxldmVu",
            "dF9zdGF0dXMYAyABKAUSKAoJbWFwX2dyaWRzGAQgAygLMhUuU3RhcmRvbS5U",
            "b3dlck1hcEdyaWQSFAoMcGFzc2VkX2dpcmRzGAUgAygFIpMBCg5Ub3dlckV2",
            "ZW50SW5mbxIQCghvbGRfZ3JpZBgBIAEoBRIQCghuZXdfZ3JpZBgCIAEoBRIQ",
            "CghldmVudF9pZBgDIAEoBRIUCgxldmVudF9zdGF0dXMYBCABKAUSDQoFYnVm",
            "ZnMYBSADKAUSJgoHcmV3YXJkcxgGIAMoCzIVLlN0YXJkb20uSXRlbUJhc2VJ",
            "bmZvIkUKDlRvd2VyU3dlZXBJbmZvEg0KBWZsb29yGAEgASgFEiQKBWl0ZW1z",
            "GAIgAygLMhUuU3RhcmRvbS5JdGVtQmFzZUluZm8i2wEKD1BsYXllclRvd2Vy",
            "SW5mbxInCghtYXBfaW5mbxgBIAEoCzIVLlN0YXJkb20uVG93ZXJNYXBJbmZv",
            "EhkKEWRhaWx5X3Jlc2V0X3RpbWVzGAIgASgFEhkKEWRhaWx5X3N3ZWVwX3Rp",
            "bWVzGAMgASgFEhUKDWhpc3RvcnlfZmxvb3IYBCABKAUSFQoNc2hvcF9idWZm",
            "X2lkcxgFIAMoBRIVCg1ncmlkX2J1ZmZfaWRzGAYgAygFEhQKDGJ1eV9wcm9k",
            "dWN0cxgHIAMoBRIOCgZpc19yZWQYCiABKAUiKQoJRGVsYXlJbmZvEgoKAmlk",
            "GAEgASgFEhAKCGRlbGF5X3RzGAIgASgEImIKEEdyYWRlQXNzaXN0RXZlbnQS",
            "FwoPYXNzaXN0X2V2ZW50X2lkGAEgASgFEhIKCmV2ZW50X3RpbWUYAiABKAQS",
            "IQoGcGFyYW1zGAMgAygLMhEuU3RhcmRvbS5LZXlQYXJhbSJQCg9HcmFkZVRy",
            "YWluRXZlbnQSFgoOdHJhaW5fZXZlbnRfaWQYASABKAUSEgoKZXZlbnRfdGlt",
            "ZRgCIAEoBBIRCglpc19oYW5kbGUYAyABKAUiWAoOR3JhZGVJbnRlcnZpZXcS",
            "GgoSZ3JhZGVfaW50ZXJ2aWV3X2lkGAEgASgFEhcKD2ludGVydmlld19pbmRl",
            "eBgCIAEoBRIRCglpc19maW5pc2gYAyABKAUiRwoOR3JhZGVOaWNlRGlhcnkS",
            "EAoIZGlhcnlfaWQYASABKAUSDgoGc3RhdHVzGAIgASgFEhMKC3N0YXR1c190",
            "aW1lGAMgASgEIjUKDkdyYWRlQ2hhcmFjdGVyEhYKDmNoYXJhY3Rlcl90eXBl",
            "GAEgASgFEgsKA3ZhbBgCIAEoBSLdAwoPUGxheWVyR3JhZGVJbmZvEg0KBWdy",
            "YWRlGAEgASgFEhUKDWhpc3RvcnlfZ3JhZGUYAiABKAUSEgoKYXNzaXN0X3Zh",
            "bBgDIAEoBRIdChVhcmVuYV9jaGFsbGVuZ2VfdGltZXMYBCABKAUSFwoPYXJl",
            "bmFfYnV5X3RpbWVzGAUgASgFEhIKCmFyZW5hX3JhbmsYBiABKAUSFwoPeWVz",
            "dGVyZGF5X2dyYWRlGAcgASgFEhYKDnllc3RlcmRheV9yYW5rGAggASgFEhcK",
            "D2lzX2RhaWx5X3Jld2FyZBgJIAEoBRIqCgljaGFyYWN0ZXIYCiADKAsyFy5T",
            "dGFyZG9tLkdyYWRlQ2hhcmFjdGVyEioKCWludGVydmlldxgLIAMoCzIXLlN0",
            "YXJkb20uR3JhZGVJbnRlcnZpZXcSJgoFZGlhcnkYDCABKAsyFy5TdGFyZG9t",
            "LkdyYWRlTmljZURpYXJ5EjAKDWFzc2lzdF9ldmVudHMYDSADKAsyGS5TdGFy",
            "ZG9tLkdyYWRlQXNzaXN0RXZlbnQSLgoMdHJhaW5fZXZlbnRzGA4gAygLMhgu",
            "U3RhcmRvbS5HcmFkZVRyYWluRXZlbnQSGAoQamphY2hpZXZlX2dyYWRlcxgP",
            "IAMoBSKPAQoOQmFuZE1lbWJlckluZm8SEQoJcGxheWVyX2lkGAEgASgEEgwK",
            "BG5hbWUYAiABKAkSDwoHZmFjdGlvbhgDIAEoBRIQCghwb3NpdGlvbhgEIAEo",
            "BRIPCgdjYXJkX2lkGAUgASgFEg8KB2hlYWRfaWQYBiABKAUSCgoCZGQYByAD",
            "KAUSCwoDc2V4GAggASgFIm0KCEJhbmRJbmZvEhMKC2ZzaG93X3doaWNlGAEg",
            "ASgFEg8KB2ZhY3Rpb24YAiABKAUSEQoJYmFuZF9uYW1lGAMgASgJEigKB21l",
            "bWJlcnMYBCADKAsyFy5TdGFyZG9tLkJhbmRNZW1iZXJJbmZvIkwKDlZvdGVH",
            "aWZ0UGxheWVyEhEKCXBsYXllcl9pZBgBIAEoBBIWCg5hdG1vc19yZXdhcmRl",
            "ZBgCIAEoBRIPCgdmYWN0aW9uGAMgASgFItMBCg9GYWN0aW9uU2hvd0luZm8S",
            "EwoLZnNob3dfd2hpY2UYASABKAUSEQoJc3RkX2xldmVsGAIgASgFEg0KBXBo",
            "YXNlGAMgASgFEhIKCnBoYXNlX3BhcnQYBCABKAUSFwoPcGFydF9zdGFydF90",
            "aW1lGAUgASgEEhUKDXBhcnRfZW5kX3RpbWUYBiABKAQSGAoQZnNob3dfc3Rh",
            "cnRfdGltZRgHIAEoBBIWCg5rbm9ja291dF9hdG9tcxgIIAEoBRITCgtmaW5h",
            "bF9hdG9tcxgJIAEoBSKGAwoSRmFjdGlvblNob3dQYWNJbmZvEhEKCXBsYXll",
            "cl9pZBgBIAEoBBIMCgRuYW1lGAIgASgJEgwKBHNpZ24YAyABKAkSEAoIZ3Vp",
            "bGRfaWQYBCABKAQSEgoKZ3VpbGRfbmFtZRgFIAEoCRIPCgdmYWN0aW9uGAYg",
            "ASgFEg8KB2hlYWRfaWQYByABKAUSEgoKcHJvZmVzc2lvbhgIIAEoBRIPCgdj",
            "YXJkX2lkGAkgASgFEhMKC2ZpZ2h0X3Bvd2VyGAogASgFEg8KB3JhbmtpbmcY",
            "CyABKAUSEgoKdG90YWxfcmFuaxgMIAEoBRIUCgxmYWN0aW9uX3JhbmsYDSAB",
            "KAUSFwoPY2hhbGxlbmdlX3Njb3JlGA4gASgFEhIKCnZvdGVfc2NvcmUYDyAB",
            "KAUSDwoHdGVhbV9pZBgQIAEoBRITCgtkcHNfcGVyY2VudBgRIAEoBRIVCg1p",
            "bnNwaXJlX3RpbWVzGBQgASgFEgsKA3NleBgVIAEoBRINCgVsZXZlbBgWIAEo",
            "BSJuChVQbGF5ZXJGYWN0aW9uU2hvd0luZm8SEgoKdm90ZV90aW1lcxgBIAEo",
            "BRISCgpnaWZ0X3RpbWVzGAIgASgFEhcKD2dpZnRfcmVjb3Zlcl90cxgDIAEo",
            "BBIUCgx2b3RlX3BsYXllcnMYBCADKAQihAEKDFZvdGVHaWZ0SW5mbxIQCghy",
            "ZWNpZXZlchgBIAEoBBIRCglwbGF5ZXJfaWQYAiABKAQSDAoEbmFtZRgDIAEo",
            "CRIPCgdmYWN0aW9uGAQgASgFEg0KBWdyYWRlGAUgASgFEhAKCHZnX3Njb3Jl",
            "GAYgASgFEg8KB2lzX2pvaW4YByABKAUijwEKDUZTaG93VGVhbUluZm8SCwoD",
            "bWF4GAEgASgFEhEKCXRlYW1fbmFtZRgCIAEoCRISCgpjYXB0YWluX2lkGAMg",
            "ASgEEhcKD2NhcHRhaW5faGVhZF9pZBgEIAEoBRIPCgdmYWN0aW9uGAUgASgF",
            "EhEKCXRlYW1tYXRlcxgGIAMoBBINCgVzY29yZRgHIAEoBSJcCg5GU2hvd01h",
            "dGNoSW5mbxIPCgd0ZWFtX2lkGAEgASgFEhMKC3dpbl9mYWN0aW9uGAIgASgF",
            "EiQKBHRlYW0YAyADKAsyFi5TdGFyZG9tLkZTaG93VGVhbUluZm8iugEKEEZp",
            "bmFsRmFjdGlvbkluZm8SDwoHZmFjdGlvbhgBIAEoBRIXCg9mYWN0aW9uX2Fk",
            "dmlzb3IYAiABKAUSLwoKZmFjdGlvbl9wYxgDIAEoCzIbLlN0YXJkb20uRmFj",
            "dGlvblNob3dQYWNJbmZvEjQKD2ZhY3Rpb25fcmV2aXZlcxgEIAMoCzIbLlN0",
            "YXJkb20uRmFjdGlvblNob3dQYWNJbmZvEhUKDXJldml2YWJsZV9udW0YBSAB",
            "KAUi1AMKEVBsYXllckZhc2hpb25JbmZvEg8KB2hhaXJfaWQYASABKAUSEgoK",
            "aGFpcl9jb2xvchgCIAEoCRIUCgxleWVfc2hhcGVfaWQYAyABKAUSFAoMZXll",
            "X2NvbG9yX2lkGAQgASgFEhMKC2xpcHN0aWNrX2lkGAUgASgFEg8KB2ZhY2Vf",
            "aWQYBiABKAUSEQoJaXNfc2VsZWN0GAcgASgFEhAKCGFkZF9mYW5zGAggASgF",
            "Ei0KCHBhY2thZ2VzGAogAygLMhsuU3RhcmRvbS5GYXNoaW9uUGFja2FnZUlu",
            "Zm8SMAoJd2FyZWhvdXNlGAsgASgLMh0uU3RhcmRvbS5GYXNoaW9uV2FyZWhv",
            "dXNlSW5mbxItCgpwYXJ0X2NvbG9yGAwgAygLMhkuU3RhcmRvbS5GYXNoaW9u",
            "UGFydENvbG9yEhcKD2RyZXNzX3NjaGVtZV9pZBgNIAEoBRIwCgxzY2hlbWVf",
            "aW5mb3MYDiADKAsyGi5TdGFyZG9tLkZhc2hpb25TY2hlbWVJbmZvEi4KC2Jy",
            "YW5kX2luZm9zGA8gAygLMhkuU3RhcmRvbS5GYXNoaW9uQnJhbmRJbmZvEhgK",
            "EGhhaXJfY29sb3JfdGltZXMYFCABKAUiSAoPRmFzaGlvblBhcnRJbmZvEiMK",
            "BGJhc2UYASABKAsyFS5TdGFyZG9tLkl0ZW1CYXNlSW5mbxIQCghnb3RfdGlt",
            "ZRgCIAEoBCI5ChBGYXNoaW9uRHJlc3NQYXJ0EhEKCXBhcnRfdHlwZRgBIAEo",
            "BRISCgpmYXNoaW9uX2lkGAIgASgFIjUKEEZhc2hpb25QYXJ0Q29sb3ISEgoK",
            "ZmFzaGlvbl9pZBgBIAEoBRINCgVjb2xvchgCIAEoCSKTAQoRRmFzaGlvblNj",
            "aGVtZUluZm8SEQoJc2NoZW1lX2lkGAEgASgFEgwKBG5hbWUYAiABKAkSEQoJ",
            "aXNfdW5sb2NrGAMgASgFEhIKCmhhaXJfY29sb3IYBCABKAkSNgoTZHJlc3Nf",
            "ZmFzaGlvbl9wYXJ0cxgFIAMoCzIZLlN0YXJkb20uRmFzaGlvbkRyZXNzUGFy",
            "dCKWAQoSRmFzaGlvblBhY2thZ2VJbmZvEhoKEmZhc2hpb25fcGFja2FnZV9p",
            "ZBgBIAEoBRITCgtpc19jb21wbGV0ZRgCIAEoBRIRCglpc191bmxvY2sYAyAB",
            "KAUSEgoKaGFpcl9jb2xvchgEIAEoCRIVCg1jb21wbGV0ZV90aW1lGAYgASgE",
            "EhEKCWlzX3Jld2FyZBgHIAEoBSJHChRGYXNoaW9uV2FyZWhvdXNlSW5mbxIv",
            "Cg1mYXNoaW9uX3BhcnRzGAEgAygLMhguU3RhcmRvbS5GYXNoaW9uUGFydElu",
            "Zm8iQgoQRmFzaGlvbkJyYW5kSW5mbxIQCghicmFuZF9pZBgBIAEoBRINCgVs",
            "ZXZlbBgCIAEoBRINCgVzY29yZRgDIAEoBSJNChlGYXNoaW9uU3RhZ2VDaGFs",
            "bGVuZ2VJbmZvEjAKDWZhc2hpb25fcGFydHMYAiADKAsyGS5TdGFyZG9tLkZh",
            "c2hpb25EcmVzc1BhcnQiNAoQRmFzaGlvbkF0dHJTY29yZRIRCglhdHRyX3R5",
            "cGUYASABKAUSDQoFc2NvcmUYAiABKAUiygEKFFBsYXllckFWV29ya1Nob3dJ",
            "bmZvEjQKCWhhbGxfaW5mbxgBIAMoCzIhLlN0YXJkb20uQVZXb3JrU2hvd1Bs",
            "YXllckhhbGxJbmZvEhMKC2Vuam95X3RpbWVzGAIgASgFEhUKDXNuYWNrX2Nk",
            "X3RpbWUYAyABKAQSGgoSc2hhcmVfZnJpZW5kX3RpbWVzGAQgASgFEhkKEXNo",
            "YXJlX3dvcmxkX3RpbWVzGAUgASgFEhkKEXNoYXJlX2d1aWxkX3RpbWVzGAYg",
            "ASgFIkYKGEFWV29ya1Nob3dQbGF5ZXJIYWxsSW5mbxILCgNjaWQYASABKAUS",
            "DAoEdXVpZBgCIAEoBBIPCgd3b3JrX2lkGAMgASgFIkQKDkFWV29ya1Nob3dJ",
            "bmZvEjIKC2JhemFhcl9saXN0GAEgAygLMh0uU3RhcmRvbS5BVldvcmtTaG93",
            "QmF6YWFySW5mbyKRAQoUQVZXb3JrU2hvd0JhemFhckluZm8SEQoJd29ya190",
            "eXBlGAEgASgFEhAKCGd1ZXN0X2lkGAIgASgFEhQKDHBvcHVsYXJfc3RhchgD",
            "IAEoBRIRCglwbGFuX3N0YXIYBCABKAUSEAoIc2hvd19udW0YBSABKAUSCwoD",
            "aG90GAYgASgFEgwKBHJhbmsYByABKAUiMwoRQVZXb3JrU2hvd0hvdEluZm8S",
            "EQoJd29ya190eXBlGAEgASgFEgsKA2hvdBgCIAEoBSJ8ChNBVldvcmtTaG93",
            "SG90UmVjb3JkEgoKAmlkGAEgASgFEhIKCnRpbWVfc3RhbXAYAiABKAQSDAoE",
            "dHlwZRgDIAEoBRIQCghndWVzdF9pZBgEIAEoBRIlCgpwYXJhbV9saXN0GAUg",
            "AygLMhEuU3RhcmRvbS5LZXlQYXJhbSJmChRBVldvcmtTaG93UGxheWVySW5m",
            "bxIRCglwbGF5ZXJfaWQYASABKAQSDAoEbmFtZRgCIAEoCRIPCgdoZWFkX2lk",
            "GAMgASgFEgsKA3NleBgEIAEoBRIPCgd1c2VyX2lkGAUgASgEImQKE0FWV29y",
            "a1Nob3dTbmFja0luZm8SKAoJaXRlbV9iYXNlGAEgASgLMhUuU3RhcmRvbS5J",
            "dGVtQmFzZUluZm8SDgoGZW5lcmd5GAIgASgFEhMKC3NoYXJlX3RpbWVzGAMg",
            "ASgFIpoBChRBVldvcmtTaG93UmVjb3JkSW5mbxIyCgtwbGF5ZXJfaW5mbxgB",
            "IAEoCzIdLlN0YXJkb20uQVZXb3JrU2hvd1BsYXllckluZm8SEgoKdGltZV9z",
            "dGFtcBgCIAEoBBITCgtyZWNvcmRfdHlwZRgDIAEoBRIlCgpwYXJhbV9saXN0",
            "GAUgAygLMhEuU3RhcmRvbS5LZXlQYXJhbSJwChVBVldvcmtTaG93TWVzc2Fn",
            "ZUluZm8SMgoLcGxheWVyX2luZm8YASABKAsyHS5TdGFyZG9tLkFWV29ya1No",
            "b3dQbGF5ZXJJbmZvEhIKCnRpbWVfc3RhbXAYAiABKAQSDwoHbWVzc2FnZRgD",
            "IAEoCSKiAQoZQVZXb3JrU2hvd1NuYWNrUmVjb3JkSW5mbxIyCgtwbGF5ZXJf",
            "aW5mbxgBIAEoCzIdLlN0YXJkb20uQVZXb3JrU2hvd1BsYXllckluZm8SEgoK",
            "dGltZV9zdGFtcBgCIAEoBBITCgtyZWNvcmRfdHlwZRgDIAEoBRIoCglpdGVt",
            "X2xpc3QYBSADKAsyFS5TdGFyZG9tLkl0ZW1CYXNlSW5mbyKaAgoWQVZXb3Jr",
            "U2hvd0hhbGxCYXNlSW5mbxIMCgR1dWlkGAEgASgEEjIKC3BsYXllcl9pbmZv",
            "GAIgASgLMh0uU3RhcmRvbS5BVldvcmtTaG93UGxheWVySW5mbxImCgl3b3Jr",
            "X2luZm8YAyABKAsyEy5TdGFyZG9tLkFWV29ya0luZm8SEAoIaXNfZW5qb3kY",
            "BCABKAUSCwoDaG90GAUgASgFEjAKCnNuYWNrX2xpc3QYBiADKAsyHC5TdGFy",
            "ZG9tLkFWV29ya1Nob3dTbmFja0luZm8SEAoIbnBjX2xpc3QYByADKAUSMwoM",
            "dmlzaXRvcl9saXN0GAggAygLMh0uU3RhcmRvbS5BVldvcmtTaG93UGxheWVy",
            "SW5mbyLDAQoYQVZXb3JrU2hvd0hhbGxSZWNvcmRJbmZvEjQKDG1lc3NhZ2Vf",
            "bGlzdBgBIAMoCzIeLlN0YXJkb20uQVZXb3JrU2hvd01lc3NhZ2VJbmZvEjIK",
            "C3JlY29yZF9saXN0GAIgAygLMh0uU3RhcmRvbS5BVldvcmtTaG93UmVjb3Jk",
            "SW5mbxI9ChFzbmFja19yZWNvcmRfbGlzdBgDIAMoCzIiLlN0YXJkb20uQVZX",
            "b3JrU2hvd1NuYWNrUmVjb3JkSW5mbyKEAQoZQVZXb3JrU2hvd0hvdENoYW5n",
            "ZVJlY29yZBIKCgJpZBgBIAEoBRIRCgl3b3JrX3R5cGUYAiABKAUSEwoLZGVs",
            "dGFfdmFsdWUYAyABKAUSDQoFdmFsdWUYBCABKAUSEgoKdGltZV9zdGFtcBgF",
            "IAEoBBIQCghndWVzdF9pZBgGIAEoBSKKAQoOUGxheWVyVGVhbUluZm8SLQoO",
            "dGVhbV9wbGF5X2luZm8YASADKAsyFS5TdGFyZG9tLlRlYW1QbGF5SW5mbxIc",
            "ChRoYW5naW5nX2xlYWRlcl90aW1lcxgCIAEoBRIYChBwbGF5X3RvdGVsX3Rp",
            "bWVzGAMgASgFEhEKCWJ1eV90aW1lcxgEIAEoBSJbCgxUZWFtUGxheUluZm8S",
            "FAoMdGVhbV9wbGF5X2lkGAEgASgFEhcKD3RlYW1fcGxheV90aW1lcxgCIAEo",
            "BRIcChR0ZWFtX3BsYXlfcmVzZXRfdGltZRgDIAEoBCJnCgtUZWFtU2V0dGlu",
            "ZxIUCgx0ZWFtX3BsYXlfaWQYASABKAUSFgoOcHJlbXNzaW9uX3R5cGUYAiAB",
            "KAUSEwoLbGltaXRfbGV2ZWwYAyABKAUSFQoNaXNfYXV0b19hZ3JlZRgEIAEo",
            "BSL3AgoOVGVhbU1lbWJlckluZm8SCgoCaWQYASABKAUSEQoJcGxheWVyX2lk",
            "GAIgASgEEgwKBG5hbWUYAyABKAkSEQoJbmlja19uYW1lGAQgASgJEg0KBWxl",
            "dmVsGAUgASgFEgsKA3NleBgGIAEoBRIPCgdoZWFkX2lkGAcgASgFEhMKC2Zp",
            "Z2h0X3Bvd2VyGAggASgFEhMKC3BpYW5vX2xldmVsGAkgASgFEhIKCmRydW1f",
            "bGV2ZWwYCiABKAUSDwoHcG9zdF9pZBgLIAEoBRIQCghpc19yZWFkeRgMIAEo",
            "BRISCgppc19oYW5nX3VwGA0gASgFEhAKCHRpdGxlX2lkGA4gASgFEisKB2Zh",
            "c2hpb24YFCABKAsyGi5TdGFyZG9tLkZhc2hpb25TY2hlbWVJbmZvEi0KCnJv",
            "bGVfaW5mb3MYFSADKAsyGS5TdGFyZG9tLlRlYW1QbGF5Um9sZUluZm8SFQoN",
            "YWN0aXZlX3NraWxscxgWIAMoBSKgAQoIVGVhbUluZm8SDwoHdGVhbV9pZBgB",
            "IAEoBBIqCgx0ZWFtX3NldHRpbmcYAiABKAsyFC5TdGFyZG9tLlRlYW1TZXR0",
            "aW5nEi0KDHRlYW1fbWVtYmVycxgDIAMoCzIXLlN0YXJkb20uVGVhbU1lbWJl",
            "ckluZm8SFwoPd29ybGRfaW52aXRlX2NkGAQgASgEEg8KB2lzX3NvbG8YBSAB",
            "KAUirwIKDFRlYW1CYXNlSW5mbxIPCgd0ZWFtX2lkGAEgASgEEioKDHRlYW1f",
            "c2V0dGluZxgCIAEoCzIULlN0YXJkb20uVGVhbVNldHRpbmcSGAoQbGVhZGVy",
            "X3BsYXllcl9pZBgDIAEoBBIUCgxsZWFkZXJfbGV2ZWwYBCABKAUSEgoKbGVh",
            "ZGVyX3NleBgFIAEoBRIWCg5sZWFkZXJfaGVhZF9pZBgGIAEoBRITCgtsZWFk",
            "ZXJfbmFtZRgHIAEoCRISCgptZW1iZXJfbnVtGAggASgFEhMKC2NyZWF0ZV90",
            "aW1lGAkgASgEEhcKD21heF9waWFub19sZXZlbBgKIAEoBRIWCg5tYXhfZHJ1",
            "bV9sZXZlbBgLIAEoBRIXCg9tYXhfZmlnaHRfcG93ZXIYDCABKAUimwEKDVRl",
            "YW1BcHBseUluZm8SEQoJcGxheWVyX2lkGAEgASgEEgwKBG5hbWUYAiABKAkS",
            "DQoFbGV2ZWwYAyABKAUSCwoDc2V4GAQgASgFEg8KB2hlYWRfaWQYBSABKAUS",
            "EwoLcGlhbm9fbGV2ZWwYBiABKAUSEgoKZHJ1bV9sZXZlbBgHIAEoBRITCgtm",
            "aWdodF9wb3dlchgIIAEoBSJhChBUZWFtUGxheVJvbGVJbmZvEgwKBHV1aWQY",
            "ASABKAQSEQoJaXNfcGxheWVyGAIgASgFEiwKCmZpZ2h0X2luZm8YBiABKAsy",
            "GC5TdGFyZG9tLkluaXRGaWdodGVySW5mbyJpChhUZWFtUGxheUVtYmF0dGxl",
            "Um9sZUluZm8SEQoJcGxheWVyX2lkGAEgASgEEgwKBG5hbWUYAiABKAkSLAoJ",
            "cm9sZV9pbmZvGAMgASgLMhkuU3RhcmRvbS5UZWFtUGxheVJvbGVJbmZvIlgK",
            "EFRlYW1QbGF5QmFzZUluZm8SFAoMdGVhbV9wbGF5X2lkGAEgASgFEg0KBXRh",
            "Y2l0GAMgASgFEg4KBnN0YXR1cxgEIAEoBRIPCgd0aW1lb3V0GAUgASgEIsID",
            "ChFUZWFtUGxheVN0YWdlSW5mbxIQCghzdGFnZV9pZBgBIAEoBRINCgVzY29y",
            "ZRgDIAEoBRISCgpwbGF5ZXJfaWRzGAQgAygEEg4KBnN0YXR1cxgFIAEoBRIP",
            "Cgd0aW1lb3V0GAYgASgEEioKBmV2ZW50cxgJIAMoCzIaLlN0YXJkb20uVGVh",
            "bVBsYXlFdmVudEluZm8SKgoIcmFwX2luZm8YCiABKAsyGC5TdGFyZG9tLlRl",
            "YW1QbGF5UmFwSW5mbxIuCgpwaWFub19pbmZvGAsgASgLMhouU3RhcmRvbS5U",
            "ZWFtUGxheVBpYW5vSW5mbxI7ChFwaWFub19mb2xsb3dfaW5mbxgMIAEoCzIg",
            "LlN0YXJkb20uVGVhbVBsYXlQaWFub0ZvbGxvd0luZm8SLAoJZHJ1bV9pbmZv",
            "GA0gASgLMhkuU3RhcmRvbS5UZWFtUGxheURydW1JbmZvEiwKCW1vbGVfaW5m",
            "bxgOIAEoCzIZLlN0YXJkb20uVGVhbVBsYXlNb2xlSW5mbxI2Cg5zaW5nZGFu",
            "Y2VfaW5mbxgPIAEoCzIeLlN0YXJkb20uVGVhbVBsYXlTaW5nRGFuY2VJbmZv",
            "IlkKD1RlYW1QbGF5UmFwSW5mbxIRCglhbnN3ZXJfaWQYASABKAUSMwoLbXVz",
            "aWNfd29yZHMYAiADKAsyHi5TdGFyZG9tLlRlYW1QbGF5TXVzaWNXb3JkSW5m",
            "byI7ChFUZWFtUGxheVBpYW5vSW5mbxIRCgltZWxvZHlfaWQYASABKAUSEwoL",
            "aGlzdG9yeV9vcHQYAiADKAUiKAoXVGVhbVBsYXlQaWFub0ZvbGxvd0luZm8S",
            "DQoFcm91bmQYASABKAUiOgoQVGVhbVBsYXlEcnVtSW5mbxIRCgltZWxvZHlf",
            "aWQYASABKAUSEwoLaGlzdG9yeV9vcHQYAiADKAUiTgoQVGVhbVBsYXlNb2xl",
            "SW5mbxIUCgxtb2xlX2dhbWVfaWQYASABKAUSJAoFbW9sZXMYAiADKAsyFS5T",
            "dGFyZG9tLlRlYW1QbGF5TW9sZSJYCgxUZWFtUGxheU1vbGUSDwoHaG9sZV9p",
            "ZBgBIAEoBRISCgptb25zdGVyX2lkGAIgASgFEhAKCGVuZF90aW1lGAMgASgE",
            "EhEKCWJpdF90aW1lcxgEIAEoBSKUAQoVVGVhbVBsYXlTaW5nRGFuY2VJbmZv",
            "EhAKCGZpZ2h0X2NkGAEgASgEEjMKC211c2ljX3dvcmRzGAIgAygLMh4uU3Rh",
            "cmRvbS5UZWFtUGxheU11c2ljV29yZEluZm8SNAoJcG9zX2luZm9zGAMgAygL",
            "MiEuU3RhcmRvbS5UZWFtUGxheVNpbmdEYW5jZVBvc0luZm8iPgoYVGVhbVBs",
            "YXlTaW5nRGFuY2VQb3NJbmZvEg4KBnBvc19pZBgBIAEoBRISCgptb25zdGVy",
            "X2lkGAIgASgFImYKEVRlYW1QbGF5RXZlbnRJbmZvEgoKAmlkGAEgASgFEhAK",
            "CGV2ZW50X2lkGAIgASgFEjMKB3BsYXllcnMYBCADKAsyIi5TdGFyZG9tLlRl",
            "YW1QbGF5RXZlbnRQbGF5ZXJUYXJnZXQiTQoZVGVhbVBsYXlFdmVudFBsYXll",
            "clRhcmdldBIRCglwbGF5ZXJfaWQYASABKAQSCwoDa2V5GAMgASgFEhAKCGVu",
            "ZF90aW1lGAQgASgEIkwKEVRlYW1QbGF5RXZlbnREZXNjEhAKCGV2ZW50X2lk",
            "GAEgASgFEiUKCmtleV9wYXJhbXMYAiADKAsyES5TdGFyZG9tLktleVBhcmFt",
            "In4KFVRlYW1QbGF5TXVzaWNXb3JkSW5mbxIMCgR0eXBlGAEgASgFEiUKBW11",
            "c2ljGAIgASgLMhYuU3RhcmRvbS5UZWFtUGxheU11c2ljEjAKC2V2ZW50X211",
            "c2ljGAMgASgLMhsuU3RhcmRvbS5UZWFtUGxheUV2ZW50TXVzaWMiNAoNVGVh",
            "bVBsYXlNdXNpYxIMCgRuYW1lGAEgASgJEhUKDW11c2ljX3dvcmRfaWQYAiAB",
            "KAUiTQoSVGVhbVBsYXlFdmVudE11c2ljEhAKCGV2ZW50X2lkGAEgASgFEiUK",
            "CmtleV9wYXJhbXMYAiADKAsyES5TdGFyZG9tLktleVBhcmFtIj0KEVRlYW1Q",
            "bGF5Um9ib3RJbmZvEgoKAmlkGAEgASgFEg0KBXBvc194GAIgASgFEg0KBXBv",
            "c195GAMgASgFIl8KEVRlYW1QbGF5TWVtYmVyRHBzEhEKCXBsYXllcl9pZBgB",
            "IAEoBBIMCgRuYW1lGAIgASgJEg8KB2hlYWRfaWQYAyABKAUSCwoDc2V4GAQg",
            "ASgFEgsKA2RwcxgFIAEoBSJRCg9UZWFtUGxheURwc0luZm8SDgoGcG9zX2lk",
            "GAEgASgFEi4KCm1lbWJlcl9kcHMYAiADKAsyGi5TdGFyZG9tLlRlYW1QbGF5",
            "TWVtYmVyRHBzIsIBChNQbGF5ZXJUcmFpblRvb2xJbmZvEhQKDGFyZGVudF92",
            "YWx1ZRgBIAEoBRIUCgxhc3Npc3RfdGltZXMYAiABKAUSGQoRcGxvdGVkX3Ry",
            "YWludG9vbHMYAyADKAUSMwoMZnJpZW5kX3RpbWVzGAQgAygLMh0uU3RhcmRv",
            "bS5UcmFpblRvb2xGcmllbmRUaW1lcxIvCg90cmFpbnRvb2xfaW5mb3MYBSAD",
            "KAsyFi5TdGFyZG9tLlRyYWluVG9vbEluZm8iOAoUVHJhaW5Ub29sRnJpZW5k",
            "VGltZXMSEQoJcGxheWVyX2lkGAEgASgEEg0KBXRpbWVzGAIgASgFImkKDVRy",
            "YWluVG9vbEluZm8SFAoMdHJhaW50b29sX2lkGAEgASgFEhEKCWN1cl9sYXll",
            "chgCIAEoBRIZChFjb250aW51ZV9mYWlsdXJlcxgGIAEoBRIUCgxjaGFsbGVu",
            "Z2VfY2QYByABKAQiegoTVHJhaW5Ub29sQXNzaXN0SW5mbxIrCgljYXJkX2lu",
            "Zm8YASABKAsyGC5TdGFyZG9tLkluaXRGaWdodGVySW5mbxI2Cg5hc3Npc3Rf",
            "cmVjb3JkcxgCIAMoCzIeLlN0YXJkb20uVHJhaW5Ub29sQXNzaXN0UmVjb3Jk",
            "Ir4BChVUcmFpblRvb2xBc3Npc3RSZWNvcmQSEQoJcGxheWVyX2lkGAEgASgE",
            "EgwKBG5hbWUYAiABKAkSDQoFbGV2ZWwYAyABKAUSDwoHaGVhZF9pZBgEIAEo",
            "BRILCgNzZXgYBSABKAUSEQoJdGltZXN0YW1wGAYgASgEEg8KB2NhcmRfaWQY",
            "ByABKAUSFAoMdHJhaW50b29sX2lkGAggASgFEg0KBWxheWVyGAkgASgFEg4K",
            "BmlzX3N1YxgKIAEoBSJpChlUcmFpblRvb2xGcmllbmRBc3Npc3RJbmZvEhEK",
            "CXBsYXllcl9pZBgBIAEoBBIMCgRuYW1lGAIgASgJEisKCWNhcmRfaW5mbxgD",
            "IAEoCzIYLlN0YXJkb20uSW5pdEZpZ2h0ZXJJbmZvIksKD1BsYXllclRpdGxl",
            "SW5mbxIiCgZ0aXRsZXMYASADKAsyEi5TdGFyZG9tLlRpdGxlSW5mbxIUCgx1",
            "c2VfdGl0bGVfaWQYAiABKAUiMAoJVGl0bGVJbmZvEiMKBGJhc2UYASABKAsy",
            "FS5TdGFyZG9tLkl0ZW1CYXNlSW5mbyqUAQoJT3JkZXJUeXBlEg4KCk9UX1VO",
            "S05PV04QABITCg9PVF9CQVRUTEVfQkVHSU4QARIRCg1PVF9CQVRUTEVfRU5E",
            "EAISEgoOT1RfUk9VTkRfQkVHSU4QAxIQCgxPVF9ST1VORF9FTkQQBBITCg9P",
            "VF9TS0lMTF9BQ1RJT04QBRIUChBPVF9BQ1RJVkVfQUNUSU9OEAZiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Stardom.OrderType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.WorldInfo), global::Stardom.WorldInfo.Parser, new[]{ "DailyResetTs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PlayerInfo), global::Stardom.PlayerInfo.Parser, new[]{ "OpenInfo", "InitId", "CreateTime", "LoginTime", "LogoutTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PlayerOpenInfo), global::Stardom.PlayerOpenInfo.Parser, new[]{ "PlayerId", "Name", "Nickname", "SystemHeadId", "HeadEdgeId", "Faction", "VipLevel", "VipExp", "Grade", "SpecialGrade", "FightPower", "CpZoneId", "OnlineTime", "NameModifyTimes", "NicknameModifyTimes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PlayerSynInfo), global::Stardom.PlayerSynInfo.Parser, new[]{ "SynType", "SynIVal", "SynLVal", "SynSVal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PlayerCache), global::Stardom.PlayerCache.Parser, new[]{ "OpenInfo", "Level", "Sex", "GuildId", "GuildName", "Fans", "Sign", "TeamId", "TitleId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PlayerRoleCache), global::Stardom.PlayerRoleCache.Parser, new[]{ "PlayerId", "RoleCount", "RolePos", "Roles", "Equips", "RoleAttrs", "Embattle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PlayerAVWorksCache), global::Stardom.PlayerAVWorksCache.Parser, new[]{ "PlayerId", "Works" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PlayerCommonInfo), global::Stardom.PlayerCommonInfo.Parser, new[]{ "PropCap", "EquipCap", "DayResetTime", "WeekResetTime", "GlobalMailIds", "GradeArenaReward", "GradeArenaTimes", "GradeArenaBuyTimes", "AchieveGrades", "RenameTime", "RenameNicknameTime", "RewardedGiftCode", "MorningResetTime", "MonthResetTime", "IsPhoneSign" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.FriendInfo), global::Stardom.FriendInfo.Parser, new[]{ "ServerId", "PlayerId", "PlayerName", "HeadId", "Level", "Sex", "FightPower", "Grade", "Intimacy", "GuildId", "GuildName", "LogoutTime", "CreateTime", "LastMsgTime", "RecommendReason", "PianoLevel", "DrumLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.FriendLocalInfo), global::Stardom.FriendLocalInfo.Parser, new[]{ "PlayerId", "Intimacy", "IsVisit", "LastMsgTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.FriendApplyInfo), global::Stardom.FriendApplyInfo.Parser, new[]{ "FriendInfo", "LeaveMsg", "ApplyTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.FriendTalkMsg), global::Stardom.FriendTalkMsg.Parser, new[]{ "MsgId", "FromId", "ToId", "EmojiType", "TalkMsg", "CreateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PlayerFriendInfo), global::Stardom.PlayerFriendInfo.Parser, new[]{ "LocalInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PlayerOfflineInfo), global::Stardom.PlayerOfflineInfo.Parser, new[]{ "Level", "Grade", "Sex", "Faction", "FightPower", "HeadId", "Profession", "CardId", "PlayerId", "GuildId", "Name", "NickName", "GuildName", "Sign", "FashionInfo", "ActiveSkills", "Fighters", "ArdentValue", "AssistInfo", "AssistRecords", "ArenaRecords", "TitleId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.ActivityInfo), global::Stardom.ActivityInfo.Parser, new[]{ "ActivityId", "Count", "Daycount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PlayerActivityInfo), global::Stardom.PlayerActivityInfo.Parser, new[]{ "Activities", "IsPhoneSign", "TelephoneNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.OperationInfo), global::Stardom.OperationInfo.Parser, new[]{ "OperationId", "IsFinish" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PlayerOperationInfo), global::Stardom.PlayerOperationInfo.Parser, new[]{ "Operations" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.DailyRecord), global::Stardom.DailyRecord.Parser, new[]{ "Cid", "Uuid", "TodayUse" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.HubInfo), global::Stardom.HubInfo.Parser, new[]{ "Id", "Val" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.GameActivityInfo), global::Stardom.GameActivityInfo.Parser, new[]{ "ActivityId", "Phase", "PhaseEndTs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.OperationQuestion), global::Stardom.OperationQuestion.Parser, new[]{ "QuestionUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.GameOperationInfo), global::Stardom.GameOperationInfo.Parser, new[]{ "OperationId", "StartTs", "EndTs", "Question" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.ActivityRewardStatus), global::Stardom.ActivityRewardStatus.Parser, new[]{ "ValueId", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.GemPosInfo), global::Stardom.GemPosInfo.Parser, new[]{ "GemPos", "GemId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.EquipPosInfo), global::Stardom.EquipPosInfo.Parser, new[]{ "EquipPos", "EquipUuid", "EquipSkin", "EquipLevel", "GemInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.RolePosInfo), global::Stardom.RolePosInfo.Parser, new[]{ "Pos", "RoleUuid", "EquipList", "SuitIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.RoleEmbattleInfo), global::Stardom.RoleEmbattleInfo.Parser, new[]{ "Front1", "Front2", "Back1", "Back2", "Back3", "FansSkill1", "FansSkill2", "FansSkill3", "FansSkill4" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.ItemBaseInfo), global::Stardom.ItemBaseInfo.Parser, new[]{ "Type", "Uuid", "Cid", "BindStatus", "Num", "Expiration", "OriginId", "OriginType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.IdlePlayInfo), global::Stardom.IdlePlayInfo.Parser, new[]{ "FreeTime", "FeeTime", "PlayedTime", "WasteTime", "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.SvrIdlePlayInfo), global::Stardom.SvrIdlePlayInfo.Parser, new[]{ "UseFreeTimes", "UseFeeTimes", "IsOpen", "LastGetTime", "LastCalcTime", "CurSweepStageId", "CurKawei", "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PropInfo), global::Stardom.PropInfo.Parser, new[]{ "Base", "UseTimes", "DailyNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.RoleSkillInfo), global::Stardom.RoleSkillInfo.Parser, new[]{ "SkillId", "SkillLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.RoleAttrInfo), global::Stardom.RoleAttrInfo.Parser, new[]{ "RoleUuid", "FightPower", "Hp", "Speed", "Attack", "Define", "Hit", "Evade", "Crit", "Tenacity", "Statehit", "Stateevade" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.RoleQualityUpCondition), global::Stardom.RoleQualityUpCondition.Parser, new[]{ "Id", "Count1", "Count2", "Count3", "IsFinished" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.RoleInfo), global::Stardom.RoleInfo.Parser, new[]{ "Uuid", "Cid", "IsPlayer", "Level", "Exp", "Skin", "FashionHat", "FashionCloth", "Transmigration", "Breakthrough", "Awaken", "UsingUltimateSkill", "UltimateSkillLevel", "UnlockUltimateSkills", "UsingPassiveSkill", "PassiveSkillLevel", "UnlockPassiveSkills", "IsQualityChallenge", "IsQualityProps", "Condition", "HpEnergize", "SpeedEnergize", "AttackEnergize", "DefendEnergize", "EnergizePhase", "EnergizeEventType", "EnergizeEventTimes", "EnergizeEventDeadtime", "EnergizeCostItems" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.EquipInfo), global::Stardom.EquipInfo.Parser, new[]{ "Base", "RolePos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.GemInfo), global::Stardom.GemInfo.Parser, new[]{ "Base" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.AVActorInfo), global::Stardom.AVActorInfo.Parser, new[]{ "ActorType", "RoleId", "PostId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.AVEvent), global::Stardom.AVEvent.Parser, new[]{ "EventId", "IsHandled", "EventOption", "TriggerTs", "SubEventIds", "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.AVChapterInfo), global::Stardom.AVChapterInfo.Parser, new[]{ "ChapterId", "Status", "CustomName", "CustomBrief", "StartTime", "EndTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.AdditionAttr), global::Stardom.AdditionAttr.Parser, new[]{ "AttrId", "AttrType", "AttrValue", "AttrHit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.AVGiftsInfo), global::Stardom.AVGiftsInfo.Parser, new[]{ "WorksUuid", "DropId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.AVWorkInfo), global::Stardom.AVWorkInfo.Parser, new[]{ "Uuid", "Cid", "Status", "AvName", "AvBrief", "TempAttr", "AttrInfo", "Events", "Actors", "ChapterInfo", "FightPower", "StarLevel", "DiscussDegree", "DiscConsumeNums", "StartTime", "EndTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.AVWorkCondAttr), global::Stardom.AVWorkCondAttr.Parser, new[]{ "Id", "Count", "Finished", "Param" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PartnerEvent), global::Stardom.PartnerEvent.Parser, new[]{ "EventId", "EventStatus", "EventPart", "EventResult", "EventDelay", "EventWaitTs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PartnerRelationship), global::Stardom.PartnerRelationship.Parser, new[]{ "PartnerAId", "PartnerBId", "Bondage", "BondageLevel", "BondageName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PartnerDateInfo), global::Stardom.PartnerDateInfo.Parser, new[]{ "DateId", "VersaDateId", "IsUnlock", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PartnerInfo), global::Stardom.PartnerInfo.Parser, new[]{ "Uuid", "Cid", "Bondage", "BondageLevel", "ChatId", "CorrectChatOption", "TodayChattedIds", "DateInfo", "NickName", "BondageName", "TodayAddBondage", "GreetingsTimes", "IsTodayPlayedGame", "GameLog", "TodayPlayBarTimes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PartnerPhoto), global::Stardom.PartnerPhoto.Parser, new[]{ "PartnerId", "Id", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PartnerCommission), global::Stardom.PartnerCommission.Parser, new[]{ "PrincipalId", "CommissionId", "CommissionStatus", "TargetPartnerId", "SettlePartnerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.MyGuildInfo), global::Stardom.MyGuildInfo.Parser, new[]{ "GuildId", "DailyPayFundTimes", "LastExitTime", "DailyChallengeTimes", "RewardedStage", "ApplyGuilds", "RewardedWelfareIds", "AttrSkills", "AssetSkills", "DailyPresentTimes", "TeaPartyAddExpTimes", "CardTeaPartyAddExpTimes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.GuildApplyInfo), global::Stardom.GuildApplyInfo.Parser, new[]{ "PlayerId", "PlayerName", "Sex", "HeadId", "Level", "Kawei", "IsOnline", "FightPower", "PianoLevel", "DrumLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.GuildBuildingInfo), global::Stardom.GuildBuildingInfo.Parser, new[]{ "BuildType", "Level", "BuildCompleteTs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.GuildEventParam), global::Stardom.GuildEventParam.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.GuildPayFundRank), global::Stardom.GuildPayFundRank.Parser, new[]{ "PlayerId", "Rank", "PayFund", "PlayerName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.GuildEventInfo), global::Stardom.GuildEventInfo.Parser, new[]{ "EventType", "EventId", "EventTime", "EventParams" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.GuildStageDamageRank), global::Stardom.GuildStageDamageRank.Parser, new[]{ "PlayerId", "Damage", "PlayerName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.GuildStageMonster), global::Stardom.GuildStageMonster.Parser, new[]{ "Wave", "Pos", "MonsterHp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.GuildStageInfo), global::Stardom.GuildStageInfo.Parser, new[]{ "GuildStageId", "BossHp", "LastHitPlayer", "LastHitPlayerName", "DamageRank", "StageMonsters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.GuildInfo), global::Stardom.GuildInfo.Parser, new[]{ "GuildId", "Faction", "GuildLevel", "GuildName", "Tenet", "BadgeId", "GuildFund", "GuildInfluence", "Rank", "MaxMember", "RequireLevelId", "RequireKaweiId", "IsAutoExamine", "Members", "ApplyList", "BuildingInfo", "GuildEvents", "GuildStages", "GuildWishInfo", "GuildRetinues", "MailTimes", "BuildedTime", "TeaPartyInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.GuildMemberInfo), global::Stardom.GuildMemberInfo.Parser, new[]{ "PlayerId", "Name", "Sex", "HeadId", "Level", "Kawei", "GuildPosition", "DailyPayFund", "WeekContribution", "TotalContribution", "LogoutTs", "FightPower", "PianoLevel", "DrumLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.GuildTeaPartyAddExpInfo), global::Stardom.GuildTeaPartyAddExpInfo.Parser, new[]{ "PlayerId", "AddExpTimes", "CardAddExpTimes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.GuildTeaPartyInfo), global::Stardom.GuildTeaPartyInfo.Parser, new[]{ "IsTeaPartyOpen", "OpentimeOption", "TeaPartyId", "WeeklyOpenTimes", "StartTs", "EndTs", "PlayerExpInfos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.GuildWishInfo), global::Stardom.GuildWishInfo.Parser, new[]{ "PlayerId", "WishDebrisId", "SwitchDebrisItems", "PresentPlayerIds", "SwitchedPlayerIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.GuildRetinueInfo), global::Stardom.GuildRetinueInfo.Parser, new[]{ "PlayerId", "RetinueInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.GuildWishRecord), global::Stardom.GuildWishRecord.Parser, new[]{ "RecordType", "SParam1", "SParam2", "IParam1", "IParam2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.GuildSkillInfo), global::Stardom.GuildSkillInfo.Parser, new[]{ "SkillId", "SkillGroupId", "SkillLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.FansDelayInfo), global::Stardom.FansDelayInfo.Parser, new[]{ "NotificationType", "NotificationParam", "AddFans", "SubFans", "AddBlackRatio", "SubBlackRatio", "DelayTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.ClubActivity), global::Stardom.ClubActivity.Parser, new[]{ "ClubActivityId", "UseFcNum", "EndTime", "IsReward", "IsUrgent", "Sort", "IsNew" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.FansClassInfo), global::Stardom.FansClassInfo.Parser, new[]{ "FcType", "FcNum", "FcLeisureNum", "FcSkillLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.FansClubActivityInfo), global::Stardom.FansClubActivityInfo.Parser, new[]{ "RefreshTimes", "ExtraTimes", "ClubRound", "ClubNextRound", "InviteFcNum", "FansClasses", "ClubActivitys", "FansClassLetterIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.FansAchievement), global::Stardom.FansAchievement.Parser, new[]{ "AchievementType", "Param1", "Param2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.FansPublicBenefit), global::Stardom.FansPublicBenefit.Parser, new[]{ "BenefitId", "DailyContribution", "CooldownTs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.FansPopularity), global::Stardom.FansPopularity.Parser, new[]{ "PopularityId", "DailyTimes", "DailyFeeTimes", "DailyPopularity", "Param" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.FansNote), global::Stardom.FansNote.Parser, new[]{ "NotificationType", "NotificationParam", "NotificationTime", "AddFans", "SubFans", "AddBlackRatio", "SubBlackRatio", "NoteParams" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PlayerFansInfo), global::Stardom.PlayerFansInfo.Parser, new[]{ "Birthday", "Height", "Weight", "ProvinceCode", "CityCode", "FansColor", "Signature", "FansCall", "Flags", "Fans", "BlackRatio", "SignTime", "HaveZeroblackReward", "Achieves", "PublicBenefits", "Popularity", "FansNotes", "ClubActivity", "DelayQueue", "FansCallModifyTimes", "FansColorModifyTimes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PhoneGroupFans), global::Stardom.PhoneGroupFans.Parser, new[]{ "PhoneRoleId", "PhoneFans", "FansId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PhoneTopic), global::Stardom.PhoneTopic.Parser, new[]{ "TopicId", "ChatOptionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PhoneDelay), global::Stardom.PhoneDelay.Parser, new[]{ "TopicId", "DelayTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PlayerPhoneInfo), global::Stardom.PlayerPhoneInfo.Parser, new[]{ "GroupFans", "ReadyTopics", "FinishTopics", "RewardTopic", "DelayTopic" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.WeiboReplyComment), global::Stardom.WeiboReplyComment.Parser, new[]{ "NpcCommentId", "ReplyId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.WeiboMessageInfo), global::Stardom.WeiboMessageInfo.Parser, new[]{ "WeiboUuid", "PostTime", "IsNpcWeibo", "WeiboId", "ForwardNpcWeiboId", "ForwardReasonId", "AtNpcId", "Replies", "NpcWeiboId", "IsPlayerLike", "PlayerReply", "ReplyTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PlayerWeiboInfo), global::Stardom.PlayerWeiboInfo.Parser, new[]{ "FollowPlayer", "FollowedByPlayer", "DisplayNpc", "DisplayCancelNpc", "ReadyWeiboId", "WeiboMsgs", "Fans" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PlayerNewGuide), global::Stardom.PlayerNewGuide.Parser, new[]{ "IsSkip", "NewGuideIds", "FuncGuideIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.GradeArenaInfo), global::Stardom.GradeArenaInfo.Parser, new[]{ "Rank", "PlayerId", "Level", "Grade", "Sex", "Faction", "OpponentId", "GuildId", "FightPower", "PlayerName", "GuildName", "YesterdayGrade", "YesterdayRank", "Fashion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.GradeRegisterInfo), global::Stardom.GradeRegisterInfo.Parser, new[]{ "PlayerId", "Sex", "PlayerName", "FightPower" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.GradeMatchInfo), global::Stardom.GradeMatchInfo.Parser, new[]{ "MatchIndex", "Winner", "IsBye", "Player1", "Player2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.GradeArenaEvent), global::Stardom.GradeArenaEvent.Parser, new[]{ "EventId", "EventTime", "OpponentId", "Params" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.GradeArenaCache), global::Stardom.GradeArenaCache.Parser, new[]{ "Grade", "RankPlayers", "YesterdayRankPlayers", "RegisterPlayers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.InitFighterInfo), global::Stardom.InitFighterInfo.Parser, new[]{ "Wid", "Pos", "CardId", "Name", "IsMonster", "Level", "BaseSkillId", "UltimateSkillId", "PassiveSkillId", "Hp", "MaxHp", "Attack", "Speed", "Defence", "Hit", "Dodge", "Critical", "Toughness", "StateHit", "StateResist", "Rage", "HitRage", "AtkRage", "MaxRage", "ShieldHp", "FightPower" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.WarFighterInfo), global::Stardom.WarFighterInfo.Parser, new[]{ "Wid", "Name", "Camp", "IsMonster", "Pos", "CardId", "Level", "BaseSkillId", "UltimateSkillId", "PassiveSkillId", "Hp", "MaxHp", "Rage", "MaxRage", "Fashion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.WarCampInfo), global::Stardom.WarCampInfo.Parser, new[]{ "Camp", "Stars", "Qte", "ActiveStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.WarBaseInfo), global::Stardom.WarBaseInfo.Parser, new[]{ "WarUuid", "Fighters", "CampInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.WarInfo), global::Stardom.WarInfo.Parser, new[]{ "BlueUuid", "RedUuid", "IsManual", "BaseInfo", "Orders" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.OrderInfo), global::Stardom.OrderInfo.Parser, new[]{ "OrderType", "BattleBegin", "RoundBegin", "SkillAction", "ActiveAction", "RoundEnd", "BattleEnd", "Shows", "Status", "CampInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.ActiveSkillStatus), global::Stardom.ActiveSkillStatus.Parser, new[]{ "ActiveSkillId", "ActiveSkillCd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.WarBattleBegin), global::Stardom.WarBattleBegin.Parser, new[]{ "BattleIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.WarBattleEnd), global::Stardom.WarBattleEnd.Parser, new[]{ "BattleIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.WarSkillAction), global::Stardom.WarSkillAction.Parser, new[]{ "SkillId", "Actor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.WarActiveAction), global::Stardom.WarActiveAction.Parser, new[]{ "Camp", "ActiveSkillId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.WarRoundBegin), global::Stardom.WarRoundBegin.Parser, new[]{ "RoundIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.WarRoundEnd), global::Stardom.WarRoundEnd.Parser, new[]{ "RoundIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.WarFighterStatus), global::Stardom.WarFighterStatus.Parser, new[]{ "Who", "Hp", "Rage", "BuffList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.WarBuffStatus), global::Stardom.WarBuffStatus.Parser, new[]{ "BuffId", "Round", "Layers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.WarDamageShow), global::Stardom.WarDamageShow.Parser, new[]{ "Source", "Id", "Attacker", "Target", "ShowType", "Val" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TestWarStatisticInfo), global::Stardom.TestWarStatisticInfo.Parser, new[]{ "SimulateId", "ActiveSkillId", "Damage", "Hurt", "Heal", "NormalAttackTimes", "UltimateSkillTimes", "IsBlueTeam" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TestWarInfo), global::Stardom.TestWarInfo.Parser, new[]{ "Info", "BlueDamage", "RedDamage", "BlueHurt", "RedHurt", "BlueHeal", "RedHeal", "IsBlueWinRound", "AllRound" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.AreaEntityRetinueInfo), global::Stardom.AreaEntityRetinueInfo.Parser, new[]{ "RetinueCardUuid", "RetinueSkin", "RetinueName", "LastChangeTs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.AreaEntityInfo), global::Stardom.AreaEntityInfo.Parser, new[]{ "EntityId", "PosX", "PosY", "MainCardId", "Name", "Nickname", "FashionInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.KeyParam), global::Stardom.KeyParam.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.KeyParamInt), global::Stardom.KeyParamInt.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.MailInfo), global::Stardom.MailInfo.Parser, new[]{ "MailId", "Type", "TemplateId", "Sender", "Title", "Content", "IsRead", "IsRecv", "Expiration", "CreateTime", "ItemList", "MailParams" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.GlobalMailInfo), global::Stardom.GlobalMailInfo.Parser, new[]{ "MailId", "TemplateId", "Sender", "Title", "Content", "MinLevel", "MaxLevel", "MinPay", "MaxPay", "MinRegTime", "MaxRegTime", "EndTime", "CreateTime", "ItemList", "MailParams", "LastLogintime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PersonRankInfo), global::Stardom.PersonRankInfo.Parser, new[]{ "Rank", "PlayerId", "Name", "Faction", "GuildName", "Sex", "FightPower", "Level", "Kawei", "Popularity", "YesterdayPopularity", "FansNum", "Exp", "HeadId", "FansTag", "FansMotto", "CourseFaqRecord", "FansTagStr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.GuildRankInfo), global::Stardom.GuildRankInfo.Parser, new[]{ "Rank", "Faction", "GuildId", "GuildName", "GuildLevel", "GuildNumber", "GuildLeaderName", "GuildTenet", "Impact" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.StageResult), global::Stardom.StageResult.Parser, new[]{ "WarResult", "WarInfo", "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TaskInfo), global::Stardom.TaskInfo.Parser, new[]{ "TaskId", "TaskStatus", "TaskCount", "TaskNeed", "TaskCount2", "TaskNeed2", "TaskAcceptTs", "TaskDeadlineTs", "TaskCount3", "TaskNeed3" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.DailyTaskReward), global::Stardom.DailyTaskReward.Parser, new[]{ "CfgId", "Liveness", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PlotSelected), global::Stardom.PlotSelected.Parser, new[]{ "PlotId", "PlotSelect" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.ShopItemInfo), global::Stardom.ShopItemInfo.Parser, new[]{ "ProductId", "DiffId", "ItemBuyedTimes", "ItemBuyedLimit", "ItemLevelLimit", "ItemGuildLevelLimit", "ItemAddedTime", "ItemHistoryGradeLimit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.ShopSelItemsInfo), global::Stardom.ShopSelItemsInfo.Parser, new[]{ "ItemType", "ItemId", "ItemNum", "Guid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.ChatEntity), global::Stardom.ChatEntity.Parser, new[]{ "PlayerId", "Name", "Level", "CardId", "Vip", "Kawei", "Faction", "GuildId", "GuildPosition", "HeadId", "TeamId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PlayBarTreasure), global::Stardom.PlayBarTreasure.Parser, new[]{ "TreasureId", "TreasureStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PlayBarWeatherInfo), global::Stardom.PlayBarWeatherInfo.Parser, new[]{ "WeatherId", "WeatherEventId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PlayBarInfo), global::Stardom.PlayBarInfo.Parser, new[]{ "Treasure", "EventList", "Letters", "UnhandleEventId", "WaitUntilTs", "WeatherInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PlayBarCustomer), global::Stardom.PlayBarCustomer.Parser, new[]{ "Id", "ConsumptionTimes", "TodayConsumeTimes", "VipLevel", "VipConsumeTimes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.SweepInvitation), global::Stardom.SweepInvitation.Parser, new[]{ "Id", "Status", "Red", "InvitationTs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PlayerSweepInfo), global::Stardom.PlayerSweepInfo.Parser, new[]{ "FreeChallengeTimes", "CurSweepMainStageId", "FinishSweepStageId", "RecoveryTs", "Invitations", "TodaySweepTimes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.SweepResult), global::Stardom.SweepResult.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.SweepStageInfo), global::Stardom.SweepStageInfo.Parser, new[]{ "SweepId", "IsChallengeable", "IsSweepable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.SweepSpInfo), global::Stardom.SweepSpInfo.Parser, new[]{ "SweepId", "SpecialDropTimes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.OpenSvrOnlineStatus), global::Stardom.OpenSvrOnlineStatus.Parser, new[]{ "Id", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.OpenSvrSevenSignStatus), global::Stardom.OpenSvrSevenSignStatus.Parser, new[]{ "Id", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.SevenAchievementStatus), global::Stardom.SevenAchievementStatus.Parser, new[]{ "Id", "Status", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.SevenAchievementDayInfo), global::Stardom.SevenAchievementDayInfo.Parser, new[]{ "Status", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.SevenDaysActivityInfo), global::Stardom.SevenDaysActivityInfo.Parser, new[]{ "Id", "OpenTime", "EndTime", "IsEndRewarded", "DayInfos", "Livenesses" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.SevenAchievementLivenessInfo), global::Stardom.SevenAchievementLivenessInfo.Parser, new[]{ "Degree", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.MonthlySignInfo), global::Stardom.MonthlySignInfo.Parser, new[]{ "Day", "Mood" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.RecruitInfo), global::Stardom.RecruitInfo.Parser, new[]{ "Type", "GuaranteedTimes", "UsedFreeTimes", "TreasureTimes", "TreasureId", "TodayDrewTimes", "FreeAfterTs", "AllDrewTimes", "SrGuaranteedTimes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.LessonInfo), global::Stardom.LessonInfo.Parser, new[]{ "SubLessonId", "LessonPassed", "LessonCompleted" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.CourseAchievement), global::Stardom.CourseAchievement.Parser, new[]{ "Id", "Count1", "Count2", "IsFinished", "IsRewarded" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.CourseInfo), global::Stardom.CourseInfo.Parser, new[]{ "CourseId", "CourseLevel", "CoursePlayedTimes", "CourseCompletedTimes", "CourseDayTimes", "CoursePlotSeen", "LessonId", "IsTodayToken", "Record1", "Record2", "Record3" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.CourseSheet), global::Stardom.CourseSheet.Parser, new[]{ "SheetId", "SheetPlayedTimes", "SheetRecord1", "SheetRecord2", "SheetRecord3" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PlaceRewardStatus), global::Stardom.PlaceRewardStatus.Parser, new[]{ "Level", "Reward1", "Reward2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PlaceInfo), global::Stardom.PlaceInfo.Parser, new[]{ "PlaceId", "JobLevel", "JobId", "EndTime", "WorkerIds", "FinishJobTimes", "PassInterview", "RewardStatus", "AllFinishJobTimes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TowerMapGrid), global::Stardom.TowerMapGrid.Parser, new[]{ "GridId", "EventId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TowerMapInfo), global::Stardom.TowerMapInfo.Parser, new[]{ "CurFloor", "CurGrid", "EventStatus", "MapGrids", "PassedGirds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TowerEventInfo), global::Stardom.TowerEventInfo.Parser, new[]{ "OldGrid", "NewGrid", "EventId", "EventStatus", "Buffs", "Rewards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TowerSweepInfo), global::Stardom.TowerSweepInfo.Parser, new[]{ "Floor", "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PlayerTowerInfo), global::Stardom.PlayerTowerInfo.Parser, new[]{ "MapInfo", "DailyResetTimes", "DailySweepTimes", "HistoryFloor", "ShopBuffIds", "GridBuffIds", "BuyProducts", "IsRed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.DelayInfo), global::Stardom.DelayInfo.Parser, new[]{ "Id", "DelayTs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.GradeAssistEvent), global::Stardom.GradeAssistEvent.Parser, new[]{ "AssistEventId", "EventTime", "Params" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.GradeTrainEvent), global::Stardom.GradeTrainEvent.Parser, new[]{ "TrainEventId", "EventTime", "IsHandle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.GradeInterview), global::Stardom.GradeInterview.Parser, new[]{ "GradeInterviewId", "InterviewIndex", "IsFinish" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.GradeNiceDiary), global::Stardom.GradeNiceDiary.Parser, new[]{ "DiaryId", "Status", "StatusTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.GradeCharacter), global::Stardom.GradeCharacter.Parser, new[]{ "CharacterType", "Val" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PlayerGradeInfo), global::Stardom.PlayerGradeInfo.Parser, new[]{ "Grade", "HistoryGrade", "AssistVal", "ArenaChallengeTimes", "ArenaBuyTimes", "ArenaRank", "YesterdayGrade", "YesterdayRank", "IsDailyReward", "Character", "Interview", "Diary", "AssistEvents", "TrainEvents", "JjachieveGrades" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.BandMemberInfo), global::Stardom.BandMemberInfo.Parser, new[]{ "PlayerId", "Name", "Faction", "Position", "CardId", "HeadId", "Dd", "Sex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.BandInfo), global::Stardom.BandInfo.Parser, new[]{ "FshowWhice", "Faction", "BandName", "Members" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.VoteGiftPlayer), global::Stardom.VoteGiftPlayer.Parser, new[]{ "PlayerId", "AtmosRewarded", "Faction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.FactionShowInfo), global::Stardom.FactionShowInfo.Parser, new[]{ "FshowWhice", "StdLevel", "Phase", "PhasePart", "PartStartTime", "PartEndTime", "FshowStartTime", "KnockoutAtoms", "FinalAtoms" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.FactionShowPacInfo), global::Stardom.FactionShowPacInfo.Parser, new[]{ "PlayerId", "Name", "Sign", "GuildId", "GuildName", "Faction", "HeadId", "Profession", "CardId", "FightPower", "Ranking", "TotalRank", "FactionRank", "ChallengeScore", "VoteScore", "TeamId", "DpsPercent", "InspireTimes", "Sex", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PlayerFactionShowInfo), global::Stardom.PlayerFactionShowInfo.Parser, new[]{ "VoteTimes", "GiftTimes", "GiftRecoverTs", "VotePlayers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.VoteGiftInfo), global::Stardom.VoteGiftInfo.Parser, new[]{ "Reciever", "PlayerId", "Name", "Faction", "Grade", "VgScore", "IsJoin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.FShowTeamInfo), global::Stardom.FShowTeamInfo.Parser, new[]{ "Max", "TeamName", "CaptainId", "CaptainHeadId", "Faction", "Teammates", "Score" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.FShowMatchInfo), global::Stardom.FShowMatchInfo.Parser, new[]{ "TeamId", "WinFaction", "Team" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.FinalFactionInfo), global::Stardom.FinalFactionInfo.Parser, new[]{ "Faction", "FactionAdvisor", "FactionPc", "FactionRevives", "RevivableNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PlayerFashionInfo), global::Stardom.PlayerFashionInfo.Parser, new[]{ "HairId", "HairColor", "EyeShapeId", "EyeColorId", "LipstickId", "FaceId", "IsSelect", "AddFans", "Packages", "Warehouse", "PartColor", "DressSchemeId", "SchemeInfos", "BrandInfos", "HairColorTimes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.FashionPartInfo), global::Stardom.FashionPartInfo.Parser, new[]{ "Base", "GotTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.FashionDressPart), global::Stardom.FashionDressPart.Parser, new[]{ "PartType", "FashionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.FashionPartColor), global::Stardom.FashionPartColor.Parser, new[]{ "FashionId", "Color" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.FashionSchemeInfo), global::Stardom.FashionSchemeInfo.Parser, new[]{ "SchemeId", "Name", "IsUnlock", "HairColor", "DressFashionParts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.FashionPackageInfo), global::Stardom.FashionPackageInfo.Parser, new[]{ "FashionPackageId", "IsComplete", "IsUnlock", "HairColor", "CompleteTime", "IsReward" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.FashionWarehouseInfo), global::Stardom.FashionWarehouseInfo.Parser, new[]{ "FashionParts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.FashionBrandInfo), global::Stardom.FashionBrandInfo.Parser, new[]{ "BrandId", "Level", "Score" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.FashionStageChallengeInfo), global::Stardom.FashionStageChallengeInfo.Parser, new[]{ "FashionParts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.FashionAttrScore), global::Stardom.FashionAttrScore.Parser, new[]{ "AttrType", "Score" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PlayerAVWorkShowInfo), global::Stardom.PlayerAVWorkShowInfo.Parser, new[]{ "HallInfo", "EnjoyTimes", "SnackCdTime", "ShareFriendTimes", "ShareWorldTimes", "ShareGuildTimes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.AVWorkShowPlayerHallInfo), global::Stardom.AVWorkShowPlayerHallInfo.Parser, new[]{ "Cid", "Uuid", "WorkId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.AVWorkShowInfo), global::Stardom.AVWorkShowInfo.Parser, new[]{ "BazaarList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.AVWorkShowBazaarInfo), global::Stardom.AVWorkShowBazaarInfo.Parser, new[]{ "WorkType", "GuestId", "PopularStar", "PlanStar", "ShowNum", "Hot", "Rank" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.AVWorkShowHotInfo), global::Stardom.AVWorkShowHotInfo.Parser, new[]{ "WorkType", "Hot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.AVWorkShowHotRecord), global::Stardom.AVWorkShowHotRecord.Parser, new[]{ "Id", "TimeStamp", "Type", "GuestId", "ParamList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.AVWorkShowPlayerInfo), global::Stardom.AVWorkShowPlayerInfo.Parser, new[]{ "PlayerId", "Name", "HeadId", "Sex", "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.AVWorkShowSnackInfo), global::Stardom.AVWorkShowSnackInfo.Parser, new[]{ "ItemBase", "Energy", "ShareTimes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.AVWorkShowRecordInfo), global::Stardom.AVWorkShowRecordInfo.Parser, new[]{ "PlayerInfo", "TimeStamp", "RecordType", "ParamList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.AVWorkShowMessageInfo), global::Stardom.AVWorkShowMessageInfo.Parser, new[]{ "PlayerInfo", "TimeStamp", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.AVWorkShowSnackRecordInfo), global::Stardom.AVWorkShowSnackRecordInfo.Parser, new[]{ "PlayerInfo", "TimeStamp", "RecordType", "ItemList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.AVWorkShowHallBaseInfo), global::Stardom.AVWorkShowHallBaseInfo.Parser, new[]{ "Uuid", "PlayerInfo", "WorkInfo", "IsEnjoy", "Hot", "SnackList", "NpcList", "VisitorList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.AVWorkShowHallRecordInfo), global::Stardom.AVWorkShowHallRecordInfo.Parser, new[]{ "MessageList", "RecordList", "SnackRecordList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.AVWorkShowHotChangeRecord), global::Stardom.AVWorkShowHotChangeRecord.Parser, new[]{ "Id", "WorkType", "DeltaValue", "Value", "TimeStamp", "GuestId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PlayerTeamInfo), global::Stardom.PlayerTeamInfo.Parser, new[]{ "TeamPlayInfo", "HangingLeaderTimes", "PlayTotelTimes", "BuyTimes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TeamPlayInfo), global::Stardom.TeamPlayInfo.Parser, new[]{ "TeamPlayId", "TeamPlayTimes", "TeamPlayResetTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TeamSetting), global::Stardom.TeamSetting.Parser, new[]{ "TeamPlayId", "PremssionType", "LimitLevel", "IsAutoAgree" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TeamMemberInfo), global::Stardom.TeamMemberInfo.Parser, new[]{ "Id", "PlayerId", "Name", "NickName", "Level", "Sex", "HeadId", "FightPower", "PianoLevel", "DrumLevel", "PostId", "IsReady", "IsHangUp", "TitleId", "Fashion", "RoleInfos", "ActiveSkills" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TeamInfo), global::Stardom.TeamInfo.Parser, new[]{ "TeamId", "TeamSetting", "TeamMembers", "WorldInviteCd", "IsSolo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TeamBaseInfo), global::Stardom.TeamBaseInfo.Parser, new[]{ "TeamId", "TeamSetting", "LeaderPlayerId", "LeaderLevel", "LeaderSex", "LeaderHeadId", "LeaderName", "MemberNum", "CreateTime", "MaxPianoLevel", "MaxDrumLevel", "MaxFightPower" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TeamApplyInfo), global::Stardom.TeamApplyInfo.Parser, new[]{ "PlayerId", "Name", "Level", "Sex", "HeadId", "PianoLevel", "DrumLevel", "FightPower" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TeamPlayRoleInfo), global::Stardom.TeamPlayRoleInfo.Parser, new[]{ "Uuid", "IsPlayer", "FightInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TeamPlayEmbattleRoleInfo), global::Stardom.TeamPlayEmbattleRoleInfo.Parser, new[]{ "PlayerId", "Name", "RoleInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TeamPlayBaseInfo), global::Stardom.TeamPlayBaseInfo.Parser, new[]{ "TeamPlayId", "Tacit", "Status", "Timeout" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TeamPlayStageInfo), global::Stardom.TeamPlayStageInfo.Parser, new[]{ "StageId", "Score", "PlayerIds", "Status", "Timeout", "Events", "RapInfo", "PianoInfo", "PianoFollowInfo", "DrumInfo", "MoleInfo", "SingdanceInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TeamPlayRapInfo), global::Stardom.TeamPlayRapInfo.Parser, new[]{ "AnswerId", "MusicWords" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TeamPlayPianoInfo), global::Stardom.TeamPlayPianoInfo.Parser, new[]{ "MelodyId", "HistoryOpt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TeamPlayPianoFollowInfo), global::Stardom.TeamPlayPianoFollowInfo.Parser, new[]{ "Round" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TeamPlayDrumInfo), global::Stardom.TeamPlayDrumInfo.Parser, new[]{ "MelodyId", "HistoryOpt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TeamPlayMoleInfo), global::Stardom.TeamPlayMoleInfo.Parser, new[]{ "MoleGameId", "Moles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TeamPlayMole), global::Stardom.TeamPlayMole.Parser, new[]{ "HoleId", "MonsterId", "EndTime", "BitTimes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TeamPlaySingDanceInfo), global::Stardom.TeamPlaySingDanceInfo.Parser, new[]{ "FightCd", "MusicWords", "PosInfos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TeamPlaySingDancePosInfo), global::Stardom.TeamPlaySingDancePosInfo.Parser, new[]{ "PosId", "MonsterId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TeamPlayEventInfo), global::Stardom.TeamPlayEventInfo.Parser, new[]{ "Id", "EventId", "Players" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TeamPlayEventPlayerTarget), global::Stardom.TeamPlayEventPlayerTarget.Parser, new[]{ "PlayerId", "Key", "EndTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TeamPlayEventDesc), global::Stardom.TeamPlayEventDesc.Parser, new[]{ "EventId", "KeyParams" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TeamPlayMusicWordInfo), global::Stardom.TeamPlayMusicWordInfo.Parser, new[]{ "Type", "Music", "EventMusic" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TeamPlayMusic), global::Stardom.TeamPlayMusic.Parser, new[]{ "Name", "MusicWordId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TeamPlayEventMusic), global::Stardom.TeamPlayEventMusic.Parser, new[]{ "EventId", "KeyParams" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TeamPlayRobotInfo), global::Stardom.TeamPlayRobotInfo.Parser, new[]{ "Id", "PosX", "PosY" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TeamPlayMemberDps), global::Stardom.TeamPlayMemberDps.Parser, new[]{ "PlayerId", "Name", "HeadId", "Sex", "Dps" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TeamPlayDpsInfo), global::Stardom.TeamPlayDpsInfo.Parser, new[]{ "PosId", "MemberDps" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PlayerTrainToolInfo), global::Stardom.PlayerTrainToolInfo.Parser, new[]{ "ArdentValue", "AssistTimes", "PlotedTraintools", "FriendTimes", "TraintoolInfos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TrainToolFriendTimes), global::Stardom.TrainToolFriendTimes.Parser, new[]{ "PlayerId", "Times" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TrainToolInfo), global::Stardom.TrainToolInfo.Parser, new[]{ "TraintoolId", "CurLayer", "ContinueFailures", "ChallengeCd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TrainToolAssistInfo), global::Stardom.TrainToolAssistInfo.Parser, new[]{ "CardInfo", "AssistRecords" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TrainToolAssistRecord), global::Stardom.TrainToolAssistRecord.Parser, new[]{ "PlayerId", "Name", "Level", "HeadId", "Sex", "Timestamp", "CardId", "TraintoolId", "Layer", "IsSuc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TrainToolFriendAssistInfo), global::Stardom.TrainToolFriendAssistInfo.Parser, new[]{ "PlayerId", "Name", "CardInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.PlayerTitleInfo), global::Stardom.PlayerTitleInfo.Parser, new[]{ "Titles", "UseTitleId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stardom.TitleInfo), global::Stardom.TitleInfo.Parser, new[]{ "Base" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  //////////////////////////////////////////////////////////////////////////////////
  /// 战斗2.0
  /// 指令信息
  /// </summary>
  public enum OrderType {
    /// <summary>
    /// 未知
    /// </summary>
    [pbr::OriginalName("OT_UNKNOWN")] OtUnknown = 0,
    /// <summary>
    /// 战斗开始
    /// </summary>
    [pbr::OriginalName("OT_BATTLE_BEGIN")] OtBattleBegin = 1,
    /// <summary>
    /// 战斗结束
    /// </summary>
    [pbr::OriginalName("OT_BATTLE_END")] OtBattleEnd = 2,
    /// <summary>
    /// 战斗开始
    /// </summary>
    [pbr::OriginalName("OT_ROUND_BEGIN")] OtRoundBegin = 3,
    /// <summary>
    /// 战斗结束
    /// </summary>
    [pbr::OriginalName("OT_ROUND_END")] OtRoundEnd = 4,
    /// <summary>
    /// 角色技能
    /// </summary>
    [pbr::OriginalName("OT_SKILL_ACTION")] OtSkillAction = 5,
    /// <summary>
    /// 主动技能
    /// </summary>
    [pbr::OriginalName("OT_ACTIVE_ACTION")] OtActiveAction = 6,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 世界信息
  /// </summary>
  public sealed partial class WorldInfo : pb::IMessage<WorldInfo> {
    private static readonly pb::MessageParser<WorldInfo> _parser = new pb::MessageParser<WorldInfo>(() => new WorldInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorldInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldInfo(WorldInfo other) : this() {
      dailyResetTs_ = other.dailyResetTs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldInfo Clone() {
      return new WorldInfo(this);
    }

    /// <summary>Field number for the "daily_reset_ts" field.</summary>
    public const int DailyResetTsFieldNumber = 1;
    private ulong dailyResetTs_;
    /// <summary>
    /// 日重置时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DailyResetTs {
      get { return dailyResetTs_; }
      set {
        dailyResetTs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorldInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorldInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DailyResetTs != other.DailyResetTs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DailyResetTs != 0UL) hash ^= DailyResetTs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DailyResetTs != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(DailyResetTs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DailyResetTs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DailyResetTs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorldInfo other) {
      if (other == null) {
        return;
      }
      if (other.DailyResetTs != 0UL) {
        DailyResetTs = other.DailyResetTs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DailyResetTs = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 个人信息
  /// </summary>
  public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo(PlayerInfo other) : this() {
      OpenInfo = other.openInfo_ != null ? other.OpenInfo.Clone() : null;
      initId_ = other.initId_;
      createTime_ = other.createTime_;
      loginTime_ = other.loginTime_;
      logoutTime_ = other.logoutTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo Clone() {
      return new PlayerInfo(this);
    }

    /// <summary>Field number for the "open_info" field.</summary>
    public const int OpenInfoFieldNumber = 1;
    private global::Stardom.PlayerOpenInfo openInfo_;
    /// <summary>
    /// 公开信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.PlayerOpenInfo OpenInfo {
      get { return openInfo_; }
      set {
        openInfo_ = value;
      }
    }

    /// <summary>Field number for the "init_id" field.</summary>
    public const int InitIdFieldNumber = 10;
    private int initId_;
    /// <summary>
    /// 初始化id(玩家选择的初始id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InitId {
      get { return initId_; }
      set {
        initId_ = value;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 11;
    private ulong createTime_;
    /// <summary>
    /// 创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "login_time" field.</summary>
    public const int LoginTimeFieldNumber = 13;
    private ulong loginTime_;
    /// <summary>
    /// 登入时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LoginTime {
      get { return loginTime_; }
      set {
        loginTime_ = value;
      }
    }

    /// <summary>Field number for the "logout_time" field.</summary>
    public const int LogoutTimeFieldNumber = 14;
    private ulong logoutTime_;
    /// <summary>
    /// 登出时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LogoutTime {
      get { return logoutTime_; }
      set {
        logoutTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OpenInfo, other.OpenInfo)) return false;
      if (InitId != other.InitId) return false;
      if (CreateTime != other.CreateTime) return false;
      if (LoginTime != other.LoginTime) return false;
      if (LogoutTime != other.LogoutTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (openInfo_ != null) hash ^= OpenInfo.GetHashCode();
      if (InitId != 0) hash ^= InitId.GetHashCode();
      if (CreateTime != 0UL) hash ^= CreateTime.GetHashCode();
      if (LoginTime != 0UL) hash ^= LoginTime.GetHashCode();
      if (LogoutTime != 0UL) hash ^= LogoutTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (openInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OpenInfo);
      }
      if (InitId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(InitId);
      }
      if (CreateTime != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(CreateTime);
      }
      if (LoginTime != 0UL) {
        output.WriteRawTag(104);
        output.WriteUInt64(LoginTime);
      }
      if (LogoutTime != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(LogoutTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (openInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OpenInfo);
      }
      if (InitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InitId);
      }
      if (CreateTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreateTime);
      }
      if (LoginTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LoginTime);
      }
      if (LogoutTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LogoutTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.openInfo_ != null) {
        if (openInfo_ == null) {
          openInfo_ = new global::Stardom.PlayerOpenInfo();
        }
        OpenInfo.MergeFrom(other.OpenInfo);
      }
      if (other.InitId != 0) {
        InitId = other.InitId;
      }
      if (other.CreateTime != 0UL) {
        CreateTime = other.CreateTime;
      }
      if (other.LoginTime != 0UL) {
        LoginTime = other.LoginTime;
      }
      if (other.LogoutTime != 0UL) {
        LogoutTime = other.LogoutTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (openInfo_ == null) {
              openInfo_ = new global::Stardom.PlayerOpenInfo();
            }
            input.ReadMessage(openInfo_);
            break;
          }
          case 80: {
            InitId = input.ReadInt32();
            break;
          }
          case 88: {
            CreateTime = input.ReadUInt64();
            break;
          }
          case 104: {
            LoginTime = input.ReadUInt64();
            break;
          }
          case 112: {
            LogoutTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 公有信息
  /// </summary>
  public sealed partial class PlayerOpenInfo : pb::IMessage<PlayerOpenInfo> {
    private static readonly pb::MessageParser<PlayerOpenInfo> _parser = new pb::MessageParser<PlayerOpenInfo>(() => new PlayerOpenInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerOpenInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerOpenInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerOpenInfo(PlayerOpenInfo other) : this() {
      playerId_ = other.playerId_;
      name_ = other.name_;
      nickname_ = other.nickname_;
      systemHeadId_ = other.systemHeadId_;
      headEdgeId_ = other.headEdgeId_;
      faction_ = other.faction_;
      vipLevel_ = other.vipLevel_;
      vipExp_ = other.vipExp_;
      grade_ = other.grade_;
      specialGrade_ = other.specialGrade_;
      fightPower_ = other.fightPower_;
      cpZoneId_ = other.cpZoneId_;
      onlineTime_ = other.onlineTime_;
      nameModifyTimes_ = other.nameModifyTimes_;
      nicknameModifyTimes_ = other.nicknameModifyTimes_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerOpenInfo Clone() {
      return new PlayerOpenInfo(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 3;
    private string nickname_ = "";
    /// <summary>
    /// 昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "system_head_id" field.</summary>
    public const int SystemHeadIdFieldNumber = 4;
    private int systemHeadId_;
    /// <summary>
    /// 系统头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SystemHeadId {
      get { return systemHeadId_; }
      set {
        systemHeadId_ = value;
      }
    }

    /// <summary>Field number for the "head_edge_id" field.</summary>
    public const int HeadEdgeIdFieldNumber = 5;
    private int headEdgeId_;
    /// <summary>
    /// 头像边框
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadEdgeId {
      get { return headEdgeId_; }
      set {
        headEdgeId_ = value;
      }
    }

    /// <summary>Field number for the "faction" field.</summary>
    public const int FactionFieldNumber = 6;
    private int faction_;
    /// <summary>
    /// 势力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Faction {
      get { return faction_; }
      set {
        faction_ = value;
      }
    }

    /// <summary>Field number for the "vip_level" field.</summary>
    public const int VipLevelFieldNumber = 7;
    private int vipLevel_;
    /// <summary>
    /// vip
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VipLevel {
      get { return vipLevel_; }
      set {
        vipLevel_ = value;
      }
    }

    /// <summary>Field number for the "vip_exp" field.</summary>
    public const int VipExpFieldNumber = 8;
    private int vipExp_;
    /// <summary>
    /// vip经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VipExp {
      get { return vipExp_; }
      set {
        vipExp_ = value;
      }
    }

    /// <summary>Field number for the "grade" field.</summary>
    public const int GradeFieldNumber = 9;
    private int grade_;
    /// <summary>
    /// 咖位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Grade {
      get { return grade_; }
      set {
        grade_ = value;
      }
    }

    /// <summary>Field number for the "special_grade" field.</summary>
    public const int SpecialGradeFieldNumber = 10;
    private int specialGrade_;
    /// <summary>
    /// 子咖位(二期)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpecialGrade {
      get { return specialGrade_; }
      set {
        specialGrade_ = value;
      }
    }

    /// <summary>Field number for the "fight_power" field.</summary>
    public const int FightPowerFieldNumber = 11;
    private int fightPower_;
    /// <summary>
    /// 战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FightPower {
      get { return fightPower_; }
      set {
        fightPower_ = value;
      }
    }

    /// <summary>Field number for the "cp_zone_id" field.</summary>
    public const int CpZoneIdFieldNumber = 12;
    private int cpZoneId_;
    /// <summary>
    /// 亲密空间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CpZoneId {
      get { return cpZoneId_; }
      set {
        cpZoneId_ = value;
      }
    }

    /// <summary>Field number for the "online_time" field.</summary>
    public const int OnlineTimeFieldNumber = 14;
    private int onlineTime_;
    /// <summary>
    /// 累计在线
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OnlineTime {
      get { return onlineTime_; }
      set {
        onlineTime_ = value;
      }
    }

    /// <summary>Field number for the "name_modify_times" field.</summary>
    public const int NameModifyTimesFieldNumber = 15;
    private int nameModifyTimes_;
    /// <summary>
    /// 名字修改次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NameModifyTimes {
      get { return nameModifyTimes_; }
      set {
        nameModifyTimes_ = value;
      }
    }

    /// <summary>Field number for the "nickname_modify_times" field.</summary>
    public const int NicknameModifyTimesFieldNumber = 16;
    private int nicknameModifyTimes_;
    /// <summary>
    /// 昵称修改次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NicknameModifyTimes {
      get { return nicknameModifyTimes_; }
      set {
        nicknameModifyTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerOpenInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerOpenInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Name != other.Name) return false;
      if (Nickname != other.Nickname) return false;
      if (SystemHeadId != other.SystemHeadId) return false;
      if (HeadEdgeId != other.HeadEdgeId) return false;
      if (Faction != other.Faction) return false;
      if (VipLevel != other.VipLevel) return false;
      if (VipExp != other.VipExp) return false;
      if (Grade != other.Grade) return false;
      if (SpecialGrade != other.SpecialGrade) return false;
      if (FightPower != other.FightPower) return false;
      if (CpZoneId != other.CpZoneId) return false;
      if (OnlineTime != other.OnlineTime) return false;
      if (NameModifyTimes != other.NameModifyTimes) return false;
      if (NicknameModifyTimes != other.NicknameModifyTimes) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (SystemHeadId != 0) hash ^= SystemHeadId.GetHashCode();
      if (HeadEdgeId != 0) hash ^= HeadEdgeId.GetHashCode();
      if (Faction != 0) hash ^= Faction.GetHashCode();
      if (VipLevel != 0) hash ^= VipLevel.GetHashCode();
      if (VipExp != 0) hash ^= VipExp.GetHashCode();
      if (Grade != 0) hash ^= Grade.GetHashCode();
      if (SpecialGrade != 0) hash ^= SpecialGrade.GetHashCode();
      if (FightPower != 0) hash ^= FightPower.GetHashCode();
      if (CpZoneId != 0) hash ^= CpZoneId.GetHashCode();
      if (OnlineTime != 0) hash ^= OnlineTime.GetHashCode();
      if (NameModifyTimes != 0) hash ^= NameModifyTimes.GetHashCode();
      if (NicknameModifyTimes != 0) hash ^= NicknameModifyTimes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Nickname);
      }
      if (SystemHeadId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SystemHeadId);
      }
      if (HeadEdgeId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HeadEdgeId);
      }
      if (Faction != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Faction);
      }
      if (VipLevel != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(VipLevel);
      }
      if (VipExp != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(VipExp);
      }
      if (Grade != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Grade);
      }
      if (SpecialGrade != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(SpecialGrade);
      }
      if (FightPower != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FightPower);
      }
      if (CpZoneId != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(CpZoneId);
      }
      if (OnlineTime != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(OnlineTime);
      }
      if (NameModifyTimes != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(NameModifyTimes);
      }
      if (NicknameModifyTimes != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(NicknameModifyTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (SystemHeadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SystemHeadId);
      }
      if (HeadEdgeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadEdgeId);
      }
      if (Faction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Faction);
      }
      if (VipLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VipLevel);
      }
      if (VipExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VipExp);
      }
      if (Grade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Grade);
      }
      if (SpecialGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpecialGrade);
      }
      if (FightPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FightPower);
      }
      if (CpZoneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CpZoneId);
      }
      if (OnlineTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OnlineTime);
      }
      if (NameModifyTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NameModifyTimes);
      }
      if (NicknameModifyTimes != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NicknameModifyTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerOpenInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.SystemHeadId != 0) {
        SystemHeadId = other.SystemHeadId;
      }
      if (other.HeadEdgeId != 0) {
        HeadEdgeId = other.HeadEdgeId;
      }
      if (other.Faction != 0) {
        Faction = other.Faction;
      }
      if (other.VipLevel != 0) {
        VipLevel = other.VipLevel;
      }
      if (other.VipExp != 0) {
        VipExp = other.VipExp;
      }
      if (other.Grade != 0) {
        Grade = other.Grade;
      }
      if (other.SpecialGrade != 0) {
        SpecialGrade = other.SpecialGrade;
      }
      if (other.FightPower != 0) {
        FightPower = other.FightPower;
      }
      if (other.CpZoneId != 0) {
        CpZoneId = other.CpZoneId;
      }
      if (other.OnlineTime != 0) {
        OnlineTime = other.OnlineTime;
      }
      if (other.NameModifyTimes != 0) {
        NameModifyTimes = other.NameModifyTimes;
      }
      if (other.NicknameModifyTimes != 0) {
        NicknameModifyTimes = other.NicknameModifyTimes;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Nickname = input.ReadString();
            break;
          }
          case 32: {
            SystemHeadId = input.ReadInt32();
            break;
          }
          case 40: {
            HeadEdgeId = input.ReadInt32();
            break;
          }
          case 48: {
            Faction = input.ReadInt32();
            break;
          }
          case 56: {
            VipLevel = input.ReadInt32();
            break;
          }
          case 64: {
            VipExp = input.ReadInt32();
            break;
          }
          case 72: {
            Grade = input.ReadInt32();
            break;
          }
          case 80: {
            SpecialGrade = input.ReadInt32();
            break;
          }
          case 88: {
            FightPower = input.ReadInt32();
            break;
          }
          case 96: {
            CpZoneId = input.ReadInt32();
            break;
          }
          case 112: {
            OnlineTime = input.ReadInt32();
            break;
          }
          case 120: {
            NameModifyTimes = input.ReadInt32();
            break;
          }
          case 128: {
            NicknameModifyTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 同步信息
  /// </summary>
  public sealed partial class PlayerSynInfo : pb::IMessage<PlayerSynInfo> {
    private static readonly pb::MessageParser<PlayerSynInfo> _parser = new pb::MessageParser<PlayerSynInfo>(() => new PlayerSynInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerSynInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSynInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSynInfo(PlayerSynInfo other) : this() {
      synType_ = other.synType_;
      synIVal_ = other.synIVal_;
      synLVal_ = other.synLVal_;
      synSVal_ = other.synSVal_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSynInfo Clone() {
      return new PlayerSynInfo(this);
    }

    /// <summary>Field number for the "syn_type" field.</summary>
    public const int SynTypeFieldNumber = 1;
    private int synType_;
    /// <summary>
    /// 同步类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SynType {
      get { return synType_; }
      set {
        synType_ = value;
      }
    }

    /// <summary>Field number for the "syn_i_val" field.</summary>
    public const int SynIValFieldNumber = 2;
    private int synIVal_;
    /// <summary>
    /// int32值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SynIVal {
      get { return synIVal_; }
      set {
        synIVal_ = value;
      }
    }

    /// <summary>Field number for the "syn_l_val" field.</summary>
    public const int SynLValFieldNumber = 3;
    private ulong synLVal_;
    /// <summary>
    /// uint64值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SynLVal {
      get { return synLVal_; }
      set {
        synLVal_ = value;
      }
    }

    /// <summary>Field number for the "syn_s_val" field.</summary>
    public const int SynSValFieldNumber = 4;
    private string synSVal_ = "";
    /// <summary>
    /// string值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SynSVal {
      get { return synSVal_; }
      set {
        synSVal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerSynInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerSynInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SynType != other.SynType) return false;
      if (SynIVal != other.SynIVal) return false;
      if (SynLVal != other.SynLVal) return false;
      if (SynSVal != other.SynSVal) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SynType != 0) hash ^= SynType.GetHashCode();
      if (SynIVal != 0) hash ^= SynIVal.GetHashCode();
      if (SynLVal != 0UL) hash ^= SynLVal.GetHashCode();
      if (SynSVal.Length != 0) hash ^= SynSVal.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SynType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SynType);
      }
      if (SynIVal != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SynIVal);
      }
      if (SynLVal != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(SynLVal);
      }
      if (SynSVal.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SynSVal);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SynType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SynType);
      }
      if (SynIVal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SynIVal);
      }
      if (SynLVal != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SynLVal);
      }
      if (SynSVal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SynSVal);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerSynInfo other) {
      if (other == null) {
        return;
      }
      if (other.SynType != 0) {
        SynType = other.SynType;
      }
      if (other.SynIVal != 0) {
        SynIVal = other.SynIVal;
      }
      if (other.SynLVal != 0UL) {
        SynLVal = other.SynLVal;
      }
      if (other.SynSVal.Length != 0) {
        SynSVal = other.SynSVal;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SynType = input.ReadInt32();
            break;
          }
          case 16: {
            SynIVal = input.ReadInt32();
            break;
          }
          case 24: {
            SynLVal = input.ReadUInt64();
            break;
          }
          case 34: {
            SynSVal = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家离线信息
  /// </summary>
  public sealed partial class PlayerCache : pb::IMessage<PlayerCache> {
    private static readonly pb::MessageParser<PlayerCache> _parser = new pb::MessageParser<PlayerCache>(() => new PlayerCache());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerCache> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCache() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCache(PlayerCache other) : this() {
      OpenInfo = other.openInfo_ != null ? other.OpenInfo.Clone() : null;
      level_ = other.level_;
      sex_ = other.sex_;
      guildId_ = other.guildId_;
      guildName_ = other.guildName_;
      fans_ = other.fans_;
      sign_ = other.sign_;
      teamId_ = other.teamId_;
      titleId_ = other.titleId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCache Clone() {
      return new PlayerCache(this);
    }

    /// <summary>Field number for the "open_info" field.</summary>
    public const int OpenInfoFieldNumber = 1;
    private global::Stardom.PlayerOpenInfo openInfo_;
    /// <summary>
    /// 角色信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.PlayerOpenInfo OpenInfo {
      get { return openInfo_; }
      set {
        openInfo_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    /// <summary>
    /// 玩家等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 3;
    private int sex_;
    /// <summary>
    /// 性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "guild_id" field.</summary>
    public const int GuildIdFieldNumber = 4;
    private ulong guildId_;
    /// <summary>
    /// 协会id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "guild_name" field.</summary>
    public const int GuildNameFieldNumber = 5;
    private string guildName_ = "";
    /// <summary>
    /// 协会名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fans" field.</summary>
    public const int FansFieldNumber = 6;
    private int fans_;
    /// <summary>
    /// 粉丝数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Fans {
      get { return fans_; }
      set {
        fans_ = value;
      }
    }

    /// <summary>Field number for the "sign" field.</summary>
    public const int SignFieldNumber = 7;
    private string sign_ = "";
    /// <summary>
    /// 个性签名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sign {
      get { return sign_; }
      set {
        sign_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 8;
    private ulong teamId_;
    /// <summary>
    /// 队伍id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "title_id" field.</summary>
    public const int TitleIdFieldNumber = 9;
    private int titleId_;
    /// <summary>
    /// 称号id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TitleId {
      get { return titleId_; }
      set {
        titleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerCache);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerCache other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OpenInfo, other.OpenInfo)) return false;
      if (Level != other.Level) return false;
      if (Sex != other.Sex) return false;
      if (GuildId != other.GuildId) return false;
      if (GuildName != other.GuildName) return false;
      if (Fans != other.Fans) return false;
      if (Sign != other.Sign) return false;
      if (TeamId != other.TeamId) return false;
      if (TitleId != other.TitleId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (openInfo_ != null) hash ^= OpenInfo.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Sex != 0) hash ^= Sex.GetHashCode();
      if (GuildId != 0UL) hash ^= GuildId.GetHashCode();
      if (GuildName.Length != 0) hash ^= GuildName.GetHashCode();
      if (Fans != 0) hash ^= Fans.GetHashCode();
      if (Sign.Length != 0) hash ^= Sign.GetHashCode();
      if (TeamId != 0UL) hash ^= TeamId.GetHashCode();
      if (TitleId != 0) hash ^= TitleId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (openInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OpenInfo);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (Sex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Sex);
      }
      if (GuildId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(GuildId);
      }
      if (GuildName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(GuildName);
      }
      if (Fans != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Fans);
      }
      if (Sign.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Sign);
      }
      if (TeamId != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(TeamId);
      }
      if (TitleId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(TitleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (openInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OpenInfo);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GuildName);
      }
      if (Fans != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Fans);
      }
      if (Sign.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sign);
      }
      if (TeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamId);
      }
      if (TitleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TitleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerCache other) {
      if (other == null) {
        return;
      }
      if (other.openInfo_ != null) {
        if (openInfo_ == null) {
          openInfo_ = new global::Stardom.PlayerOpenInfo();
        }
        OpenInfo.MergeFrom(other.OpenInfo);
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Sex != 0) {
        Sex = other.Sex;
      }
      if (other.GuildId != 0UL) {
        GuildId = other.GuildId;
      }
      if (other.GuildName.Length != 0) {
        GuildName = other.GuildName;
      }
      if (other.Fans != 0) {
        Fans = other.Fans;
      }
      if (other.Sign.Length != 0) {
        Sign = other.Sign;
      }
      if (other.TeamId != 0UL) {
        TeamId = other.TeamId;
      }
      if (other.TitleId != 0) {
        TitleId = other.TitleId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (openInfo_ == null) {
              openInfo_ = new global::Stardom.PlayerOpenInfo();
            }
            input.ReadMessage(openInfo_);
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 24: {
            Sex = input.ReadInt32();
            break;
          }
          case 32: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 42: {
            GuildName = input.ReadString();
            break;
          }
          case 48: {
            Fans = input.ReadInt32();
            break;
          }
          case 58: {
            Sign = input.ReadString();
            break;
          }
          case 64: {
            TeamId = input.ReadUInt64();
            break;
          }
          case 72: {
            TitleId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家离线卡牌数据
  /// </summary>
  public sealed partial class PlayerRoleCache : pb::IMessage<PlayerRoleCache> {
    private static readonly pb::MessageParser<PlayerRoleCache> _parser = new pb::MessageParser<PlayerRoleCache>(() => new PlayerRoleCache());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerRoleCache> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRoleCache() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRoleCache(PlayerRoleCache other) : this() {
      playerId_ = other.playerId_;
      roleCount_ = other.roleCount_;
      rolePos_ = other.rolePos_.Clone();
      roles_ = other.roles_.Clone();
      equips_ = other.equips_.Clone();
      roleAttrs_ = other.roleAttrs_.Clone();
      Embattle = other.embattle_ != null ? other.Embattle.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRoleCache Clone() {
      return new PlayerRoleCache(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "role_count" field.</summary>
    public const int RoleCountFieldNumber = 2;
    private int roleCount_;
    /// <summary>
    /// 拥有角色数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleCount {
      get { return roleCount_; }
      set {
        roleCount_ = value;
      }
    }

    /// <summary>Field number for the "role_pos" field.</summary>
    public const int RolePosFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Stardom.RolePosInfo> _repeated_rolePos_codec
        = pb::FieldCodec.ForMessage(26, global::Stardom.RolePosInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.RolePosInfo> rolePos_ = new pbc::RepeatedField<global::Stardom.RolePosInfo>();
    /// <summary>
    /// 角色位信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.RolePosInfo> RolePos {
      get { return rolePos_; }
    }

    /// <summary>Field number for the "roles" field.</summary>
    public const int RolesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Stardom.RoleInfo> _repeated_roles_codec
        = pb::FieldCodec.ForMessage(34, global::Stardom.RoleInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.RoleInfo> roles_ = new pbc::RepeatedField<global::Stardom.RoleInfo>();
    /// <summary>
    /// 上阵角色信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.RoleInfo> Roles {
      get { return roles_; }
    }

    /// <summary>Field number for the "equips" field.</summary>
    public const int EquipsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Stardom.EquipInfo> _repeated_equips_codec
        = pb::FieldCodec.ForMessage(42, global::Stardom.EquipInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.EquipInfo> equips_ = new pbc::RepeatedField<global::Stardom.EquipInfo>();
    /// <summary>
    /// 装备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.EquipInfo> Equips {
      get { return equips_; }
    }

    /// <summary>Field number for the "role_attrs" field.</summary>
    public const int RoleAttrsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Stardom.RoleAttrInfo> _repeated_roleAttrs_codec
        = pb::FieldCodec.ForMessage(50, global::Stardom.RoleAttrInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.RoleAttrInfo> roleAttrs_ = new pbc::RepeatedField<global::Stardom.RoleAttrInfo>();
    /// <summary>
    /// 角色属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.RoleAttrInfo> RoleAttrs {
      get { return roleAttrs_; }
    }

    /// <summary>Field number for the "embattle" field.</summary>
    public const int EmbattleFieldNumber = 7;
    private global::Stardom.RoleEmbattleInfo embattle_;
    /// <summary>
    /// 布阵信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.RoleEmbattleInfo Embattle {
      get { return embattle_; }
      set {
        embattle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerRoleCache);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerRoleCache other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (RoleCount != other.RoleCount) return false;
      if(!rolePos_.Equals(other.rolePos_)) return false;
      if(!roles_.Equals(other.roles_)) return false;
      if(!equips_.Equals(other.equips_)) return false;
      if(!roleAttrs_.Equals(other.roleAttrs_)) return false;
      if (!object.Equals(Embattle, other.Embattle)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (RoleCount != 0) hash ^= RoleCount.GetHashCode();
      hash ^= rolePos_.GetHashCode();
      hash ^= roles_.GetHashCode();
      hash ^= equips_.GetHashCode();
      hash ^= roleAttrs_.GetHashCode();
      if (embattle_ != null) hash ^= Embattle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (RoleCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoleCount);
      }
      rolePos_.WriteTo(output, _repeated_rolePos_codec);
      roles_.WriteTo(output, _repeated_roles_codec);
      equips_.WriteTo(output, _repeated_equips_codec);
      roleAttrs_.WriteTo(output, _repeated_roleAttrs_codec);
      if (embattle_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Embattle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (RoleCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleCount);
      }
      size += rolePos_.CalculateSize(_repeated_rolePos_codec);
      size += roles_.CalculateSize(_repeated_roles_codec);
      size += equips_.CalculateSize(_repeated_equips_codec);
      size += roleAttrs_.CalculateSize(_repeated_roleAttrs_codec);
      if (embattle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Embattle);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerRoleCache other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.RoleCount != 0) {
        RoleCount = other.RoleCount;
      }
      rolePos_.Add(other.rolePos_);
      roles_.Add(other.roles_);
      equips_.Add(other.equips_);
      roleAttrs_.Add(other.roleAttrs_);
      if (other.embattle_ != null) {
        if (embattle_ == null) {
          embattle_ = new global::Stardom.RoleEmbattleInfo();
        }
        Embattle.MergeFrom(other.Embattle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 16: {
            RoleCount = input.ReadInt32();
            break;
          }
          case 26: {
            rolePos_.AddEntriesFrom(input, _repeated_rolePos_codec);
            break;
          }
          case 34: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
          case 42: {
            equips_.AddEntriesFrom(input, _repeated_equips_codec);
            break;
          }
          case 50: {
            roleAttrs_.AddEntriesFrom(input, _repeated_roleAttrs_codec);
            break;
          }
          case 58: {
            if (embattle_ == null) {
              embattle_ = new global::Stardom.RoleEmbattleInfo();
            }
            input.ReadMessage(embattle_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家离线作品数据 
  /// </summary>
  public sealed partial class PlayerAVWorksCache : pb::IMessage<PlayerAVWorksCache> {
    private static readonly pb::MessageParser<PlayerAVWorksCache> _parser = new pb::MessageParser<PlayerAVWorksCache>(() => new PlayerAVWorksCache());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerAVWorksCache> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAVWorksCache() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAVWorksCache(PlayerAVWorksCache other) : this() {
      playerId_ = other.playerId_;
      works_ = other.works_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAVWorksCache Clone() {
      return new PlayerAVWorksCache(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "works" field.</summary>
    public const int WorksFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Stardom.AVWorkInfo> _repeated_works_codec
        = pb::FieldCodec.ForMessage(18, global::Stardom.AVWorkInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.AVWorkInfo> works_ = new pbc::RepeatedField<global::Stardom.AVWorkInfo>();
    /// <summary>
    /// 影音作品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.AVWorkInfo> Works {
      get { return works_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerAVWorksCache);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerAVWorksCache other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if(!works_.Equals(other.works_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      hash ^= works_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      works_.WriteTo(output, _repeated_works_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      size += works_.CalculateSize(_repeated_works_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerAVWorksCache other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      works_.Add(other.works_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 18: {
            works_.AddEntriesFrom(input, _repeated_works_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家公共信息 
  /// </summary>
  public sealed partial class PlayerCommonInfo : pb::IMessage<PlayerCommonInfo> {
    private static readonly pb::MessageParser<PlayerCommonInfo> _parser = new pb::MessageParser<PlayerCommonInfo>(() => new PlayerCommonInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerCommonInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCommonInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCommonInfo(PlayerCommonInfo other) : this() {
      propCap_ = other.propCap_;
      equipCap_ = other.equipCap_;
      dayResetTime_ = other.dayResetTime_;
      weekResetTime_ = other.weekResetTime_;
      globalMailIds_ = other.globalMailIds_.Clone();
      gradeArenaReward_ = other.gradeArenaReward_;
      gradeArenaTimes_ = other.gradeArenaTimes_;
      gradeArenaBuyTimes_ = other.gradeArenaBuyTimes_;
      achieveGrades_ = other.achieveGrades_.Clone();
      renameTime_ = other.renameTime_;
      renameNicknameTime_ = other.renameNicknameTime_;
      rewardedGiftCode_ = other.rewardedGiftCode_.Clone();
      morningResetTime_ = other.morningResetTime_;
      monthResetTime_ = other.monthResetTime_;
      isPhoneSign_ = other.isPhoneSign_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCommonInfo Clone() {
      return new PlayerCommonInfo(this);
    }

    /// <summary>Field number for the "prop_cap" field.</summary>
    public const int PropCapFieldNumber = 1;
    private int propCap_;
    /// <summary>
    /// 道具容量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropCap {
      get { return propCap_; }
      set {
        propCap_ = value;
      }
    }

    /// <summary>Field number for the "equip_cap" field.</summary>
    public const int EquipCapFieldNumber = 2;
    private int equipCap_;
    /// <summary>
    /// 装备容量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EquipCap {
      get { return equipCap_; }
      set {
        equipCap_ = value;
      }
    }

    /// <summary>Field number for the "day_reset_time" field.</summary>
    public const int DayResetTimeFieldNumber = 3;
    private ulong dayResetTime_;
    /// <summary>
    /// 日重置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DayResetTime {
      get { return dayResetTime_; }
      set {
        dayResetTime_ = value;
      }
    }

    /// <summary>Field number for the "week_reset_time" field.</summary>
    public const int WeekResetTimeFieldNumber = 4;
    private ulong weekResetTime_;
    /// <summary>
    /// 周重置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong WeekResetTime {
      get { return weekResetTime_; }
      set {
        weekResetTime_ = value;
      }
    }

    /// <summary>Field number for the "global_mail_ids" field.</summary>
    public const int GlobalMailIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<ulong> _repeated_globalMailIds_codec
        = pb::FieldCodec.ForUInt64(42);
    private readonly pbc::RepeatedField<ulong> globalMailIds_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// 已领取的全局邮件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> GlobalMailIds {
      get { return globalMailIds_; }
    }

    /// <summary>Field number for the "grade_arena_reward" field.</summary>
    public const int GradeArenaRewardFieldNumber = 6;
    private int gradeArenaReward_;
    /// <summary>
    /// 领取咖位竞技场奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GradeArenaReward {
      get { return gradeArenaReward_; }
      set {
        gradeArenaReward_ = value;
      }
    }

    /// <summary>Field number for the "grade_arena_times" field.</summary>
    public const int GradeArenaTimesFieldNumber = 7;
    private int gradeArenaTimes_;
    /// <summary>
    /// 竞技场挑战次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GradeArenaTimes {
      get { return gradeArenaTimes_; }
      set {
        gradeArenaTimes_ = value;
      }
    }

    /// <summary>Field number for the "grade_arena_buy_times" field.</summary>
    public const int GradeArenaBuyTimesFieldNumber = 8;
    private int gradeArenaBuyTimes_;
    /// <summary>
    /// 竞技场购买次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GradeArenaBuyTimes {
      get { return gradeArenaBuyTimes_; }
      set {
        gradeArenaBuyTimes_ = value;
      }
    }

    /// <summary>Field number for the "achieve_grades" field.</summary>
    public const int AchieveGradesFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_achieveGrades_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> achieveGrades_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 已领取成就奖励的咖位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AchieveGrades {
      get { return achieveGrades_; }
    }

    /// <summary>Field number for the "rename_time" field.</summary>
    public const int RenameTimeFieldNumber = 10;
    private ulong renameTime_;
    /// <summary>
    /// 重命名时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RenameTime {
      get { return renameTime_; }
      set {
        renameTime_ = value;
      }
    }

    /// <summary>Field number for the "rename_nickname_time" field.</summary>
    public const int RenameNicknameTimeFieldNumber = 11;
    private ulong renameNicknameTime_;
    /// <summary>
    /// 重命名昵称时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RenameNicknameTime {
      get { return renameNicknameTime_; }
      set {
        renameNicknameTime_ = value;
      }
    }

    /// <summary>Field number for the "rewarded_gift_code" field.</summary>
    public const int RewardedGiftCodeFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _repeated_rewardedGiftCode_codec
        = pb::FieldCodec.ForString(98);
    private readonly pbc::RepeatedField<string> rewardedGiftCode_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 已领取礼包码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RewardedGiftCode {
      get { return rewardedGiftCode_; }
    }

    /// <summary>Field number for the "morning_reset_time" field.</summary>
    public const int MorningResetTimeFieldNumber = 13;
    private ulong morningResetTime_;
    /// <summary>
    /// 凌晨重置时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MorningResetTime {
      get { return morningResetTime_; }
      set {
        morningResetTime_ = value;
      }
    }

    /// <summary>Field number for the "month_reset_time" field.</summary>
    public const int MonthResetTimeFieldNumber = 14;
    private ulong monthResetTime_;
    /// <summary>
    /// 每月重置时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MonthResetTime {
      get { return monthResetTime_; }
      set {
        monthResetTime_ = value;
      }
    }

    /// <summary>Field number for the "is_phone_sign" field.</summary>
    public const int IsPhoneSignFieldNumber = 15;
    private int isPhoneSign_;
    /// <summary>
    /// 手机是否关联（月重置）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsPhoneSign {
      get { return isPhoneSign_; }
      set {
        isPhoneSign_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerCommonInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerCommonInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PropCap != other.PropCap) return false;
      if (EquipCap != other.EquipCap) return false;
      if (DayResetTime != other.DayResetTime) return false;
      if (WeekResetTime != other.WeekResetTime) return false;
      if(!globalMailIds_.Equals(other.globalMailIds_)) return false;
      if (GradeArenaReward != other.GradeArenaReward) return false;
      if (GradeArenaTimes != other.GradeArenaTimes) return false;
      if (GradeArenaBuyTimes != other.GradeArenaBuyTimes) return false;
      if(!achieveGrades_.Equals(other.achieveGrades_)) return false;
      if (RenameTime != other.RenameTime) return false;
      if (RenameNicknameTime != other.RenameNicknameTime) return false;
      if(!rewardedGiftCode_.Equals(other.rewardedGiftCode_)) return false;
      if (MorningResetTime != other.MorningResetTime) return false;
      if (MonthResetTime != other.MonthResetTime) return false;
      if (IsPhoneSign != other.IsPhoneSign) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PropCap != 0) hash ^= PropCap.GetHashCode();
      if (EquipCap != 0) hash ^= EquipCap.GetHashCode();
      if (DayResetTime != 0UL) hash ^= DayResetTime.GetHashCode();
      if (WeekResetTime != 0UL) hash ^= WeekResetTime.GetHashCode();
      hash ^= globalMailIds_.GetHashCode();
      if (GradeArenaReward != 0) hash ^= GradeArenaReward.GetHashCode();
      if (GradeArenaTimes != 0) hash ^= GradeArenaTimes.GetHashCode();
      if (GradeArenaBuyTimes != 0) hash ^= GradeArenaBuyTimes.GetHashCode();
      hash ^= achieveGrades_.GetHashCode();
      if (RenameTime != 0UL) hash ^= RenameTime.GetHashCode();
      if (RenameNicknameTime != 0UL) hash ^= RenameNicknameTime.GetHashCode();
      hash ^= rewardedGiftCode_.GetHashCode();
      if (MorningResetTime != 0UL) hash ^= MorningResetTime.GetHashCode();
      if (MonthResetTime != 0UL) hash ^= MonthResetTime.GetHashCode();
      if (IsPhoneSign != 0) hash ^= IsPhoneSign.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PropCap != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PropCap);
      }
      if (EquipCap != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EquipCap);
      }
      if (DayResetTime != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(DayResetTime);
      }
      if (WeekResetTime != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(WeekResetTime);
      }
      globalMailIds_.WriteTo(output, _repeated_globalMailIds_codec);
      if (GradeArenaReward != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(GradeArenaReward);
      }
      if (GradeArenaTimes != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GradeArenaTimes);
      }
      if (GradeArenaBuyTimes != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(GradeArenaBuyTimes);
      }
      achieveGrades_.WriteTo(output, _repeated_achieveGrades_codec);
      if (RenameTime != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(RenameTime);
      }
      if (RenameNicknameTime != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(RenameNicknameTime);
      }
      rewardedGiftCode_.WriteTo(output, _repeated_rewardedGiftCode_codec);
      if (MorningResetTime != 0UL) {
        output.WriteRawTag(104);
        output.WriteUInt64(MorningResetTime);
      }
      if (MonthResetTime != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(MonthResetTime);
      }
      if (IsPhoneSign != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(IsPhoneSign);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PropCap != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropCap);
      }
      if (EquipCap != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EquipCap);
      }
      if (DayResetTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DayResetTime);
      }
      if (WeekResetTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WeekResetTime);
      }
      size += globalMailIds_.CalculateSize(_repeated_globalMailIds_codec);
      if (GradeArenaReward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GradeArenaReward);
      }
      if (GradeArenaTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GradeArenaTimes);
      }
      if (GradeArenaBuyTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GradeArenaBuyTimes);
      }
      size += achieveGrades_.CalculateSize(_repeated_achieveGrades_codec);
      if (RenameTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RenameTime);
      }
      if (RenameNicknameTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RenameNicknameTime);
      }
      size += rewardedGiftCode_.CalculateSize(_repeated_rewardedGiftCode_codec);
      if (MorningResetTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MorningResetTime);
      }
      if (MonthResetTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MonthResetTime);
      }
      if (IsPhoneSign != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsPhoneSign);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerCommonInfo other) {
      if (other == null) {
        return;
      }
      if (other.PropCap != 0) {
        PropCap = other.PropCap;
      }
      if (other.EquipCap != 0) {
        EquipCap = other.EquipCap;
      }
      if (other.DayResetTime != 0UL) {
        DayResetTime = other.DayResetTime;
      }
      if (other.WeekResetTime != 0UL) {
        WeekResetTime = other.WeekResetTime;
      }
      globalMailIds_.Add(other.globalMailIds_);
      if (other.GradeArenaReward != 0) {
        GradeArenaReward = other.GradeArenaReward;
      }
      if (other.GradeArenaTimes != 0) {
        GradeArenaTimes = other.GradeArenaTimes;
      }
      if (other.GradeArenaBuyTimes != 0) {
        GradeArenaBuyTimes = other.GradeArenaBuyTimes;
      }
      achieveGrades_.Add(other.achieveGrades_);
      if (other.RenameTime != 0UL) {
        RenameTime = other.RenameTime;
      }
      if (other.RenameNicknameTime != 0UL) {
        RenameNicknameTime = other.RenameNicknameTime;
      }
      rewardedGiftCode_.Add(other.rewardedGiftCode_);
      if (other.MorningResetTime != 0UL) {
        MorningResetTime = other.MorningResetTime;
      }
      if (other.MonthResetTime != 0UL) {
        MonthResetTime = other.MonthResetTime;
      }
      if (other.IsPhoneSign != 0) {
        IsPhoneSign = other.IsPhoneSign;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PropCap = input.ReadInt32();
            break;
          }
          case 16: {
            EquipCap = input.ReadInt32();
            break;
          }
          case 24: {
            DayResetTime = input.ReadUInt64();
            break;
          }
          case 32: {
            WeekResetTime = input.ReadUInt64();
            break;
          }
          case 42:
          case 40: {
            globalMailIds_.AddEntriesFrom(input, _repeated_globalMailIds_codec);
            break;
          }
          case 48: {
            GradeArenaReward = input.ReadInt32();
            break;
          }
          case 56: {
            GradeArenaTimes = input.ReadInt32();
            break;
          }
          case 64: {
            GradeArenaBuyTimes = input.ReadInt32();
            break;
          }
          case 74:
          case 72: {
            achieveGrades_.AddEntriesFrom(input, _repeated_achieveGrades_codec);
            break;
          }
          case 80: {
            RenameTime = input.ReadUInt64();
            break;
          }
          case 88: {
            RenameNicknameTime = input.ReadUInt64();
            break;
          }
          case 98: {
            rewardedGiftCode_.AddEntriesFrom(input, _repeated_rewardedGiftCode_codec);
            break;
          }
          case 104: {
            MorningResetTime = input.ReadUInt64();
            break;
          }
          case 112: {
            MonthResetTime = input.ReadUInt64();
            break;
          }
          case 120: {
            IsPhoneSign = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 好友信息
  /// </summary>
  public sealed partial class FriendInfo : pb::IMessage<FriendInfo> {
    private static readonly pb::MessageParser<FriendInfo> _parser = new pb::MessageParser<FriendInfo>(() => new FriendInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FriendInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendInfo(FriendInfo other) : this() {
      serverId_ = other.serverId_;
      playerId_ = other.playerId_;
      playerName_ = other.playerName_;
      headId_ = other.headId_;
      level_ = other.level_;
      sex_ = other.sex_;
      fightPower_ = other.fightPower_;
      grade_ = other.grade_;
      intimacy_ = other.intimacy_;
      guildId_ = other.guildId_;
      guildName_ = other.guildName_;
      logoutTime_ = other.logoutTime_;
      createTime_ = other.createTime_;
      lastMsgTime_ = other.lastMsgTime_;
      recommendReason_ = other.recommendReason_;
      pianoLevel_ = other.pianoLevel_;
      drumLevel_ = other.drumLevel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendInfo Clone() {
      return new FriendInfo(this);
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private int serverId_;
    /// <summary>
    /// 服务器id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private ulong playerId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "player_name" field.</summary>
    public const int PlayerNameFieldNumber = 3;
    private string playerName_ = "";
    /// <summary>
    /// 玩家名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "head_id" field.</summary>
    public const int HeadIdFieldNumber = 4;
    private int headId_;
    /// <summary>
    /// 头像id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadId {
      get { return headId_; }
      set {
        headId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 5;
    private int level_;
    /// <summary>
    /// 玩家等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 6;
    private int sex_;
    /// <summary>
    /// 性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "fight_power" field.</summary>
    public const int FightPowerFieldNumber = 7;
    private int fightPower_;
    /// <summary>
    /// 实力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FightPower {
      get { return fightPower_; }
      set {
        fightPower_ = value;
      }
    }

    /// <summary>Field number for the "grade" field.</summary>
    public const int GradeFieldNumber = 8;
    private int grade_;
    /// <summary>
    /// 咖位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Grade {
      get { return grade_; }
      set {
        grade_ = value;
      }
    }

    /// <summary>Field number for the "intimacy" field.</summary>
    public const int IntimacyFieldNumber = 9;
    private int intimacy_;
    /// <summary>
    /// 亲密度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Intimacy {
      get { return intimacy_; }
      set {
        intimacy_ = value;
      }
    }

    /// <summary>Field number for the "guild_id" field.</summary>
    public const int GuildIdFieldNumber = 10;
    private ulong guildId_;
    /// <summary>
    /// 协会id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "guild_name" field.</summary>
    public const int GuildNameFieldNumber = 11;
    private string guildName_ = "";
    /// <summary>
    /// 协会名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "logout_time" field.</summary>
    public const int LogoutTimeFieldNumber = 12;
    private ulong logoutTime_;
    /// <summary>
    /// 登出时间 (0为在线，非0为离线时间)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LogoutTime {
      get { return logoutTime_; }
      set {
        logoutTime_ = value;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 13;
    private ulong createTime_;
    /// <summary>
    /// 添加时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "last_msg_time" field.</summary>
    public const int LastMsgTimeFieldNumber = 14;
    private ulong lastMsgTime_;
    /// <summary>
    /// 最后聊天时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LastMsgTime {
      get { return lastMsgTime_; }
      set {
        lastMsgTime_ = value;
      }
    }

    /// <summary>Field number for the "recommend_reason" field.</summary>
    public const int RecommendReasonFieldNumber = 15;
    private int recommendReason_;
    /// <summary>
    /// 推荐理由 (推荐列表中有用)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecommendReason {
      get { return recommendReason_; }
      set {
        recommendReason_ = value;
      }
    }

    /// <summary>Field number for the "piano_level" field.</summary>
    public const int PianoLevelFieldNumber = 16;
    private int pianoLevel_;
    /// <summary>
    /// 钢琴等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PianoLevel {
      get { return pianoLevel_; }
      set {
        pianoLevel_ = value;
      }
    }

    /// <summary>Field number for the "drum_level" field.</summary>
    public const int DrumLevelFieldNumber = 17;
    private int drumLevel_;
    /// <summary>
    /// 架子鼓等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DrumLevel {
      get { return drumLevel_; }
      set {
        drumLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FriendInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FriendInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerId != other.ServerId) return false;
      if (PlayerId != other.PlayerId) return false;
      if (PlayerName != other.PlayerName) return false;
      if (HeadId != other.HeadId) return false;
      if (Level != other.Level) return false;
      if (Sex != other.Sex) return false;
      if (FightPower != other.FightPower) return false;
      if (Grade != other.Grade) return false;
      if (Intimacy != other.Intimacy) return false;
      if (GuildId != other.GuildId) return false;
      if (GuildName != other.GuildName) return false;
      if (LogoutTime != other.LogoutTime) return false;
      if (CreateTime != other.CreateTime) return false;
      if (LastMsgTime != other.LastMsgTime) return false;
      if (RecommendReason != other.RecommendReason) return false;
      if (PianoLevel != other.PianoLevel) return false;
      if (DrumLevel != other.DrumLevel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (HeadId != 0) hash ^= HeadId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Sex != 0) hash ^= Sex.GetHashCode();
      if (FightPower != 0) hash ^= FightPower.GetHashCode();
      if (Grade != 0) hash ^= Grade.GetHashCode();
      if (Intimacy != 0) hash ^= Intimacy.GetHashCode();
      if (GuildId != 0UL) hash ^= GuildId.GetHashCode();
      if (GuildName.Length != 0) hash ^= GuildName.GetHashCode();
      if (LogoutTime != 0UL) hash ^= LogoutTime.GetHashCode();
      if (CreateTime != 0UL) hash ^= CreateTime.GetHashCode();
      if (LastMsgTime != 0UL) hash ^= LastMsgTime.GetHashCode();
      if (RecommendReason != 0) hash ^= RecommendReason.GetHashCode();
      if (PianoLevel != 0) hash ^= PianoLevel.GetHashCode();
      if (DrumLevel != 0) hash ^= DrumLevel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ServerId);
      }
      if (PlayerId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(PlayerId);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PlayerName);
      }
      if (HeadId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HeadId);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Level);
      }
      if (Sex != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Sex);
      }
      if (FightPower != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FightPower);
      }
      if (Grade != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Grade);
      }
      if (Intimacy != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Intimacy);
      }
      if (GuildId != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(GuildId);
      }
      if (GuildName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(GuildName);
      }
      if (LogoutTime != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(LogoutTime);
      }
      if (CreateTime != 0UL) {
        output.WriteRawTag(104);
        output.WriteUInt64(CreateTime);
      }
      if (LastMsgTime != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(LastMsgTime);
      }
      if (RecommendReason != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(RecommendReason);
      }
      if (PianoLevel != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(PianoLevel);
      }
      if (DrumLevel != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(DrumLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (HeadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (FightPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FightPower);
      }
      if (Grade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Grade);
      }
      if (Intimacy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Intimacy);
      }
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GuildName);
      }
      if (LogoutTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LogoutTime);
      }
      if (CreateTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreateTime);
      }
      if (LastMsgTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LastMsgTime);
      }
      if (RecommendReason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecommendReason);
      }
      if (PianoLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PianoLevel);
      }
      if (DrumLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DrumLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FriendInfo other) {
      if (other == null) {
        return;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      if (other.HeadId != 0) {
        HeadId = other.HeadId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Sex != 0) {
        Sex = other.Sex;
      }
      if (other.FightPower != 0) {
        FightPower = other.FightPower;
      }
      if (other.Grade != 0) {
        Grade = other.Grade;
      }
      if (other.Intimacy != 0) {
        Intimacy = other.Intimacy;
      }
      if (other.GuildId != 0UL) {
        GuildId = other.GuildId;
      }
      if (other.GuildName.Length != 0) {
        GuildName = other.GuildName;
      }
      if (other.LogoutTime != 0UL) {
        LogoutTime = other.LogoutTime;
      }
      if (other.CreateTime != 0UL) {
        CreateTime = other.CreateTime;
      }
      if (other.LastMsgTime != 0UL) {
        LastMsgTime = other.LastMsgTime;
      }
      if (other.RecommendReason != 0) {
        RecommendReason = other.RecommendReason;
      }
      if (other.PianoLevel != 0) {
        PianoLevel = other.PianoLevel;
      }
      if (other.DrumLevel != 0) {
        DrumLevel = other.DrumLevel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerId = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 26: {
            PlayerName = input.ReadString();
            break;
          }
          case 32: {
            HeadId = input.ReadInt32();
            break;
          }
          case 40: {
            Level = input.ReadInt32();
            break;
          }
          case 48: {
            Sex = input.ReadInt32();
            break;
          }
          case 56: {
            FightPower = input.ReadInt32();
            break;
          }
          case 64: {
            Grade = input.ReadInt32();
            break;
          }
          case 72: {
            Intimacy = input.ReadInt32();
            break;
          }
          case 80: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 90: {
            GuildName = input.ReadString();
            break;
          }
          case 96: {
            LogoutTime = input.ReadUInt64();
            break;
          }
          case 104: {
            CreateTime = input.ReadUInt64();
            break;
          }
          case 112: {
            LastMsgTime = input.ReadUInt64();
            break;
          }
          case 120: {
            RecommendReason = input.ReadInt32();
            break;
          }
          case 128: {
            PianoLevel = input.ReadInt32();
            break;
          }
          case 136: {
            DrumLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 好友互动信息, 存储在player
  /// </summary>
  public sealed partial class FriendLocalInfo : pb::IMessage<FriendLocalInfo> {
    private static readonly pb::MessageParser<FriendLocalInfo> _parser = new pb::MessageParser<FriendLocalInfo>(() => new FriendLocalInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FriendLocalInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendLocalInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendLocalInfo(FriendLocalInfo other) : this() {
      playerId_ = other.playerId_;
      intimacy_ = other.intimacy_;
      isVisit_ = other.isVisit_;
      lastMsgTime_ = other.lastMsgTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendLocalInfo Clone() {
      return new FriendLocalInfo(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    /// <summary>
    /// 好友id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "intimacy" field.</summary>
    public const int IntimacyFieldNumber = 2;
    private int intimacy_;
    /// <summary>
    /// 亲密度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Intimacy {
      get { return intimacy_; }
      set {
        intimacy_ = value;
      }
    }

    /// <summary>Field number for the "is_visit" field.</summary>
    public const int IsVisitFieldNumber = 3;
    private int isVisit_;
    /// <summary>
    /// 是否已拜访
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsVisit {
      get { return isVisit_; }
      set {
        isVisit_ = value;
      }
    }

    /// <summary>Field number for the "last_msg_time" field.</summary>
    public const int LastMsgTimeFieldNumber = 4;
    private ulong lastMsgTime_;
    /// <summary>
    /// 最后一条信息时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LastMsgTime {
      get { return lastMsgTime_; }
      set {
        lastMsgTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FriendLocalInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FriendLocalInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Intimacy != other.Intimacy) return false;
      if (IsVisit != other.IsVisit) return false;
      if (LastMsgTime != other.LastMsgTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (Intimacy != 0) hash ^= Intimacy.GetHashCode();
      if (IsVisit != 0) hash ^= IsVisit.GetHashCode();
      if (LastMsgTime != 0UL) hash ^= LastMsgTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (Intimacy != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Intimacy);
      }
      if (IsVisit != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IsVisit);
      }
      if (LastMsgTime != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(LastMsgTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (Intimacy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Intimacy);
      }
      if (IsVisit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsVisit);
      }
      if (LastMsgTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LastMsgTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FriendLocalInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.Intimacy != 0) {
        Intimacy = other.Intimacy;
      }
      if (other.IsVisit != 0) {
        IsVisit = other.IsVisit;
      }
      if (other.LastMsgTime != 0UL) {
        LastMsgTime = other.LastMsgTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 16: {
            Intimacy = input.ReadInt32();
            break;
          }
          case 24: {
            IsVisit = input.ReadInt32();
            break;
          }
          case 32: {
            LastMsgTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 申请信息
  /// </summary>
  public sealed partial class FriendApplyInfo : pb::IMessage<FriendApplyInfo> {
    private static readonly pb::MessageParser<FriendApplyInfo> _parser = new pb::MessageParser<FriendApplyInfo>(() => new FriendApplyInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FriendApplyInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendApplyInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendApplyInfo(FriendApplyInfo other) : this() {
      FriendInfo = other.friendInfo_ != null ? other.FriendInfo.Clone() : null;
      leaveMsg_ = other.leaveMsg_;
      applyTime_ = other.applyTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendApplyInfo Clone() {
      return new FriendApplyInfo(this);
    }

    /// <summary>Field number for the "friend_info" field.</summary>
    public const int FriendInfoFieldNumber = 1;
    private global::Stardom.FriendInfo friendInfo_;
    /// <summary>
    /// 申请信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.FriendInfo FriendInfo {
      get { return friendInfo_; }
      set {
        friendInfo_ = value;
      }
    }

    /// <summary>Field number for the "leave_msg" field.</summary>
    public const int LeaveMsgFieldNumber = 2;
    private string leaveMsg_ = "";
    /// <summary>
    /// 留言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LeaveMsg {
      get { return leaveMsg_; }
      set {
        leaveMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "apply_time" field.</summary>
    public const int ApplyTimeFieldNumber = 3;
    private ulong applyTime_;
    /// <summary>
    /// 申请时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ApplyTime {
      get { return applyTime_; }
      set {
        applyTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FriendApplyInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FriendApplyInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FriendInfo, other.FriendInfo)) return false;
      if (LeaveMsg != other.LeaveMsg) return false;
      if (ApplyTime != other.ApplyTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (friendInfo_ != null) hash ^= FriendInfo.GetHashCode();
      if (LeaveMsg.Length != 0) hash ^= LeaveMsg.GetHashCode();
      if (ApplyTime != 0UL) hash ^= ApplyTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (friendInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FriendInfo);
      }
      if (LeaveMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LeaveMsg);
      }
      if (ApplyTime != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ApplyTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (friendInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FriendInfo);
      }
      if (LeaveMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LeaveMsg);
      }
      if (ApplyTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ApplyTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FriendApplyInfo other) {
      if (other == null) {
        return;
      }
      if (other.friendInfo_ != null) {
        if (friendInfo_ == null) {
          friendInfo_ = new global::Stardom.FriendInfo();
        }
        FriendInfo.MergeFrom(other.FriendInfo);
      }
      if (other.LeaveMsg.Length != 0) {
        LeaveMsg = other.LeaveMsg;
      }
      if (other.ApplyTime != 0UL) {
        ApplyTime = other.ApplyTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (friendInfo_ == null) {
              friendInfo_ = new global::Stardom.FriendInfo();
            }
            input.ReadMessage(friendInfo_);
            break;
          }
          case 18: {
            LeaveMsg = input.ReadString();
            break;
          }
          case 24: {
            ApplyTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 好友聊天信息
  /// </summary>
  public sealed partial class FriendTalkMsg : pb::IMessage<FriendTalkMsg> {
    private static readonly pb::MessageParser<FriendTalkMsg> _parser = new pb::MessageParser<FriendTalkMsg>(() => new FriendTalkMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FriendTalkMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendTalkMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendTalkMsg(FriendTalkMsg other) : this() {
      msgId_ = other.msgId_;
      fromId_ = other.fromId_;
      toId_ = other.toId_;
      emojiType_ = other.emojiType_;
      talkMsg_ = other.talkMsg_;
      createTime_ = other.createTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendTalkMsg Clone() {
      return new FriendTalkMsg(this);
    }

    /// <summary>Field number for the "msg_id" field.</summary>
    public const int MsgIdFieldNumber = 1;
    private ulong msgId_;
    /// <summary>
    /// 消息id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MsgId {
      get { return msgId_; }
      set {
        msgId_ = value;
      }
    }

    /// <summary>Field number for the "from_id" field.</summary>
    public const int FromIdFieldNumber = 2;
    private ulong fromId_;
    /// <summary>
    /// 发送玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FromId {
      get { return fromId_; }
      set {
        fromId_ = value;
      }
    }

    /// <summary>Field number for the "to_id" field.</summary>
    public const int ToIdFieldNumber = 3;
    private ulong toId_;
    /// <summary>
    /// 接受玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ToId {
      get { return toId_; }
      set {
        toId_ = value;
      }
    }

    /// <summary>Field number for the "emoji_type" field.</summary>
    public const int EmojiTypeFieldNumber = 4;
    private int emojiType_;
    /// <summary>
    /// 表情类型 1.大表情、0.普通
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EmojiType {
      get { return emojiType_; }
      set {
        emojiType_ = value;
      }
    }

    /// <summary>Field number for the "talk_msg" field.</summary>
    public const int TalkMsgFieldNumber = 5;
    private string talkMsg_ = "";
    /// <summary>
    /// 对话内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TalkMsg {
      get { return talkMsg_; }
      set {
        talkMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 6;
    private ulong createTime_;
    /// <summary>
    /// 创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FriendTalkMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FriendTalkMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgId != other.MsgId) return false;
      if (FromId != other.FromId) return false;
      if (ToId != other.ToId) return false;
      if (EmojiType != other.EmojiType) return false;
      if (TalkMsg != other.TalkMsg) return false;
      if (CreateTime != other.CreateTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgId != 0UL) hash ^= MsgId.GetHashCode();
      if (FromId != 0UL) hash ^= FromId.GetHashCode();
      if (ToId != 0UL) hash ^= ToId.GetHashCode();
      if (EmojiType != 0) hash ^= EmojiType.GetHashCode();
      if (TalkMsg.Length != 0) hash ^= TalkMsg.GetHashCode();
      if (CreateTime != 0UL) hash ^= CreateTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MsgId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MsgId);
      }
      if (FromId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(FromId);
      }
      if (ToId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ToId);
      }
      if (EmojiType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EmojiType);
      }
      if (TalkMsg.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TalkMsg);
      }
      if (CreateTime != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(CreateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MsgId);
      }
      if (FromId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FromId);
      }
      if (ToId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ToId);
      }
      if (EmojiType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EmojiType);
      }
      if (TalkMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TalkMsg);
      }
      if (CreateTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreateTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FriendTalkMsg other) {
      if (other == null) {
        return;
      }
      if (other.MsgId != 0UL) {
        MsgId = other.MsgId;
      }
      if (other.FromId != 0UL) {
        FromId = other.FromId;
      }
      if (other.ToId != 0UL) {
        ToId = other.ToId;
      }
      if (other.EmojiType != 0) {
        EmojiType = other.EmojiType;
      }
      if (other.TalkMsg.Length != 0) {
        TalkMsg = other.TalkMsg;
      }
      if (other.CreateTime != 0UL) {
        CreateTime = other.CreateTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MsgId = input.ReadUInt64();
            break;
          }
          case 16: {
            FromId = input.ReadUInt64();
            break;
          }
          case 24: {
            ToId = input.ReadUInt64();
            break;
          }
          case 32: {
            EmojiType = input.ReadInt32();
            break;
          }
          case 42: {
            TalkMsg = input.ReadString();
            break;
          }
          case 48: {
            CreateTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家信息
  /// </summary>
  public sealed partial class PlayerFriendInfo : pb::IMessage<PlayerFriendInfo> {
    private static readonly pb::MessageParser<PlayerFriendInfo> _parser = new pb::MessageParser<PlayerFriendInfo>(() => new PlayerFriendInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerFriendInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerFriendInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerFriendInfo(PlayerFriendInfo other) : this() {
      localInfo_ = other.localInfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerFriendInfo Clone() {
      return new PlayerFriendInfo(this);
    }

    /// <summary>Field number for the "local_info" field.</summary>
    public const int LocalInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Stardom.FriendLocalInfo> _repeated_localInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Stardom.FriendLocalInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.FriendLocalInfo> localInfo_ = new pbc::RepeatedField<global::Stardom.FriendLocalInfo>();
    /// <summary>
    /// 存储信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.FriendLocalInfo> LocalInfo {
      get { return localInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerFriendInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerFriendInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!localInfo_.Equals(other.localInfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= localInfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      localInfo_.WriteTo(output, _repeated_localInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += localInfo_.CalculateSize(_repeated_localInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerFriendInfo other) {
      if (other == null) {
        return;
      }
      localInfo_.Add(other.localInfo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            localInfo_.AddEntriesFrom(input, _repeated_localInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 所有离线信息
  /// </summary>
  public sealed partial class PlayerOfflineInfo : pb::IMessage<PlayerOfflineInfo> {
    private static readonly pb::MessageParser<PlayerOfflineInfo> _parser = new pb::MessageParser<PlayerOfflineInfo>(() => new PlayerOfflineInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerOfflineInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerOfflineInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerOfflineInfo(PlayerOfflineInfo other) : this() {
      level_ = other.level_;
      grade_ = other.grade_;
      sex_ = other.sex_;
      faction_ = other.faction_;
      fightPower_ = other.fightPower_;
      headId_ = other.headId_;
      profession_ = other.profession_;
      cardId_ = other.cardId_;
      playerId_ = other.playerId_;
      guildId_ = other.guildId_;
      name_ = other.name_;
      nickName_ = other.nickName_;
      guildName_ = other.guildName_;
      sign_ = other.sign_;
      FashionInfo = other.fashionInfo_ != null ? other.FashionInfo.Clone() : null;
      activeSkills_ = other.activeSkills_.Clone();
      fighters_ = other.fighters_.Clone();
      ardentValue_ = other.ardentValue_;
      AssistInfo = other.assistInfo_ != null ? other.AssistInfo.Clone() : null;
      assistRecords_ = other.assistRecords_.Clone();
      arenaRecords_ = other.arenaRecords_.Clone();
      titleId_ = other.titleId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerOfflineInfo Clone() {
      return new PlayerOfflineInfo(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "grade" field.</summary>
    public const int GradeFieldNumber = 2;
    private int grade_;
    /// <summary>
    /// 咖位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Grade {
      get { return grade_; }
      set {
        grade_ = value;
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 3;
    private int sex_;
    /// <summary>
    /// 性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "faction" field.</summary>
    public const int FactionFieldNumber = 4;
    private int faction_;
    /// <summary>
    /// 平台
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Faction {
      get { return faction_; }
      set {
        faction_ = value;
      }
    }

    /// <summary>Field number for the "fight_power" field.</summary>
    public const int FightPowerFieldNumber = 5;
    private int fightPower_;
    /// <summary>
    /// 战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FightPower {
      get { return fightPower_; }
      set {
        fightPower_ = value;
      }
    }

    /// <summary>Field number for the "head_id" field.</summary>
    public const int HeadIdFieldNumber = 6;
    private int headId_;
    /// <summary>
    /// 头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadId {
      get { return headId_; }
      set {
        headId_ = value;
      }
    }

    /// <summary>Field number for the "profession" field.</summary>
    public const int ProfessionFieldNumber = 7;
    private int profession_;
    /// <summary>
    /// 职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Profession {
      get { return profession_; }
      set {
        profession_ = value;
      }
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 8;
    private int cardId_;
    /// <summary>
    /// 卡牌id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 9;
    private ulong playerId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "guild_id" field.</summary>
    public const int GuildIdFieldNumber = 10;
    private ulong guildId_;
    /// <summary>
    /// 协会id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 11;
    private string name_ = "";
    /// <summary>
    /// 名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nick_name" field.</summary>
    public const int NickNameFieldNumber = 12;
    private string nickName_ = "";
    /// <summary>
    /// 昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guild_name" field.</summary>
    public const int GuildNameFieldNumber = 13;
    private string guildName_ = "";
    /// <summary>
    /// 协会名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sign" field.</summary>
    public const int SignFieldNumber = 14;
    private string sign_ = "";
    /// <summary>
    /// 粉丝签名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sign {
      get { return sign_; }
      set {
        sign_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fashion_info" field.</summary>
    public const int FashionInfoFieldNumber = 15;
    private global::Stardom.FashionSchemeInfo fashionInfo_;
    /// <summary>
    /// 时装信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.FashionSchemeInfo FashionInfo {
      get { return fashionInfo_; }
      set {
        fashionInfo_ = value;
      }
    }

    /// <summary>Field number for the "active_skills" field.</summary>
    public const int ActiveSkillsFieldNumber = 16;
    private static readonly pb::FieldCodec<int> _repeated_activeSkills_codec
        = pb::FieldCodec.ForInt32(130);
    private readonly pbc::RepeatedField<int> activeSkills_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 主动技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ActiveSkills {
      get { return activeSkills_; }
    }

    /// <summary>Field number for the "fighters" field.</summary>
    public const int FightersFieldNumber = 17;
    private static readonly pb::FieldCodec<global::Stardom.InitFighterInfo> _repeated_fighters_codec
        = pb::FieldCodec.ForMessage(138, global::Stardom.InitFighterInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.InitFighterInfo> fighters_ = new pbc::RepeatedField<global::Stardom.InitFighterInfo>();
    /// <summary>
    /// 战斗列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.InitFighterInfo> Fighters {
      get { return fighters_; }
    }

    /// <summary>Field number for the "ardent_value" field.</summary>
    public const int ArdentValueFieldNumber = 18;
    private int ardentValue_;
    /// <summary>
    /// 热心值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ArdentValue {
      get { return ardentValue_; }
      set {
        ardentValue_ = value;
      }
    }

    /// <summary>Field number for the "assist_info" field.</summary>
    public const int AssistInfoFieldNumber = 19;
    private global::Stardom.InitFighterInfo assistInfo_;
    /// <summary>
    /// 助战卡牌信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.InitFighterInfo AssistInfo {
      get { return assistInfo_; }
      set {
        assistInfo_ = value;
      }
    }

    /// <summary>Field number for the "assist_records" field.</summary>
    public const int AssistRecordsFieldNumber = 20;
    private static readonly pb::FieldCodec<global::Stardom.TrainToolAssistRecord> _repeated_assistRecords_codec
        = pb::FieldCodec.ForMessage(162, global::Stardom.TrainToolAssistRecord.Parser);
    private readonly pbc::RepeatedField<global::Stardom.TrainToolAssistRecord> assistRecords_ = new pbc::RepeatedField<global::Stardom.TrainToolAssistRecord>();
    /// <summary>
    /// 助战记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.TrainToolAssistRecord> AssistRecords {
      get { return assistRecords_; }
    }

    /// <summary>Field number for the "arena_records" field.</summary>
    public const int ArenaRecordsFieldNumber = 21;
    private static readonly pb::FieldCodec<global::Stardom.GradeArenaEvent> _repeated_arenaRecords_codec
        = pb::FieldCodec.ForMessage(170, global::Stardom.GradeArenaEvent.Parser);
    private readonly pbc::RepeatedField<global::Stardom.GradeArenaEvent> arenaRecords_ = new pbc::RepeatedField<global::Stardom.GradeArenaEvent>();
    /// <summary>
    /// 竞技场挑战记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.GradeArenaEvent> ArenaRecords {
      get { return arenaRecords_; }
    }

    /// <summary>Field number for the "title_id" field.</summary>
    public const int TitleIdFieldNumber = 22;
    private int titleId_;
    /// <summary>
    /// 称号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TitleId {
      get { return titleId_; }
      set {
        titleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerOfflineInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerOfflineInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (Grade != other.Grade) return false;
      if (Sex != other.Sex) return false;
      if (Faction != other.Faction) return false;
      if (FightPower != other.FightPower) return false;
      if (HeadId != other.HeadId) return false;
      if (Profession != other.Profession) return false;
      if (CardId != other.CardId) return false;
      if (PlayerId != other.PlayerId) return false;
      if (GuildId != other.GuildId) return false;
      if (Name != other.Name) return false;
      if (NickName != other.NickName) return false;
      if (GuildName != other.GuildName) return false;
      if (Sign != other.Sign) return false;
      if (!object.Equals(FashionInfo, other.FashionInfo)) return false;
      if(!activeSkills_.Equals(other.activeSkills_)) return false;
      if(!fighters_.Equals(other.fighters_)) return false;
      if (ArdentValue != other.ArdentValue) return false;
      if (!object.Equals(AssistInfo, other.AssistInfo)) return false;
      if(!assistRecords_.Equals(other.assistRecords_)) return false;
      if(!arenaRecords_.Equals(other.arenaRecords_)) return false;
      if (TitleId != other.TitleId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Grade != 0) hash ^= Grade.GetHashCode();
      if (Sex != 0) hash ^= Sex.GetHashCode();
      if (Faction != 0) hash ^= Faction.GetHashCode();
      if (FightPower != 0) hash ^= FightPower.GetHashCode();
      if (HeadId != 0) hash ^= HeadId.GetHashCode();
      if (Profession != 0) hash ^= Profession.GetHashCode();
      if (CardId != 0) hash ^= CardId.GetHashCode();
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (GuildId != 0UL) hash ^= GuildId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (NickName.Length != 0) hash ^= NickName.GetHashCode();
      if (GuildName.Length != 0) hash ^= GuildName.GetHashCode();
      if (Sign.Length != 0) hash ^= Sign.GetHashCode();
      if (fashionInfo_ != null) hash ^= FashionInfo.GetHashCode();
      hash ^= activeSkills_.GetHashCode();
      hash ^= fighters_.GetHashCode();
      if (ArdentValue != 0) hash ^= ArdentValue.GetHashCode();
      if (assistInfo_ != null) hash ^= AssistInfo.GetHashCode();
      hash ^= assistRecords_.GetHashCode();
      hash ^= arenaRecords_.GetHashCode();
      if (TitleId != 0) hash ^= TitleId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (Grade != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Grade);
      }
      if (Sex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Sex);
      }
      if (Faction != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Faction);
      }
      if (FightPower != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FightPower);
      }
      if (HeadId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(HeadId);
      }
      if (Profession != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Profession);
      }
      if (CardId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CardId);
      }
      if (PlayerId != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(PlayerId);
      }
      if (GuildId != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(GuildId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Name);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(NickName);
      }
      if (GuildName.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(GuildName);
      }
      if (Sign.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Sign);
      }
      if (fashionInfo_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(FashionInfo);
      }
      activeSkills_.WriteTo(output, _repeated_activeSkills_codec);
      fighters_.WriteTo(output, _repeated_fighters_codec);
      if (ArdentValue != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(ArdentValue);
      }
      if (assistInfo_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(AssistInfo);
      }
      assistRecords_.WriteTo(output, _repeated_assistRecords_codec);
      arenaRecords_.WriteTo(output, _repeated_arenaRecords_codec);
      if (TitleId != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(TitleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Grade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Grade);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (Faction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Faction);
      }
      if (FightPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FightPower);
      }
      if (HeadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadId);
      }
      if (Profession != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Profession);
      }
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GuildName);
      }
      if (Sign.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sign);
      }
      if (fashionInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FashionInfo);
      }
      size += activeSkills_.CalculateSize(_repeated_activeSkills_codec);
      size += fighters_.CalculateSize(_repeated_fighters_codec);
      if (ArdentValue != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ArdentValue);
      }
      if (assistInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AssistInfo);
      }
      size += assistRecords_.CalculateSize(_repeated_assistRecords_codec);
      size += arenaRecords_.CalculateSize(_repeated_arenaRecords_codec);
      if (TitleId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TitleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerOfflineInfo other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Grade != 0) {
        Grade = other.Grade;
      }
      if (other.Sex != 0) {
        Sex = other.Sex;
      }
      if (other.Faction != 0) {
        Faction = other.Faction;
      }
      if (other.FightPower != 0) {
        FightPower = other.FightPower;
      }
      if (other.HeadId != 0) {
        HeadId = other.HeadId;
      }
      if (other.Profession != 0) {
        Profession = other.Profession;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.GuildId != 0UL) {
        GuildId = other.GuildId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.NickName.Length != 0) {
        NickName = other.NickName;
      }
      if (other.GuildName.Length != 0) {
        GuildName = other.GuildName;
      }
      if (other.Sign.Length != 0) {
        Sign = other.Sign;
      }
      if (other.fashionInfo_ != null) {
        if (fashionInfo_ == null) {
          fashionInfo_ = new global::Stardom.FashionSchemeInfo();
        }
        FashionInfo.MergeFrom(other.FashionInfo);
      }
      activeSkills_.Add(other.activeSkills_);
      fighters_.Add(other.fighters_);
      if (other.ArdentValue != 0) {
        ArdentValue = other.ArdentValue;
      }
      if (other.assistInfo_ != null) {
        if (assistInfo_ == null) {
          assistInfo_ = new global::Stardom.InitFighterInfo();
        }
        AssistInfo.MergeFrom(other.AssistInfo);
      }
      assistRecords_.Add(other.assistRecords_);
      arenaRecords_.Add(other.arenaRecords_);
      if (other.TitleId != 0) {
        TitleId = other.TitleId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 16: {
            Grade = input.ReadInt32();
            break;
          }
          case 24: {
            Sex = input.ReadInt32();
            break;
          }
          case 32: {
            Faction = input.ReadInt32();
            break;
          }
          case 40: {
            FightPower = input.ReadInt32();
            break;
          }
          case 48: {
            HeadId = input.ReadInt32();
            break;
          }
          case 56: {
            Profession = input.ReadInt32();
            break;
          }
          case 64: {
            CardId = input.ReadInt32();
            break;
          }
          case 72: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 80: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 90: {
            Name = input.ReadString();
            break;
          }
          case 98: {
            NickName = input.ReadString();
            break;
          }
          case 106: {
            GuildName = input.ReadString();
            break;
          }
          case 114: {
            Sign = input.ReadString();
            break;
          }
          case 122: {
            if (fashionInfo_ == null) {
              fashionInfo_ = new global::Stardom.FashionSchemeInfo();
            }
            input.ReadMessage(fashionInfo_);
            break;
          }
          case 130:
          case 128: {
            activeSkills_.AddEntriesFrom(input, _repeated_activeSkills_codec);
            break;
          }
          case 138: {
            fighters_.AddEntriesFrom(input, _repeated_fighters_codec);
            break;
          }
          case 144: {
            ArdentValue = input.ReadInt32();
            break;
          }
          case 154: {
            if (assistInfo_ == null) {
              assistInfo_ = new global::Stardom.InitFighterInfo();
            }
            input.ReadMessage(assistInfo_);
            break;
          }
          case 162: {
            assistRecords_.AddEntriesFrom(input, _repeated_assistRecords_codec);
            break;
          }
          case 170: {
            arenaRecords_.AddEntriesFrom(input, _repeated_arenaRecords_codec);
            break;
          }
          case 176: {
            TitleId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家的活动数据
  /// </summary>
  public sealed partial class ActivityInfo : pb::IMessage<ActivityInfo> {
    private static readonly pb::MessageParser<ActivityInfo> _parser = new pb::MessageParser<ActivityInfo>(() => new ActivityInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivityInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityInfo(ActivityInfo other) : this() {
      activityId_ = other.activityId_;
      count_ = other.count_;
      daycount_ = other.daycount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityInfo Clone() {
      return new ActivityInfo(this);
    }

    /// <summary>Field number for the "activity_id" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    /// 活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    /// 本次活动参与次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "daycount" field.</summary>
    public const int DaycountFieldNumber = 3;
    private int daycount_;
    /// <summary>
    /// 今日参与次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Daycount {
      get { return daycount_; }
      set {
        daycount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivityInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivityInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActivityId != other.ActivityId) return false;
      if (Count != other.Count) return false;
      if (Daycount != other.Daycount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActivityId != 0) hash ^= ActivityId.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Daycount != 0) hash ^= Daycount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (Daycount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Daycount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Daycount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Daycount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivityInfo other) {
      if (other == null) {
        return;
      }
      if (other.ActivityId != 0) {
        ActivityId = other.ActivityId;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Daycount != 0) {
        Daycount = other.Daycount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            Daycount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家活动信息 
  /// </summary>
  public sealed partial class PlayerActivityInfo : pb::IMessage<PlayerActivityInfo> {
    private static readonly pb::MessageParser<PlayerActivityInfo> _parser = new pb::MessageParser<PlayerActivityInfo>(() => new PlayerActivityInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerActivityInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActivityInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActivityInfo(PlayerActivityInfo other) : this() {
      activities_ = other.activities_.Clone();
      isPhoneSign_ = other.isPhoneSign_;
      telephoneNum_ = other.telephoneNum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActivityInfo Clone() {
      return new PlayerActivityInfo(this);
    }

    /// <summary>Field number for the "activities" field.</summary>
    public const int ActivitiesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Stardom.ActivityInfo> _repeated_activities_codec
        = pb::FieldCodec.ForMessage(10, global::Stardom.ActivityInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.ActivityInfo> activities_ = new pbc::RepeatedField<global::Stardom.ActivityInfo>();
    /// <summary>
    /// 活动列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.ActivityInfo> Activities {
      get { return activities_; }
    }

    /// <summary>Field number for the "is_phone_sign" field.</summary>
    public const int IsPhoneSignFieldNumber = 2;
    private int isPhoneSign_;
    /// <summary>
    /// 绑定状态 0待绑定1已绑定2已领奖
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsPhoneSign {
      get { return isPhoneSign_; }
      set {
        isPhoneSign_ = value;
      }
    }

    /// <summary>Field number for the "telephone_num" field.</summary>
    public const int TelephoneNumFieldNumber = 3;
    private string telephoneNum_ = "";
    /// <summary>
    /// 手机号码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TelephoneNum {
      get { return telephoneNum_; }
      set {
        telephoneNum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerActivityInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerActivityInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!activities_.Equals(other.activities_)) return false;
      if (IsPhoneSign != other.IsPhoneSign) return false;
      if (TelephoneNum != other.TelephoneNum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= activities_.GetHashCode();
      if (IsPhoneSign != 0) hash ^= IsPhoneSign.GetHashCode();
      if (TelephoneNum.Length != 0) hash ^= TelephoneNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      activities_.WriteTo(output, _repeated_activities_codec);
      if (IsPhoneSign != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(IsPhoneSign);
      }
      if (TelephoneNum.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TelephoneNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += activities_.CalculateSize(_repeated_activities_codec);
      if (IsPhoneSign != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsPhoneSign);
      }
      if (TelephoneNum.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TelephoneNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerActivityInfo other) {
      if (other == null) {
        return;
      }
      activities_.Add(other.activities_);
      if (other.IsPhoneSign != 0) {
        IsPhoneSign = other.IsPhoneSign;
      }
      if (other.TelephoneNum.Length != 0) {
        TelephoneNum = other.TelephoneNum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            activities_.AddEntriesFrom(input, _repeated_activities_codec);
            break;
          }
          case 16: {
            IsPhoneSign = input.ReadInt32();
            break;
          }
          case 26: {
            TelephoneNum = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 问卷信息
  /// </summary>
  public sealed partial class OperationInfo : pb::IMessage<OperationInfo> {
    private static readonly pb::MessageParser<OperationInfo> _parser = new pb::MessageParser<OperationInfo>(() => new OperationInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OperationInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperationInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperationInfo(OperationInfo other) : this() {
      operationId_ = other.operationId_;
      isFinish_ = other.isFinish_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperationInfo Clone() {
      return new OperationInfo(this);
    }

    /// <summary>Field number for the "operation_id" field.</summary>
    public const int OperationIdFieldNumber = 1;
    private int operationId_;
    /// <summary>
    /// 运营活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OperationId {
      get { return operationId_; }
      set {
        operationId_ = value;
      }
    }

    /// <summary>Field number for the "is_finish" field.</summary>
    public const int IsFinishFieldNumber = 2;
    private int isFinish_;
    /// <summary>
    /// 是否参与 0未参与 1已参与
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFinish {
      get { return isFinish_; }
      set {
        isFinish_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OperationInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OperationInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OperationId != other.OperationId) return false;
      if (IsFinish != other.IsFinish) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OperationId != 0) hash ^= OperationId.GetHashCode();
      if (IsFinish != 0) hash ^= IsFinish.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OperationId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OperationId);
      }
      if (IsFinish != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(IsFinish);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OperationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OperationId);
      }
      if (IsFinish != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFinish);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OperationInfo other) {
      if (other == null) {
        return;
      }
      if (other.OperationId != 0) {
        OperationId = other.OperationId;
      }
      if (other.IsFinish != 0) {
        IsFinish = other.IsFinish;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OperationId = input.ReadInt32();
            break;
          }
          case 16: {
            IsFinish = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家运营活动数据
  /// </summary>
  public sealed partial class PlayerOperationInfo : pb::IMessage<PlayerOperationInfo> {
    private static readonly pb::MessageParser<PlayerOperationInfo> _parser = new pb::MessageParser<PlayerOperationInfo>(() => new PlayerOperationInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerOperationInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerOperationInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerOperationInfo(PlayerOperationInfo other) : this() {
      operations_ = other.operations_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerOperationInfo Clone() {
      return new PlayerOperationInfo(this);
    }

    /// <summary>Field number for the "operations" field.</summary>
    public const int OperationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Stardom.OperationInfo> _repeated_operations_codec
        = pb::FieldCodec.ForMessage(10, global::Stardom.OperationInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.OperationInfo> operations_ = new pbc::RepeatedField<global::Stardom.OperationInfo>();
    /// <summary>
    /// 运营活动数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.OperationInfo> Operations {
      get { return operations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerOperationInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerOperationInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!operations_.Equals(other.operations_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= operations_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      operations_.WriteTo(output, _repeated_operations_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += operations_.CalculateSize(_repeated_operations_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerOperationInfo other) {
      if (other == null) {
        return;
      }
      operations_.Add(other.operations_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            operations_.AddEntriesFrom(input, _repeated_operations_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 每日记录，所有模块公用
  /// </summary>
  public sealed partial class DailyRecord : pb::IMessage<DailyRecord> {
    private static readonly pb::MessageParser<DailyRecord> _parser = new pb::MessageParser<DailyRecord>(() => new DailyRecord());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DailyRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyRecord(DailyRecord other) : this() {
      cid_ = other.cid_;
      uuid_ = other.uuid_;
      todayUse_ = other.todayUse_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyRecord Clone() {
      return new DailyRecord(this);
    }

    /// <summary>Field number for the "cid" field.</summary>
    public const int CidFieldNumber = 1;
    private uint cid_;
    /// <summary>
    /// 配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Cid {
      get { return cid_; }
      set {
        cid_ = value;
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 2;
    private ulong uuid_;
    /// <summary>
    /// uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "today_use" field.</summary>
    public const int TodayUseFieldNumber = 3;
    private uint todayUse_;
    /// <summary>
    /// 今日使用次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TodayUse {
      get { return todayUse_; }
      set {
        todayUse_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DailyRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DailyRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cid != other.Cid) return false;
      if (Uuid != other.Uuid) return false;
      if (TodayUse != other.TodayUse) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cid != 0) hash ^= Cid.GetHashCode();
      if (Uuid != 0UL) hash ^= Uuid.GetHashCode();
      if (TodayUse != 0) hash ^= TodayUse.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Cid);
      }
      if (Uuid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Uuid);
      }
      if (TodayUse != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TodayUse);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cid);
      }
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (TodayUse != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TodayUse);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DailyRecord other) {
      if (other == null) {
        return;
      }
      if (other.Cid != 0) {
        Cid = other.Cid;
      }
      if (other.Uuid != 0UL) {
        Uuid = other.Uuid;
      }
      if (other.TodayUse != 0) {
        TodayUse = other.TodayUse;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Cid = input.ReadUInt32();
            break;
          }
          case 16: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 24: {
            TodayUse = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 临时的数据，不重要的数据
  /// </summary>
  public sealed partial class HubInfo : pb::IMessage<HubInfo> {
    private static readonly pb::MessageParser<HubInfo> _parser = new pb::MessageParser<HubInfo>(() => new HubInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HubInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HubInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HubInfo(HubInfo other) : this() {
      id_ = other.id_;
      val_ = other.val_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HubInfo Clone() {
      return new HubInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    /// <summary>
    /// key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "val" field.</summary>
    public const int ValFieldNumber = 2;
    private uint val_;
    /// <summary>
    /// value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Val {
      get { return val_; }
      set {
        val_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HubInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HubInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Val != other.Val) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (Val != 0) hash ^= Val.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (Val != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Val);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (Val != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Val);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HubInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.Val != 0) {
        Val = other.Val;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            Val = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 全服活动数据
  /// </summary>
  public sealed partial class GameActivityInfo : pb::IMessage<GameActivityInfo> {
    private static readonly pb::MessageParser<GameActivityInfo> _parser = new pb::MessageParser<GameActivityInfo>(() => new GameActivityInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameActivityInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameActivityInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameActivityInfo(GameActivityInfo other) : this() {
      activityId_ = other.activityId_;
      phase_ = other.phase_;
      phaseEndTs_ = other.phaseEndTs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameActivityInfo Clone() {
      return new GameActivityInfo(this);
    }

    /// <summary>Field number for the "activity_id" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    /// 活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "phase" field.</summary>
    public const int PhaseFieldNumber = 2;
    private int phase_;
    /// <summary>
    /// 活动阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Phase {
      get { return phase_; }
      set {
        phase_ = value;
      }
    }

    /// <summary>Field number for the "phase_end_ts" field.</summary>
    public const int PhaseEndTsFieldNumber = 3;
    private ulong phaseEndTs_;
    /// <summary>
    /// 活动阶段结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PhaseEndTs {
      get { return phaseEndTs_; }
      set {
        phaseEndTs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameActivityInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameActivityInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActivityId != other.ActivityId) return false;
      if (Phase != other.Phase) return false;
      if (PhaseEndTs != other.PhaseEndTs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActivityId != 0) hash ^= ActivityId.GetHashCode();
      if (Phase != 0) hash ^= Phase.GetHashCode();
      if (PhaseEndTs != 0UL) hash ^= PhaseEndTs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (Phase != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Phase);
      }
      if (PhaseEndTs != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(PhaseEndTs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (Phase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Phase);
      }
      if (PhaseEndTs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PhaseEndTs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameActivityInfo other) {
      if (other == null) {
        return;
      }
      if (other.ActivityId != 0) {
        ActivityId = other.ActivityId;
      }
      if (other.Phase != 0) {
        Phase = other.Phase;
      }
      if (other.PhaseEndTs != 0UL) {
        PhaseEndTs = other.PhaseEndTs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            Phase = input.ReadInt32();
            break;
          }
          case 24: {
            PhaseEndTs = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 运营问卷
  /// </summary>
  public sealed partial class OperationQuestion : pb::IMessage<OperationQuestion> {
    private static readonly pb::MessageParser<OperationQuestion> _parser = new pb::MessageParser<OperationQuestion>(() => new OperationQuestion());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OperationQuestion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperationQuestion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperationQuestion(OperationQuestion other) : this() {
      questionUrl_ = other.questionUrl_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperationQuestion Clone() {
      return new OperationQuestion(this);
    }

    /// <summary>Field number for the "question_url" field.</summary>
    public const int QuestionUrlFieldNumber = 1;
    private string questionUrl_ = "";
    /// <summary>
    /// 问卷链接
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QuestionUrl {
      get { return questionUrl_; }
      set {
        questionUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OperationQuestion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OperationQuestion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QuestionUrl != other.QuestionUrl) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (QuestionUrl.Length != 0) hash ^= QuestionUrl.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (QuestionUrl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(QuestionUrl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (QuestionUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QuestionUrl);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OperationQuestion other) {
      if (other == null) {
        return;
      }
      if (other.QuestionUrl.Length != 0) {
        QuestionUrl = other.QuestionUrl;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            QuestionUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 运营活动
  /// </summary>
  public sealed partial class GameOperationInfo : pb::IMessage<GameOperationInfo> {
    private static readonly pb::MessageParser<GameOperationInfo> _parser = new pb::MessageParser<GameOperationInfo>(() => new GameOperationInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameOperationInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOperationInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOperationInfo(GameOperationInfo other) : this() {
      operationId_ = other.operationId_;
      startTs_ = other.startTs_;
      endTs_ = other.endTs_;
      Question = other.question_ != null ? other.Question.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOperationInfo Clone() {
      return new GameOperationInfo(this);
    }

    /// <summary>Field number for the "operation_id" field.</summary>
    public const int OperationIdFieldNumber = 1;
    private int operationId_;
    /// <summary>
    /// 运营活动
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OperationId {
      get { return operationId_; }
      set {
        operationId_ = value;
      }
    }

    /// <summary>Field number for the "start_ts" field.</summary>
    public const int StartTsFieldNumber = 2;
    private ulong startTs_;
    /// <summary>
    /// 开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartTs {
      get { return startTs_; }
      set {
        startTs_ = value;
      }
    }

    /// <summary>Field number for the "end_ts" field.</summary>
    public const int EndTsFieldNumber = 3;
    private ulong endTs_;
    /// <summary>
    /// 结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EndTs {
      get { return endTs_; }
      set {
        endTs_ = value;
      }
    }

    /// <summary>Field number for the "question" field.</summary>
    public const int QuestionFieldNumber = 10;
    private global::Stardom.OperationQuestion question_;
    /// <summary>
    /// 问卷数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.OperationQuestion Question {
      get { return question_; }
      set {
        question_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameOperationInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameOperationInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OperationId != other.OperationId) return false;
      if (StartTs != other.StartTs) return false;
      if (EndTs != other.EndTs) return false;
      if (!object.Equals(Question, other.Question)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OperationId != 0) hash ^= OperationId.GetHashCode();
      if (StartTs != 0UL) hash ^= StartTs.GetHashCode();
      if (EndTs != 0UL) hash ^= EndTs.GetHashCode();
      if (question_ != null) hash ^= Question.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OperationId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OperationId);
      }
      if (StartTs != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(StartTs);
      }
      if (EndTs != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(EndTs);
      }
      if (question_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Question);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OperationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OperationId);
      }
      if (StartTs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartTs);
      }
      if (EndTs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndTs);
      }
      if (question_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Question);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameOperationInfo other) {
      if (other == null) {
        return;
      }
      if (other.OperationId != 0) {
        OperationId = other.OperationId;
      }
      if (other.StartTs != 0UL) {
        StartTs = other.StartTs;
      }
      if (other.EndTs != 0UL) {
        EndTs = other.EndTs;
      }
      if (other.question_ != null) {
        if (question_ == null) {
          question_ = new global::Stardom.OperationQuestion();
        }
        Question.MergeFrom(other.Question);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OperationId = input.ReadInt32();
            break;
          }
          case 16: {
            StartTs = input.ReadUInt64();
            break;
          }
          case 24: {
            EndTs = input.ReadUInt64();
            break;
          }
          case 82: {
            if (question_ == null) {
              question_ = new global::Stardom.OperationQuestion();
            }
            input.ReadMessage(question_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 活跃值奖励领取信息
  /// </summary>
  public sealed partial class ActivityRewardStatus : pb::IMessage<ActivityRewardStatus> {
    private static readonly pb::MessageParser<ActivityRewardStatus> _parser = new pb::MessageParser<ActivityRewardStatus>(() => new ActivityRewardStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivityRewardStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityRewardStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityRewardStatus(ActivityRewardStatus other) : this() {
      valueId_ = other.valueId_;
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityRewardStatus Clone() {
      return new ActivityRewardStatus(this);
    }

    /// <summary>Field number for the "value_id" field.</summary>
    public const int ValueIdFieldNumber = 1;
    private int valueId_;
    /// <summary>
    /// 活跃领取表ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ValueId {
      get { return valueId_; }
      set {
        valueId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    /// <summary>
    /// 奖励是否获取，0未领取，1已经领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivityRewardStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivityRewardStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ValueId != other.ValueId) return false;
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ValueId != 0) hash ^= ValueId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ValueId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ValueId);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ValueId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ValueId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivityRewardStatus other) {
      if (other == null) {
        return;
      }
      if (other.ValueId != 0) {
        ValueId = other.ValueId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ValueId = input.ReadInt32();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 装备位宝石信息
  /// </summary>
  public sealed partial class GemPosInfo : pb::IMessage<GemPosInfo> {
    private static readonly pb::MessageParser<GemPosInfo> _parser = new pb::MessageParser<GemPosInfo>(() => new GemPosInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GemPosInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GemPosInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GemPosInfo(GemPosInfo other) : this() {
      gemPos_ = other.gemPos_;
      gemId_ = other.gemId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GemPosInfo Clone() {
      return new GemPosInfo(this);
    }

    /// <summary>Field number for the "gem_pos" field.</summary>
    public const int GemPosFieldNumber = 1;
    private int gemPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GemPos {
      get { return gemPos_; }
      set {
        gemPos_ = value;
      }
    }

    /// <summary>Field number for the "gem_id" field.</summary>
    public const int GemIdFieldNumber = 2;
    private int gemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GemId {
      get { return gemId_; }
      set {
        gemId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GemPosInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GemPosInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GemPos != other.GemPos) return false;
      if (GemId != other.GemId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GemPos != 0) hash ^= GemPos.GetHashCode();
      if (GemId != 0) hash ^= GemId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GemPos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GemPos);
      }
      if (GemId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GemId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GemPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GemPos);
      }
      if (GemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GemId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GemPosInfo other) {
      if (other == null) {
        return;
      }
      if (other.GemPos != 0) {
        GemPos = other.GemPos;
      }
      if (other.GemId != 0) {
        GemId = other.GemId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GemPos = input.ReadInt32();
            break;
          }
          case 16: {
            GemId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 装备位信息
  /// </summary>
  public sealed partial class EquipPosInfo : pb::IMessage<EquipPosInfo> {
    private static readonly pb::MessageParser<EquipPosInfo> _parser = new pb::MessageParser<EquipPosInfo>(() => new EquipPosInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EquipPosInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipPosInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipPosInfo(EquipPosInfo other) : this() {
      equipPos_ = other.equipPos_;
      equipUuid_ = other.equipUuid_;
      equipSkin_ = other.equipSkin_;
      equipLevel_ = other.equipLevel_;
      gemInfo_ = other.gemInfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipPosInfo Clone() {
      return new EquipPosInfo(this);
    }

    /// <summary>Field number for the "equip_pos" field.</summary>
    public const int EquipPosFieldNumber = 1;
    private int equipPos_;
    /// <summary>
    /// 装备位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EquipPos {
      get { return equipPos_; }
      set {
        equipPos_ = value;
      }
    }

    /// <summary>Field number for the "equip_uuid" field.</summary>
    public const int EquipUuidFieldNumber = 2;
    private ulong equipUuid_;
    /// <summary>
    /// 装备id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EquipUuid {
      get { return equipUuid_; }
      set {
        equipUuid_ = value;
      }
    }

    /// <summary>Field number for the "equip_skin" field.</summary>
    public const int EquipSkinFieldNumber = 3;
    private int equipSkin_;
    /// <summary>
    /// 装备皮肤
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EquipSkin {
      get { return equipSkin_; }
      set {
        equipSkin_ = value;
      }
    }

    /// <summary>Field number for the "equip_level" field.</summary>
    public const int EquipLevelFieldNumber = 4;
    private int equipLevel_;
    /// <summary>
    /// 装备位等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EquipLevel {
      get { return equipLevel_; }
      set {
        equipLevel_ = value;
      }
    }

    /// <summary>Field number for the "gem_info" field.</summary>
    public const int GemInfoFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Stardom.GemPosInfo> _repeated_gemInfo_codec
        = pb::FieldCodec.ForMessage(82, global::Stardom.GemPosInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.GemPosInfo> gemInfo_ = new pbc::RepeatedField<global::Stardom.GemPosInfo>();
    /// <summary>
    /// 装备位宝石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.GemPosInfo> GemInfo {
      get { return gemInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EquipPosInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EquipPosInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EquipPos != other.EquipPos) return false;
      if (EquipUuid != other.EquipUuid) return false;
      if (EquipSkin != other.EquipSkin) return false;
      if (EquipLevel != other.EquipLevel) return false;
      if(!gemInfo_.Equals(other.gemInfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EquipPos != 0) hash ^= EquipPos.GetHashCode();
      if (EquipUuid != 0UL) hash ^= EquipUuid.GetHashCode();
      if (EquipSkin != 0) hash ^= EquipSkin.GetHashCode();
      if (EquipLevel != 0) hash ^= EquipLevel.GetHashCode();
      hash ^= gemInfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EquipPos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EquipPos);
      }
      if (EquipUuid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(EquipUuid);
      }
      if (EquipSkin != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EquipSkin);
      }
      if (EquipLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EquipLevel);
      }
      gemInfo_.WriteTo(output, _repeated_gemInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EquipPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EquipPos);
      }
      if (EquipUuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EquipUuid);
      }
      if (EquipSkin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EquipSkin);
      }
      if (EquipLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EquipLevel);
      }
      size += gemInfo_.CalculateSize(_repeated_gemInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EquipPosInfo other) {
      if (other == null) {
        return;
      }
      if (other.EquipPos != 0) {
        EquipPos = other.EquipPos;
      }
      if (other.EquipUuid != 0UL) {
        EquipUuid = other.EquipUuid;
      }
      if (other.EquipSkin != 0) {
        EquipSkin = other.EquipSkin;
      }
      if (other.EquipLevel != 0) {
        EquipLevel = other.EquipLevel;
      }
      gemInfo_.Add(other.gemInfo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EquipPos = input.ReadInt32();
            break;
          }
          case 16: {
            EquipUuid = input.ReadUInt64();
            break;
          }
          case 24: {
            EquipSkin = input.ReadInt32();
            break;
          }
          case 32: {
            EquipLevel = input.ReadInt32();
            break;
          }
          case 82: {
            gemInfo_.AddEntriesFrom(input, _repeated_gemInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 伙伴位置信息
  /// </summary>
  public sealed partial class RolePosInfo : pb::IMessage<RolePosInfo> {
    private static readonly pb::MessageParser<RolePosInfo> _parser = new pb::MessageParser<RolePosInfo>(() => new RolePosInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RolePosInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RolePosInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RolePosInfo(RolePosInfo other) : this() {
      pos_ = other.pos_;
      roleUuid_ = other.roleUuid_;
      equipList_ = other.equipList_.Clone();
      suitIds_ = other.suitIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RolePosInfo Clone() {
      return new RolePosInfo(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private int pos_;
    /// <summary>
    /// 角色位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "role_uuid" field.</summary>
    public const int RoleUuidFieldNumber = 2;
    private ulong roleUuid_;
    /// <summary>
    /// 卡牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleUuid {
      get { return roleUuid_; }
      set {
        roleUuid_ = value;
      }
    }

    /// <summary>Field number for the "equip_list" field.</summary>
    public const int EquipListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Stardom.EquipPosInfo> _repeated_equipList_codec
        = pb::FieldCodec.ForMessage(26, global::Stardom.EquipPosInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.EquipPosInfo> equipList_ = new pbc::RepeatedField<global::Stardom.EquipPosInfo>();
    /// <summary>
    /// 装备位列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.EquipPosInfo> EquipList {
      get { return equipList_; }
    }

    /// <summary>Field number for the "suit_ids" field.</summary>
    public const int SuitIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_suitIds_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> suitIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 激活的套装id列表（暂只有前端使用）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SuitIds {
      get { return suitIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RolePosInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RolePosInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pos != other.Pos) return false;
      if (RoleUuid != other.RoleUuid) return false;
      if(!equipList_.Equals(other.equipList_)) return false;
      if(!suitIds_.Equals(other.suitIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (RoleUuid != 0UL) hash ^= RoleUuid.GetHashCode();
      hash ^= equipList_.GetHashCode();
      hash ^= suitIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pos);
      }
      if (RoleUuid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleUuid);
      }
      equipList_.WriteTo(output, _repeated_equipList_codec);
      suitIds_.WriteTo(output, _repeated_suitIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (RoleUuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleUuid);
      }
      size += equipList_.CalculateSize(_repeated_equipList_codec);
      size += suitIds_.CalculateSize(_repeated_suitIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RolePosInfo other) {
      if (other == null) {
        return;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.RoleUuid != 0UL) {
        RoleUuid = other.RoleUuid;
      }
      equipList_.Add(other.equipList_);
      suitIds_.Add(other.suitIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Pos = input.ReadInt32();
            break;
          }
          case 16: {
            RoleUuid = input.ReadUInt64();
            break;
          }
          case 26: {
            equipList_.AddEntriesFrom(input, _repeated_equipList_codec);
            break;
          }
          case 34:
          case 32: {
            suitIds_.AddEntriesFrom(input, _repeated_suitIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 布阵信息
  /// </summary>
  public sealed partial class RoleEmbattleInfo : pb::IMessage<RoleEmbattleInfo> {
    private static readonly pb::MessageParser<RoleEmbattleInfo> _parser = new pb::MessageParser<RoleEmbattleInfo>(() => new RoleEmbattleInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleEmbattleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleEmbattleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleEmbattleInfo(RoleEmbattleInfo other) : this() {
      front1_ = other.front1_;
      front2_ = other.front2_;
      back1_ = other.back1_;
      back2_ = other.back2_;
      back3_ = other.back3_;
      fansSkill1_ = other.fansSkill1_;
      fansSkill2_ = other.fansSkill2_;
      fansSkill3_ = other.fansSkill3_;
      fansSkill4_ = other.fansSkill4_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleEmbattleInfo Clone() {
      return new RoleEmbattleInfo(this);
    }

    /// <summary>Field number for the "front_1" field.</summary>
    public const int Front1FieldNumber = 1;
    private int front1_;
    /// <summary>
    /// 前1 RolePosType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Front1 {
      get { return front1_; }
      set {
        front1_ = value;
      }
    }

    /// <summary>Field number for the "front_2" field.</summary>
    public const int Front2FieldNumber = 2;
    private int front2_;
    /// <summary>
    /// 前2 RolePosType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Front2 {
      get { return front2_; }
      set {
        front2_ = value;
      }
    }

    /// <summary>Field number for the "back_1" field.</summary>
    public const int Back1FieldNumber = 3;
    private int back1_;
    /// <summary>
    /// 后1 RolePosType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Back1 {
      get { return back1_; }
      set {
        back1_ = value;
      }
    }

    /// <summary>Field number for the "back_2" field.</summary>
    public const int Back2FieldNumber = 4;
    private int back2_;
    /// <summary>
    /// 后2 RolePosType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Back2 {
      get { return back2_; }
      set {
        back2_ = value;
      }
    }

    /// <summary>Field number for the "back_3" field.</summary>
    public const int Back3FieldNumber = 5;
    private int back3_;
    /// <summary>
    /// 后3 RolePosType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Back3 {
      get { return back3_; }
      set {
        back3_ = value;
      }
    }

    /// <summary>Field number for the "fans_skill_1" field.</summary>
    public const int FansSkill1FieldNumber = 6;
    private int fansSkill1_;
    /// <summary>
    /// 粉丝技能1 FansClassType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FansSkill1 {
      get { return fansSkill1_; }
      set {
        fansSkill1_ = value;
      }
    }

    /// <summary>Field number for the "fans_skill_2" field.</summary>
    public const int FansSkill2FieldNumber = 7;
    private int fansSkill2_;
    /// <summary>
    /// 粉丝技能2 FansClassType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FansSkill2 {
      get { return fansSkill2_; }
      set {
        fansSkill2_ = value;
      }
    }

    /// <summary>Field number for the "fans_skill_3" field.</summary>
    public const int FansSkill3FieldNumber = 8;
    private int fansSkill3_;
    /// <summary>
    /// 粉丝技能3 FansClassType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FansSkill3 {
      get { return fansSkill3_; }
      set {
        fansSkill3_ = value;
      }
    }

    /// <summary>Field number for the "fans_skill_4" field.</summary>
    public const int FansSkill4FieldNumber = 9;
    private int fansSkill4_;
    /// <summary>
    /// 粉丝技能4 FansClassType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FansSkill4 {
      get { return fansSkill4_; }
      set {
        fansSkill4_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleEmbattleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleEmbattleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Front1 != other.Front1) return false;
      if (Front2 != other.Front2) return false;
      if (Back1 != other.Back1) return false;
      if (Back2 != other.Back2) return false;
      if (Back3 != other.Back3) return false;
      if (FansSkill1 != other.FansSkill1) return false;
      if (FansSkill2 != other.FansSkill2) return false;
      if (FansSkill3 != other.FansSkill3) return false;
      if (FansSkill4 != other.FansSkill4) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Front1 != 0) hash ^= Front1.GetHashCode();
      if (Front2 != 0) hash ^= Front2.GetHashCode();
      if (Back1 != 0) hash ^= Back1.GetHashCode();
      if (Back2 != 0) hash ^= Back2.GetHashCode();
      if (Back3 != 0) hash ^= Back3.GetHashCode();
      if (FansSkill1 != 0) hash ^= FansSkill1.GetHashCode();
      if (FansSkill2 != 0) hash ^= FansSkill2.GetHashCode();
      if (FansSkill3 != 0) hash ^= FansSkill3.GetHashCode();
      if (FansSkill4 != 0) hash ^= FansSkill4.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Front1 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Front1);
      }
      if (Front2 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Front2);
      }
      if (Back1 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Back1);
      }
      if (Back2 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Back2);
      }
      if (Back3 != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Back3);
      }
      if (FansSkill1 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FansSkill1);
      }
      if (FansSkill2 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FansSkill2);
      }
      if (FansSkill3 != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FansSkill3);
      }
      if (FansSkill4 != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FansSkill4);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Front1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Front1);
      }
      if (Front2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Front2);
      }
      if (Back1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Back1);
      }
      if (Back2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Back2);
      }
      if (Back3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Back3);
      }
      if (FansSkill1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FansSkill1);
      }
      if (FansSkill2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FansSkill2);
      }
      if (FansSkill3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FansSkill3);
      }
      if (FansSkill4 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FansSkill4);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleEmbattleInfo other) {
      if (other == null) {
        return;
      }
      if (other.Front1 != 0) {
        Front1 = other.Front1;
      }
      if (other.Front2 != 0) {
        Front2 = other.Front2;
      }
      if (other.Back1 != 0) {
        Back1 = other.Back1;
      }
      if (other.Back2 != 0) {
        Back2 = other.Back2;
      }
      if (other.Back3 != 0) {
        Back3 = other.Back3;
      }
      if (other.FansSkill1 != 0) {
        FansSkill1 = other.FansSkill1;
      }
      if (other.FansSkill2 != 0) {
        FansSkill2 = other.FansSkill2;
      }
      if (other.FansSkill3 != 0) {
        FansSkill3 = other.FansSkill3;
      }
      if (other.FansSkill4 != 0) {
        FansSkill4 = other.FansSkill4;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Front1 = input.ReadInt32();
            break;
          }
          case 16: {
            Front2 = input.ReadInt32();
            break;
          }
          case 24: {
            Back1 = input.ReadInt32();
            break;
          }
          case 32: {
            Back2 = input.ReadInt32();
            break;
          }
          case 40: {
            Back3 = input.ReadInt32();
            break;
          }
          case 48: {
            FansSkill1 = input.ReadInt32();
            break;
          }
          case 56: {
            FansSkill2 = input.ReadInt32();
            break;
          }
          case 64: {
            FansSkill3 = input.ReadInt32();
            break;
          }
          case 72: {
            FansSkill4 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 物品基础信息 
  /// </summary>
  public sealed partial class ItemBaseInfo : pb::IMessage<ItemBaseInfo> {
    private static readonly pb::MessageParser<ItemBaseInfo> _parser = new pb::MessageParser<ItemBaseInfo>(() => new ItemBaseInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemBaseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemBaseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemBaseInfo(ItemBaseInfo other) : this() {
      type_ = other.type_;
      uuid_ = other.uuid_;
      cid_ = other.cid_;
      bindStatus_ = other.bindStatus_;
      num_ = other.num_;
      expiration_ = other.expiration_;
      originId_ = other.originId_;
      originType_ = other.originType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemBaseInfo Clone() {
      return new ItemBaseInfo(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    /// 物品类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 2;
    private ulong uuid_;
    /// <summary>
    /// 唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "cid" field.</summary>
    public const int CidFieldNumber = 3;
    private int cid_;
    /// <summary>
    /// 配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cid {
      get { return cid_; }
      set {
        cid_ = value;
      }
    }

    /// <summary>Field number for the "bind_status" field.</summary>
    public const int BindStatusFieldNumber = 4;
    private int bindStatus_;
    /// <summary>
    /// 绑定与否
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BindStatus {
      get { return bindStatus_; }
      set {
        bindStatus_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 5;
    private int num_;
    /// <summary>
    /// 数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "expiration" field.</summary>
    public const int ExpirationFieldNumber = 6;
    private ulong expiration_;
    /// <summary>
    /// 有效期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Expiration {
      get { return expiration_; }
      set {
        expiration_ = value;
      }
    }

    /// <summary>Field number for the "origin_id" field.</summary>
    public const int OriginIdFieldNumber = 7;
    private int originId_;
    /// <summary>
    /// 未经转换前的物品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginId {
      get { return originId_; }
      set {
        originId_ = value;
      }
    }

    /// <summary>Field number for the "origin_type" field.</summary>
    public const int OriginTypeFieldNumber = 8;
    private int originType_;
    /// <summary>
    /// 未经转换前的物品类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginType {
      get { return originType_; }
      set {
        originType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemBaseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemBaseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Uuid != other.Uuid) return false;
      if (Cid != other.Cid) return false;
      if (BindStatus != other.BindStatus) return false;
      if (Num != other.Num) return false;
      if (Expiration != other.Expiration) return false;
      if (OriginId != other.OriginId) return false;
      if (OriginType != other.OriginType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Uuid != 0UL) hash ^= Uuid.GetHashCode();
      if (Cid != 0) hash ^= Cid.GetHashCode();
      if (BindStatus != 0) hash ^= BindStatus.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (Expiration != 0UL) hash ^= Expiration.GetHashCode();
      if (OriginId != 0) hash ^= OriginId.GetHashCode();
      if (OriginType != 0) hash ^= OriginType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Uuid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Uuid);
      }
      if (Cid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cid);
      }
      if (BindStatus != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BindStatus);
      }
      if (Num != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Num);
      }
      if (Expiration != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Expiration);
      }
      if (OriginId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(OriginId);
      }
      if (OriginType != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(OriginType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (Cid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cid);
      }
      if (BindStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BindStatus);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (Expiration != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Expiration);
      }
      if (OriginId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginId);
      }
      if (OriginType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemBaseInfo other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Uuid != 0UL) {
        Uuid = other.Uuid;
      }
      if (other.Cid != 0) {
        Cid = other.Cid;
      }
      if (other.BindStatus != 0) {
        BindStatus = other.BindStatus;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.Expiration != 0UL) {
        Expiration = other.Expiration;
      }
      if (other.OriginId != 0) {
        OriginId = other.OriginId;
      }
      if (other.OriginType != 0) {
        OriginType = other.OriginType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 24: {
            Cid = input.ReadInt32();
            break;
          }
          case 32: {
            BindStatus = input.ReadInt32();
            break;
          }
          case 40: {
            Num = input.ReadInt32();
            break;
          }
          case 48: {
            Expiration = input.ReadUInt64();
            break;
          }
          case 56: {
            OriginId = input.ReadInt32();
            break;
          }
          case 64: {
            OriginType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 挂机信息
  /// </summary>
  public sealed partial class IdlePlayInfo : pb::IMessage<IdlePlayInfo> {
    private static readonly pb::MessageParser<IdlePlayInfo> _parser = new pb::MessageParser<IdlePlayInfo>(() => new IdlePlayInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IdlePlayInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdlePlayInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdlePlayInfo(IdlePlayInfo other) : this() {
      freeTime_ = other.freeTime_;
      feeTime_ = other.feeTime_;
      playedTime_ = other.playedTime_;
      wasteTime_ = other.wasteTime_;
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdlePlayInfo Clone() {
      return new IdlePlayInfo(this);
    }

    /// <summary>Field number for the "free_time" field.</summary>
    public const int FreeTimeFieldNumber = 1;
    private int freeTime_;
    /// <summary>
    /// 免费加速剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeTime {
      get { return freeTime_; }
      set {
        freeTime_ = value;
      }
    }

    /// <summary>Field number for the "fee_time" field.</summary>
    public const int FeeTimeFieldNumber = 2;
    private int feeTime_;
    /// <summary>
    /// 收费加速剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FeeTime {
      get { return feeTime_; }
      set {
        feeTime_ = value;
      }
    }

    /// <summary>Field number for the "played_time" field.</summary>
    public const int PlayedTimeFieldNumber = 3;
    private int playedTime_;
    /// <summary>
    /// 已经积累的挂机时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayedTime {
      get { return playedTime_; }
      set {
        playedTime_ = value;
      }
    }

    /// <summary>Field number for the "waste_time" field.</summary>
    public const int WasteTimeFieldNumber = 4;
    private int wasteTime_;
    /// <summary>
    /// get消耗的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WasteTime {
      get { return wasteTime_; }
      set {
        wasteTime_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Stardom.ItemBaseInfo> _repeated_items_codec
        = pb::FieldCodec.ForMessage(42, global::Stardom.ItemBaseInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.ItemBaseInfo> items_ = new pbc::RepeatedField<global::Stardom.ItemBaseInfo>();
    /// <summary>
    /// 挂机物品收益信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.ItemBaseInfo> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IdlePlayInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IdlePlayInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FreeTime != other.FreeTime) return false;
      if (FeeTime != other.FeeTime) return false;
      if (PlayedTime != other.PlayedTime) return false;
      if (WasteTime != other.WasteTime) return false;
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FreeTime != 0) hash ^= FreeTime.GetHashCode();
      if (FeeTime != 0) hash ^= FeeTime.GetHashCode();
      if (PlayedTime != 0) hash ^= PlayedTime.GetHashCode();
      if (WasteTime != 0) hash ^= WasteTime.GetHashCode();
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FreeTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FreeTime);
      }
      if (FeeTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FeeTime);
      }
      if (PlayedTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlayedTime);
      }
      if (WasteTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(WasteTime);
      }
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FreeTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeTime);
      }
      if (FeeTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FeeTime);
      }
      if (PlayedTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayedTime);
      }
      if (WasteTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WasteTime);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IdlePlayInfo other) {
      if (other == null) {
        return;
      }
      if (other.FreeTime != 0) {
        FreeTime = other.FreeTime;
      }
      if (other.FeeTime != 0) {
        FeeTime = other.FeeTime;
      }
      if (other.PlayedTime != 0) {
        PlayedTime = other.PlayedTime;
      }
      if (other.WasteTime != 0) {
        WasteTime = other.WasteTime;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FreeTime = input.ReadInt32();
            break;
          }
          case 16: {
            FeeTime = input.ReadInt32();
            break;
          }
          case 24: {
            PlayedTime = input.ReadInt32();
            break;
          }
          case 32: {
            WasteTime = input.ReadInt32();
            break;
          }
          case 42: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器挂机信息
  /// </summary>
  public sealed partial class SvrIdlePlayInfo : pb::IMessage<SvrIdlePlayInfo> {
    private static readonly pb::MessageParser<SvrIdlePlayInfo> _parser = new pb::MessageParser<SvrIdlePlayInfo>(() => new SvrIdlePlayInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SvrIdlePlayInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrIdlePlayInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrIdlePlayInfo(SvrIdlePlayInfo other) : this() {
      useFreeTimes_ = other.useFreeTimes_;
      useFeeTimes_ = other.useFeeTimes_;
      isOpen_ = other.isOpen_;
      lastGetTime_ = other.lastGetTime_;
      lastCalcTime_ = other.lastCalcTime_;
      curSweepStageId_ = other.curSweepStageId_;
      curKawei_ = other.curKawei_;
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrIdlePlayInfo Clone() {
      return new SvrIdlePlayInfo(this);
    }

    /// <summary>Field number for the "use_free_times" field.</summary>
    public const int UseFreeTimesFieldNumber = 1;
    private int useFreeTimes_;
    /// <summary>
    /// 使用过的免费加速次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UseFreeTimes {
      get { return useFreeTimes_; }
      set {
        useFreeTimes_ = value;
      }
    }

    /// <summary>Field number for the "use_fee_times" field.</summary>
    public const int UseFeeTimesFieldNumber = 2;
    private int useFeeTimes_;
    /// <summary>
    /// 使用过的收费加速次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UseFeeTimes {
      get { return useFeeTimes_; }
      set {
        useFeeTimes_ = value;
      }
    }

    /// <summary>Field number for the "is_open" field.</summary>
    public const int IsOpenFieldNumber = 3;
    private int isOpen_;
    /// <summary>
    /// 挂机是否开放
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsOpen {
      get { return isOpen_; }
      set {
        isOpen_ = value;
      }
    }

    /// <summary>Field number for the "last_get_time" field.</summary>
    public const int LastGetTimeFieldNumber = 4;
    private ulong lastGetTime_;
    /// <summary>
    /// 上次收割奖励时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LastGetTime {
      get { return lastGetTime_; }
      set {
        lastGetTime_ = value;
      }
    }

    /// <summary>Field number for the "last_calc_time" field.</summary>
    public const int LastCalcTimeFieldNumber = 5;
    private ulong lastCalcTime_;
    /// <summary>
    /// 上次结算奖励时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LastCalcTime {
      get { return lastCalcTime_; }
      set {
        lastCalcTime_ = value;
      }
    }

    /// <summary>Field number for the "cur_sweep_stage_id" field.</summary>
    public const int CurSweepStageIdFieldNumber = 6;
    private int curSweepStageId_;
    /// <summary>
    /// 挂机依赖片场扫荡小关卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurSweepStageId {
      get { return curSweepStageId_; }
      set {
        curSweepStageId_ = value;
      }
    }

    /// <summary>Field number for the "cur_kawei" field.</summary>
    public const int CurKaweiFieldNumber = 7;
    private int curKawei_;
    /// <summary>
    /// 挂机依赖咖位等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurKawei {
      get { return curKawei_; }
      set {
        curKawei_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Stardom.ItemBaseInfo> _repeated_items_codec
        = pb::FieldCodec.ForMessage(66, global::Stardom.ItemBaseInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.ItemBaseInfo> items_ = new pbc::RepeatedField<global::Stardom.ItemBaseInfo>();
    /// <summary>
    /// 挂机物品收益信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.ItemBaseInfo> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SvrIdlePlayInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SvrIdlePlayInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UseFreeTimes != other.UseFreeTimes) return false;
      if (UseFeeTimes != other.UseFeeTimes) return false;
      if (IsOpen != other.IsOpen) return false;
      if (LastGetTime != other.LastGetTime) return false;
      if (LastCalcTime != other.LastCalcTime) return false;
      if (CurSweepStageId != other.CurSweepStageId) return false;
      if (CurKawei != other.CurKawei) return false;
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UseFreeTimes != 0) hash ^= UseFreeTimes.GetHashCode();
      if (UseFeeTimes != 0) hash ^= UseFeeTimes.GetHashCode();
      if (IsOpen != 0) hash ^= IsOpen.GetHashCode();
      if (LastGetTime != 0UL) hash ^= LastGetTime.GetHashCode();
      if (LastCalcTime != 0UL) hash ^= LastCalcTime.GetHashCode();
      if (CurSweepStageId != 0) hash ^= CurSweepStageId.GetHashCode();
      if (CurKawei != 0) hash ^= CurKawei.GetHashCode();
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UseFreeTimes != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UseFreeTimes);
      }
      if (UseFeeTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UseFeeTimes);
      }
      if (IsOpen != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IsOpen);
      }
      if (LastGetTime != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(LastGetTime);
      }
      if (LastCalcTime != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(LastCalcTime);
      }
      if (CurSweepStageId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CurSweepStageId);
      }
      if (CurKawei != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CurKawei);
      }
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UseFreeTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UseFreeTimes);
      }
      if (UseFeeTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UseFeeTimes);
      }
      if (IsOpen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsOpen);
      }
      if (LastGetTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LastGetTime);
      }
      if (LastCalcTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LastCalcTime);
      }
      if (CurSweepStageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurSweepStageId);
      }
      if (CurKawei != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurKawei);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SvrIdlePlayInfo other) {
      if (other == null) {
        return;
      }
      if (other.UseFreeTimes != 0) {
        UseFreeTimes = other.UseFreeTimes;
      }
      if (other.UseFeeTimes != 0) {
        UseFeeTimes = other.UseFeeTimes;
      }
      if (other.IsOpen != 0) {
        IsOpen = other.IsOpen;
      }
      if (other.LastGetTime != 0UL) {
        LastGetTime = other.LastGetTime;
      }
      if (other.LastCalcTime != 0UL) {
        LastCalcTime = other.LastCalcTime;
      }
      if (other.CurSweepStageId != 0) {
        CurSweepStageId = other.CurSweepStageId;
      }
      if (other.CurKawei != 0) {
        CurKawei = other.CurKawei;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UseFreeTimes = input.ReadInt32();
            break;
          }
          case 16: {
            UseFeeTimes = input.ReadInt32();
            break;
          }
          case 24: {
            IsOpen = input.ReadInt32();
            break;
          }
          case 32: {
            LastGetTime = input.ReadUInt64();
            break;
          }
          case 40: {
            LastCalcTime = input.ReadUInt64();
            break;
          }
          case 48: {
            CurSweepStageId = input.ReadInt32();
            break;
          }
          case 56: {
            CurKawei = input.ReadInt32();
            break;
          }
          case 66: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 道具信息
  /// </summary>
  public sealed partial class PropInfo : pb::IMessage<PropInfo> {
    private static readonly pb::MessageParser<PropInfo> _parser = new pb::MessageParser<PropInfo>(() => new PropInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PropInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropInfo(PropInfo other) : this() {
      Base = other.base_ != null ? other.Base.Clone() : null;
      useTimes_ = other.useTimes_;
      dailyNum_ = other.dailyNum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropInfo Clone() {
      return new PropInfo(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Stardom.ItemBaseInfo base_;
    /// <summary>
    /// 基础信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.ItemBaseInfo Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "use_times" field.</summary>
    public const int UseTimesFieldNumber = 2;
    private int useTimes_;
    /// <summary>
    /// 已使用次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UseTimes {
      get { return useTimes_; }
      set {
        useTimes_ = value;
      }
    }

    /// <summary>Field number for the "daily_num" field.</summary>
    public const int DailyNumFieldNumber = 3;
    private int dailyNum_;
    /// <summary>
    /// 每日获得数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DailyNum {
      get { return dailyNum_; }
      set {
        dailyNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PropInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PropInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if (UseTimes != other.UseTimes) return false;
      if (DailyNum != other.DailyNum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      if (UseTimes != 0) hash ^= UseTimes.GetHashCode();
      if (DailyNum != 0) hash ^= DailyNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (UseTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UseTimes);
      }
      if (DailyNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DailyNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (UseTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UseTimes);
      }
      if (DailyNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DailyNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PropInfo other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          base_ = new global::Stardom.ItemBaseInfo();
        }
        Base.MergeFrom(other.Base);
      }
      if (other.UseTimes != 0) {
        UseTimes = other.UseTimes;
      }
      if (other.DailyNum != 0) {
        DailyNum = other.DailyNum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (base_ == null) {
              base_ = new global::Stardom.ItemBaseInfo();
            }
            input.ReadMessage(base_);
            break;
          }
          case 16: {
            UseTimes = input.ReadInt32();
            break;
          }
          case 24: {
            DailyNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 卡牌角色技能信息
  /// </summary>
  public sealed partial class RoleSkillInfo : pb::IMessage<RoleSkillInfo> {
    private static readonly pb::MessageParser<RoleSkillInfo> _parser = new pb::MessageParser<RoleSkillInfo>(() => new RoleSkillInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleSkillInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleSkillInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleSkillInfo(RoleSkillInfo other) : this() {
      skillId_ = other.skillId_;
      skillLevel_ = other.skillLevel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleSkillInfo Clone() {
      return new RoleSkillInfo(this);
    }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private int skillId_;
    /// <summary>
    /// 技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "skill_level" field.</summary>
    public const int SkillLevelFieldNumber = 2;
    private int skillLevel_;
    /// <summary>
    /// 技能等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillLevel {
      get { return skillLevel_; }
      set {
        skillLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleSkillInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleSkillInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkillId != other.SkillId) return false;
      if (SkillLevel != other.SkillLevel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SkillId != 0) hash ^= SkillId.GetHashCode();
      if (SkillLevel != 0) hash ^= SkillLevel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkillId);
      }
      if (SkillLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SkillLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (SkillLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleSkillInfo other) {
      if (other == null) {
        return;
      }
      if (other.SkillId != 0) {
        SkillId = other.SkillId;
      }
      if (other.SkillLevel != 0) {
        SkillLevel = other.SkillLevel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillId = input.ReadInt32();
            break;
          }
          case 16: {
            SkillLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 卡牌角色属性
  /// </summary>
  public sealed partial class RoleAttrInfo : pb::IMessage<RoleAttrInfo> {
    private static readonly pb::MessageParser<RoleAttrInfo> _parser = new pb::MessageParser<RoleAttrInfo>(() => new RoleAttrInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleAttrInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleAttrInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleAttrInfo(RoleAttrInfo other) : this() {
      roleUuid_ = other.roleUuid_;
      fightPower_ = other.fightPower_;
      hp_ = other.hp_;
      speed_ = other.speed_;
      attack_ = other.attack_;
      define_ = other.define_;
      hit_ = other.hit_;
      evade_ = other.evade_;
      crit_ = other.crit_;
      tenacity_ = other.tenacity_;
      statehit_ = other.statehit_;
      stateevade_ = other.stateevade_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleAttrInfo Clone() {
      return new RoleAttrInfo(this);
    }

    /// <summary>Field number for the "role_uuid" field.</summary>
    public const int RoleUuidFieldNumber = 1;
    private ulong roleUuid_;
    /// <summary>
    /// 卡牌uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleUuid {
      get { return roleUuid_; }
      set {
        roleUuid_ = value;
      }
    }

    /// <summary>Field number for the "fight_power" field.</summary>
    public const int FightPowerFieldNumber = 2;
    private int fightPower_;
    /// <summary>
    /// 战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FightPower {
      get { return fightPower_; }
      set {
        fightPower_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 3;
    private int hp_;
    /// <summary>
    /// 血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 4;
    private int speed_;
    /// <summary>
    /// 速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "attack" field.</summary>
    public const int AttackFieldNumber = 5;
    private int attack_;
    /// <summary>
    /// 攻击
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Attack {
      get { return attack_; }
      set {
        attack_ = value;
      }
    }

    /// <summary>Field number for the "define" field.</summary>
    public const int DefineFieldNumber = 6;
    private int define_;
    /// <summary>
    /// 防御
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Define {
      get { return define_; }
      set {
        define_ = value;
      }
    }

    /// <summary>Field number for the "hit" field.</summary>
    public const int HitFieldNumber = 7;
    private int hit_;
    /// <summary>
    /// 命中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hit {
      get { return hit_; }
      set {
        hit_ = value;
      }
    }

    /// <summary>Field number for the "evade" field.</summary>
    public const int EvadeFieldNumber = 8;
    private int evade_;
    /// <summary>
    /// 闪避
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Evade {
      get { return evade_; }
      set {
        evade_ = value;
      }
    }

    /// <summary>Field number for the "crit" field.</summary>
    public const int CritFieldNumber = 9;
    private int crit_;
    /// <summary>
    /// 暴击
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Crit {
      get { return crit_; }
      set {
        crit_ = value;
      }
    }

    /// <summary>Field number for the "tenacity" field.</summary>
    public const int TenacityFieldNumber = 10;
    private int tenacity_;
    /// <summary>
    /// 韧性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tenacity {
      get { return tenacity_; }
      set {
        tenacity_ = value;
      }
    }

    /// <summary>Field number for the "statehit" field.</summary>
    public const int StatehitFieldNumber = 11;
    private int statehit_;
    /// <summary>
    /// 状态命中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Statehit {
      get { return statehit_; }
      set {
        statehit_ = value;
      }
    }

    /// <summary>Field number for the "stateevade" field.</summary>
    public const int StateevadeFieldNumber = 12;
    private int stateevade_;
    /// <summary>
    /// 状态抵抗 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stateevade {
      get { return stateevade_; }
      set {
        stateevade_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleAttrInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleAttrInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleUuid != other.RoleUuid) return false;
      if (FightPower != other.FightPower) return false;
      if (Hp != other.Hp) return false;
      if (Speed != other.Speed) return false;
      if (Attack != other.Attack) return false;
      if (Define != other.Define) return false;
      if (Hit != other.Hit) return false;
      if (Evade != other.Evade) return false;
      if (Crit != other.Crit) return false;
      if (Tenacity != other.Tenacity) return false;
      if (Statehit != other.Statehit) return false;
      if (Stateevade != other.Stateevade) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleUuid != 0UL) hash ^= RoleUuid.GetHashCode();
      if (FightPower != 0) hash ^= FightPower.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (Attack != 0) hash ^= Attack.GetHashCode();
      if (Define != 0) hash ^= Define.GetHashCode();
      if (Hit != 0) hash ^= Hit.GetHashCode();
      if (Evade != 0) hash ^= Evade.GetHashCode();
      if (Crit != 0) hash ^= Crit.GetHashCode();
      if (Tenacity != 0) hash ^= Tenacity.GetHashCode();
      if (Statehit != 0) hash ^= Statehit.GetHashCode();
      if (Stateevade != 0) hash ^= Stateevade.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleUuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleUuid);
      }
      if (FightPower != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FightPower);
      }
      if (Hp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Hp);
      }
      if (Speed != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Speed);
      }
      if (Attack != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Attack);
      }
      if (Define != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Define);
      }
      if (Hit != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Hit);
      }
      if (Evade != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Evade);
      }
      if (Crit != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Crit);
      }
      if (Tenacity != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Tenacity);
      }
      if (Statehit != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Statehit);
      }
      if (Stateevade != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Stateevade);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleUuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleUuid);
      }
      if (FightPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FightPower);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (Attack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attack);
      }
      if (Define != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Define);
      }
      if (Hit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hit);
      }
      if (Evade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Evade);
      }
      if (Crit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Crit);
      }
      if (Tenacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tenacity);
      }
      if (Statehit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Statehit);
      }
      if (Stateevade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stateevade);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleAttrInfo other) {
      if (other == null) {
        return;
      }
      if (other.RoleUuid != 0UL) {
        RoleUuid = other.RoleUuid;
      }
      if (other.FightPower != 0) {
        FightPower = other.FightPower;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.Attack != 0) {
        Attack = other.Attack;
      }
      if (other.Define != 0) {
        Define = other.Define;
      }
      if (other.Hit != 0) {
        Hit = other.Hit;
      }
      if (other.Evade != 0) {
        Evade = other.Evade;
      }
      if (other.Crit != 0) {
        Crit = other.Crit;
      }
      if (other.Tenacity != 0) {
        Tenacity = other.Tenacity;
      }
      if (other.Statehit != 0) {
        Statehit = other.Statehit;
      }
      if (other.Stateevade != 0) {
        Stateevade = other.Stateevade;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleUuid = input.ReadUInt64();
            break;
          }
          case 16: {
            FightPower = input.ReadInt32();
            break;
          }
          case 24: {
            Hp = input.ReadInt32();
            break;
          }
          case 32: {
            Speed = input.ReadInt32();
            break;
          }
          case 40: {
            Attack = input.ReadInt32();
            break;
          }
          case 48: {
            Define = input.ReadInt32();
            break;
          }
          case 56: {
            Hit = input.ReadInt32();
            break;
          }
          case 64: {
            Evade = input.ReadInt32();
            break;
          }
          case 72: {
            Crit = input.ReadInt32();
            break;
          }
          case 80: {
            Tenacity = input.ReadInt32();
            break;
          }
          case 88: {
            Statehit = input.ReadInt32();
            break;
          }
          case 96: {
            Stateevade = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 卡牌角色升品条件
  /// </summary>
  public sealed partial class RoleQualityUpCondition : pb::IMessage<RoleQualityUpCondition> {
    private static readonly pb::MessageParser<RoleQualityUpCondition> _parser = new pb::MessageParser<RoleQualityUpCondition>(() => new RoleQualityUpCondition());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleQualityUpCondition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleQualityUpCondition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleQualityUpCondition(RoleQualityUpCondition other) : this() {
      id_ = other.id_;
      count1_ = other.count1_;
      count2_ = other.count2_;
      count3_ = other.count3_;
      isFinished_ = other.isFinished_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleQualityUpCondition Clone() {
      return new RoleQualityUpCondition(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 升级id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "count1" field.</summary>
    public const int Count1FieldNumber = 2;
    private int count1_;
    /// <summary>
    /// 条件1完成次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count1 {
      get { return count1_; }
      set {
        count1_ = value;
      }
    }

    /// <summary>Field number for the "count2" field.</summary>
    public const int Count2FieldNumber = 3;
    private int count2_;
    /// <summary>
    /// 条件2完成次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count2 {
      get { return count2_; }
      set {
        count2_ = value;
      }
    }

    /// <summary>Field number for the "count3" field.</summary>
    public const int Count3FieldNumber = 4;
    private int count3_;
    /// <summary>
    /// 条件3完成次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count3 {
      get { return count3_; }
      set {
        count3_ = value;
      }
    }

    /// <summary>Field number for the "is_finished" field.</summary>
    public const int IsFinishedFieldNumber = 5;
    private int isFinished_;
    /// <summary>
    /// 是否完成了全部条件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFinished {
      get { return isFinished_; }
      set {
        isFinished_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleQualityUpCondition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleQualityUpCondition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Count1 != other.Count1) return false;
      if (Count2 != other.Count2) return false;
      if (Count3 != other.Count3) return false;
      if (IsFinished != other.IsFinished) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Count1 != 0) hash ^= Count1.GetHashCode();
      if (Count2 != 0) hash ^= Count2.GetHashCode();
      if (Count3 != 0) hash ^= Count3.GetHashCode();
      if (IsFinished != 0) hash ^= IsFinished.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Count1 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count1);
      }
      if (Count2 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count2);
      }
      if (Count3 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Count3);
      }
      if (IsFinished != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(IsFinished);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Count1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count1);
      }
      if (Count2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count2);
      }
      if (Count3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count3);
      }
      if (IsFinished != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFinished);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleQualityUpCondition other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Count1 != 0) {
        Count1 = other.Count1;
      }
      if (other.Count2 != 0) {
        Count2 = other.Count2;
      }
      if (other.Count3 != 0) {
        Count3 = other.Count3;
      }
      if (other.IsFinished != 0) {
        IsFinished = other.IsFinished;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Count1 = input.ReadInt32();
            break;
          }
          case 24: {
            Count2 = input.ReadInt32();
            break;
          }
          case 32: {
            Count3 = input.ReadInt32();
            break;
          }
          case 40: {
            IsFinished = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 卡牌角色信息
  /// </summary>
  public sealed partial class RoleInfo : pb::IMessage<RoleInfo> {
    private static readonly pb::MessageParser<RoleInfo> _parser = new pb::MessageParser<RoleInfo>(() => new RoleInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleInfo(RoleInfo other) : this() {
      uuid_ = other.uuid_;
      cid_ = other.cid_;
      isPlayer_ = other.isPlayer_;
      level_ = other.level_;
      exp_ = other.exp_;
      skin_ = other.skin_;
      fashionHat_ = other.fashionHat_;
      fashionCloth_ = other.fashionCloth_;
      transmigration_ = other.transmigration_;
      breakthrough_ = other.breakthrough_;
      awaken_ = other.awaken_;
      usingUltimateSkill_ = other.usingUltimateSkill_;
      ultimateSkillLevel_ = other.ultimateSkillLevel_;
      unlockUltimateSkills_ = other.unlockUltimateSkills_.Clone();
      usingPassiveSkill_ = other.usingPassiveSkill_;
      passiveSkillLevel_ = other.passiveSkillLevel_;
      unlockPassiveSkills_ = other.unlockPassiveSkills_.Clone();
      isQualityChallenge_ = other.isQualityChallenge_;
      isQualityProps_ = other.isQualityProps_;
      Condition = other.condition_ != null ? other.Condition.Clone() : null;
      hpEnergize_ = other.hpEnergize_;
      speedEnergize_ = other.speedEnergize_;
      attackEnergize_ = other.attackEnergize_;
      defendEnergize_ = other.defendEnergize_;
      energizePhase_ = other.energizePhase_;
      energizeEventType_ = other.energizeEventType_;
      energizeEventTimes_ = other.energizeEventTimes_;
      energizeEventDeadtime_ = other.energizeEventDeadtime_;
      energizeCostItems_ = other.energizeCostItems_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleInfo Clone() {
      return new RoleInfo(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    /// <summary>
    /// 唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "cid" field.</summary>
    public const int CidFieldNumber = 2;
    private int cid_;
    /// <summary>
    /// 配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cid {
      get { return cid_; }
      set {
        cid_ = value;
      }
    }

    /// <summary>Field number for the "is_player" field.</summary>
    public const int IsPlayerFieldNumber = 3;
    private int isPlayer_;
    /// <summary>
    /// 是否是玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsPlayer {
      get { return isPlayer_; }
      set {
        isPlayer_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 5;
    private int exp_;
    /// <summary>
    /// 经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "skin" field.</summary>
    public const int SkinFieldNumber = 6;
    private int skin_;
    /// <summary>
    /// 非主角套装皮肤
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Skin {
      get { return skin_; }
      set {
        skin_ = value;
      }
    }

    /// <summary>Field number for the "fashion_hat" field.</summary>
    public const int FashionHatFieldNumber = 7;
    private int fashionHat_;
    /// <summary>
    /// 主角时装
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FashionHat {
      get { return fashionHat_; }
      set {
        fashionHat_ = value;
      }
    }

    /// <summary>Field number for the "fashion_cloth" field.</summary>
    public const int FashionClothFieldNumber = 8;
    private int fashionCloth_;
    /// <summary>
    /// 主角时装
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FashionCloth {
      get { return fashionCloth_; }
      set {
        fashionCloth_ = value;
      }
    }

    /// <summary>Field number for the "transmigration" field.</summary>
    public const int TransmigrationFieldNumber = 20;
    private int transmigration_;
    /// <summary>
    /// 转生重塑等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Transmigration {
      get { return transmigration_; }
      set {
        transmigration_ = value;
      }
    }

    /// <summary>Field number for the "breakthrough" field.</summary>
    public const int BreakthroughFieldNumber = 21;
    private int breakthrough_;
    /// <summary>
    /// 突破等级 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Breakthrough {
      get { return breakthrough_; }
      set {
        breakthrough_ = value;
      }
    }

    /// <summary>Field number for the "awaken" field.</summary>
    public const int AwakenFieldNumber = 22;
    private int awaken_;
    /// <summary>
    /// 觉醒等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Awaken {
      get { return awaken_; }
      set {
        awaken_ = value;
      }
    }

    /// <summary>Field number for the "using_ultimate_skill" field.</summary>
    public const int UsingUltimateSkillFieldNumber = 23;
    private int usingUltimateSkill_;
    /// <summary>
    /// 终极技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UsingUltimateSkill {
      get { return usingUltimateSkill_; }
      set {
        usingUltimateSkill_ = value;
      }
    }

    /// <summary>Field number for the "ultimate_skill_level" field.</summary>
    public const int UltimateSkillLevelFieldNumber = 24;
    private int ultimateSkillLevel_;
    /// <summary>
    /// 终极技能等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UltimateSkillLevel {
      get { return ultimateSkillLevel_; }
      set {
        ultimateSkillLevel_ = value;
      }
    }

    /// <summary>Field number for the "unlock_ultimate_skills" field.</summary>
    public const int UnlockUltimateSkillsFieldNumber = 25;
    private static readonly pb::FieldCodec<int> _repeated_unlockUltimateSkills_codec
        = pb::FieldCodec.ForInt32(202);
    private readonly pbc::RepeatedField<int> unlockUltimateSkills_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 解锁终极技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> UnlockUltimateSkills {
      get { return unlockUltimateSkills_; }
    }

    /// <summary>Field number for the "using_passive_skill" field.</summary>
    public const int UsingPassiveSkillFieldNumber = 26;
    private int usingPassiveSkill_;
    /// <summary>
    /// 使用中的被动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UsingPassiveSkill {
      get { return usingPassiveSkill_; }
      set {
        usingPassiveSkill_ = value;
      }
    }

    /// <summary>Field number for the "passive_skill_level" field.</summary>
    public const int PassiveSkillLevelFieldNumber = 27;
    private int passiveSkillLevel_;
    /// <summary>
    /// 被动技能等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PassiveSkillLevel {
      get { return passiveSkillLevel_; }
      set {
        passiveSkillLevel_ = value;
      }
    }

    /// <summary>Field number for the "unlock_passive_skills" field.</summary>
    public const int UnlockPassiveSkillsFieldNumber = 28;
    private static readonly pb::FieldCodec<int> _repeated_unlockPassiveSkills_codec
        = pb::FieldCodec.ForInt32(226);
    private readonly pbc::RepeatedField<int> unlockPassiveSkills_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 解锁被动技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> UnlockPassiveSkills {
      get { return unlockPassiveSkills_; }
    }

    /// <summary>Field number for the "is_quality_challenge" field.</summary>
    public const int IsQualityChallengeFieldNumber = 29;
    private int isQualityChallenge_;
    /// <summary>
    /// 是否已挑战晋升关卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsQualityChallenge {
      get { return isQualityChallenge_; }
      set {
        isQualityChallenge_ = value;
      }
    }

    /// <summary>Field number for the "is_quality_props" field.</summary>
    public const int IsQualityPropsFieldNumber = 30;
    private int isQualityProps_;
    /// <summary>
    /// 是否已提交晋升道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsQualityProps {
      get { return isQualityProps_; }
      set {
        isQualityProps_ = value;
      }
    }

    /// <summary>Field number for the "condition" field.</summary>
    public const int ConditionFieldNumber = 31;
    private global::Stardom.RoleQualityUpCondition condition_;
    /// <summary>
    /// 升品条件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.RoleQualityUpCondition Condition {
      get { return condition_; }
      set {
        condition_ = value;
      }
    }

    /// <summary>Field number for the "hp_energize" field.</summary>
    public const int HpEnergizeFieldNumber = 32;
    private int hpEnergize_;
    /// <summary>
    /// 卡牌赋能血量等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HpEnergize {
      get { return hpEnergize_; }
      set {
        hpEnergize_ = value;
      }
    }

    /// <summary>Field number for the "speed_energize" field.</summary>
    public const int SpeedEnergizeFieldNumber = 33;
    private int speedEnergize_;
    /// <summary>
    /// 卡牌赋能速度等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpeedEnergize {
      get { return speedEnergize_; }
      set {
        speedEnergize_ = value;
      }
    }

    /// <summary>Field number for the "attack_energize" field.</summary>
    public const int AttackEnergizeFieldNumber = 34;
    private int attackEnergize_;
    /// <summary>
    /// 卡牌赋能攻击等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackEnergize {
      get { return attackEnergize_; }
      set {
        attackEnergize_ = value;
      }
    }

    /// <summary>Field number for the "defend_energize" field.</summary>
    public const int DefendEnergizeFieldNumber = 35;
    private int defendEnergize_;
    /// <summary>
    /// 卡牌赋能防御等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefendEnergize {
      get { return defendEnergize_; }
      set {
        defendEnergize_ = value;
      }
    }

    /// <summary>Field number for the "energize_phase" field.</summary>
    public const int EnergizePhaseFieldNumber = 36;
    private int energizePhase_;
    /// <summary>
    /// 卡牌赋能阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EnergizePhase {
      get { return energizePhase_; }
      set {
        energizePhase_ = value;
      }
    }

    /// <summary>Field number for the "energize_event_type" field.</summary>
    public const int EnergizeEventTypeFieldNumber = 37;
    private int energizeEventType_;
    /// <summary>
    /// 卡牌赋能特殊事件类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EnergizeEventType {
      get { return energizeEventType_; }
      set {
        energizeEventType_ = value;
      }
    }

    /// <summary>Field number for the "energize_event_times" field.</summary>
    public const int EnergizeEventTimesFieldNumber = 38;
    private int energizeEventTimes_;
    /// <summary>
    /// 卡牌赋能特殊事件剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EnergizeEventTimes {
      get { return energizeEventTimes_; }
      set {
        energizeEventTimes_ = value;
      }
    }

    /// <summary>Field number for the "energize_event_deadtime" field.</summary>
    public const int EnergizeEventDeadtimeFieldNumber = 39;
    private ulong energizeEventDeadtime_;
    /// <summary>
    /// 卡牌赋能特殊事件时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EnergizeEventDeadtime {
      get { return energizeEventDeadtime_; }
      set {
        energizeEventDeadtime_ = value;
      }
    }

    /// <summary>Field number for the "energize_cost_items" field.</summary>
    public const int EnergizeCostItemsFieldNumber = 40;
    private static readonly pb::FieldCodec<global::Stardom.ItemBaseInfo> _repeated_energizeCostItems_codec
        = pb::FieldCodec.ForMessage(322, global::Stardom.ItemBaseInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.ItemBaseInfo> energizeCostItems_ = new pbc::RepeatedField<global::Stardom.ItemBaseInfo>();
    /// <summary>
    /// 卡牌赋能消耗物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.ItemBaseInfo> EnergizeCostItems {
      get { return energizeCostItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (Cid != other.Cid) return false;
      if (IsPlayer != other.IsPlayer) return false;
      if (Level != other.Level) return false;
      if (Exp != other.Exp) return false;
      if (Skin != other.Skin) return false;
      if (FashionHat != other.FashionHat) return false;
      if (FashionCloth != other.FashionCloth) return false;
      if (Transmigration != other.Transmigration) return false;
      if (Breakthrough != other.Breakthrough) return false;
      if (Awaken != other.Awaken) return false;
      if (UsingUltimateSkill != other.UsingUltimateSkill) return false;
      if (UltimateSkillLevel != other.UltimateSkillLevel) return false;
      if(!unlockUltimateSkills_.Equals(other.unlockUltimateSkills_)) return false;
      if (UsingPassiveSkill != other.UsingPassiveSkill) return false;
      if (PassiveSkillLevel != other.PassiveSkillLevel) return false;
      if(!unlockPassiveSkills_.Equals(other.unlockPassiveSkills_)) return false;
      if (IsQualityChallenge != other.IsQualityChallenge) return false;
      if (IsQualityProps != other.IsQualityProps) return false;
      if (!object.Equals(Condition, other.Condition)) return false;
      if (HpEnergize != other.HpEnergize) return false;
      if (SpeedEnergize != other.SpeedEnergize) return false;
      if (AttackEnergize != other.AttackEnergize) return false;
      if (DefendEnergize != other.DefendEnergize) return false;
      if (EnergizePhase != other.EnergizePhase) return false;
      if (EnergizeEventType != other.EnergizeEventType) return false;
      if (EnergizeEventTimes != other.EnergizeEventTimes) return false;
      if (EnergizeEventDeadtime != other.EnergizeEventDeadtime) return false;
      if(!energizeCostItems_.Equals(other.energizeCostItems_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid != 0UL) hash ^= Uuid.GetHashCode();
      if (Cid != 0) hash ^= Cid.GetHashCode();
      if (IsPlayer != 0) hash ^= IsPlayer.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (Skin != 0) hash ^= Skin.GetHashCode();
      if (FashionHat != 0) hash ^= FashionHat.GetHashCode();
      if (FashionCloth != 0) hash ^= FashionCloth.GetHashCode();
      if (Transmigration != 0) hash ^= Transmigration.GetHashCode();
      if (Breakthrough != 0) hash ^= Breakthrough.GetHashCode();
      if (Awaken != 0) hash ^= Awaken.GetHashCode();
      if (UsingUltimateSkill != 0) hash ^= UsingUltimateSkill.GetHashCode();
      if (UltimateSkillLevel != 0) hash ^= UltimateSkillLevel.GetHashCode();
      hash ^= unlockUltimateSkills_.GetHashCode();
      if (UsingPassiveSkill != 0) hash ^= UsingPassiveSkill.GetHashCode();
      if (PassiveSkillLevel != 0) hash ^= PassiveSkillLevel.GetHashCode();
      hash ^= unlockPassiveSkills_.GetHashCode();
      if (IsQualityChallenge != 0) hash ^= IsQualityChallenge.GetHashCode();
      if (IsQualityProps != 0) hash ^= IsQualityProps.GetHashCode();
      if (condition_ != null) hash ^= Condition.GetHashCode();
      if (HpEnergize != 0) hash ^= HpEnergize.GetHashCode();
      if (SpeedEnergize != 0) hash ^= SpeedEnergize.GetHashCode();
      if (AttackEnergize != 0) hash ^= AttackEnergize.GetHashCode();
      if (DefendEnergize != 0) hash ^= DefendEnergize.GetHashCode();
      if (EnergizePhase != 0) hash ^= EnergizePhase.GetHashCode();
      if (EnergizeEventType != 0) hash ^= EnergizeEventType.GetHashCode();
      if (EnergizeEventTimes != 0) hash ^= EnergizeEventTimes.GetHashCode();
      if (EnergizeEventDeadtime != 0UL) hash ^= EnergizeEventDeadtime.GetHashCode();
      hash ^= energizeCostItems_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      if (Cid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cid);
      }
      if (IsPlayer != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IsPlayer);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Exp);
      }
      if (Skin != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Skin);
      }
      if (FashionHat != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FashionHat);
      }
      if (FashionCloth != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FashionCloth);
      }
      if (Transmigration != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Transmigration);
      }
      if (Breakthrough != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(Breakthrough);
      }
      if (Awaken != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(Awaken);
      }
      if (UsingUltimateSkill != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(UsingUltimateSkill);
      }
      if (UltimateSkillLevel != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(UltimateSkillLevel);
      }
      unlockUltimateSkills_.WriteTo(output, _repeated_unlockUltimateSkills_codec);
      if (UsingPassiveSkill != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(UsingPassiveSkill);
      }
      if (PassiveSkillLevel != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(PassiveSkillLevel);
      }
      unlockPassiveSkills_.WriteTo(output, _repeated_unlockPassiveSkills_codec);
      if (IsQualityChallenge != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(IsQualityChallenge);
      }
      if (IsQualityProps != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(IsQualityProps);
      }
      if (condition_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(Condition);
      }
      if (HpEnergize != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(HpEnergize);
      }
      if (SpeedEnergize != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(SpeedEnergize);
      }
      if (AttackEnergize != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(AttackEnergize);
      }
      if (DefendEnergize != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(DefendEnergize);
      }
      if (EnergizePhase != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(EnergizePhase);
      }
      if (EnergizeEventType != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(EnergizeEventType);
      }
      if (EnergizeEventTimes != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(EnergizeEventTimes);
      }
      if (EnergizeEventDeadtime != 0UL) {
        output.WriteRawTag(184, 2);
        output.WriteUInt64(EnergizeEventDeadtime);
      }
      energizeCostItems_.WriteTo(output, _repeated_energizeCostItems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (Cid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cid);
      }
      if (IsPlayer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsPlayer);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (Skin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Skin);
      }
      if (FashionHat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FashionHat);
      }
      if (FashionCloth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FashionCloth);
      }
      if (Transmigration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Transmigration);
      }
      if (Breakthrough != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Breakthrough);
      }
      if (Awaken != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Awaken);
      }
      if (UsingUltimateSkill != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UsingUltimateSkill);
      }
      if (UltimateSkillLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UltimateSkillLevel);
      }
      size += unlockUltimateSkills_.CalculateSize(_repeated_unlockUltimateSkills_codec);
      if (UsingPassiveSkill != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UsingPassiveSkill);
      }
      if (PassiveSkillLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PassiveSkillLevel);
      }
      size += unlockPassiveSkills_.CalculateSize(_repeated_unlockPassiveSkills_codec);
      if (IsQualityChallenge != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsQualityChallenge);
      }
      if (IsQualityProps != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsQualityProps);
      }
      if (condition_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Condition);
      }
      if (HpEnergize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HpEnergize);
      }
      if (SpeedEnergize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpeedEnergize);
      }
      if (AttackEnergize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AttackEnergize);
      }
      if (DefendEnergize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefendEnergize);
      }
      if (EnergizePhase != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EnergizePhase);
      }
      if (EnergizeEventType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EnergizeEventType);
      }
      if (EnergizeEventTimes != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EnergizeEventTimes);
      }
      if (EnergizeEventDeadtime != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(EnergizeEventDeadtime);
      }
      size += energizeCostItems_.CalculateSize(_repeated_energizeCostItems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uuid != 0UL) {
        Uuid = other.Uuid;
      }
      if (other.Cid != 0) {
        Cid = other.Cid;
      }
      if (other.IsPlayer != 0) {
        IsPlayer = other.IsPlayer;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.Skin != 0) {
        Skin = other.Skin;
      }
      if (other.FashionHat != 0) {
        FashionHat = other.FashionHat;
      }
      if (other.FashionCloth != 0) {
        FashionCloth = other.FashionCloth;
      }
      if (other.Transmigration != 0) {
        Transmigration = other.Transmigration;
      }
      if (other.Breakthrough != 0) {
        Breakthrough = other.Breakthrough;
      }
      if (other.Awaken != 0) {
        Awaken = other.Awaken;
      }
      if (other.UsingUltimateSkill != 0) {
        UsingUltimateSkill = other.UsingUltimateSkill;
      }
      if (other.UltimateSkillLevel != 0) {
        UltimateSkillLevel = other.UltimateSkillLevel;
      }
      unlockUltimateSkills_.Add(other.unlockUltimateSkills_);
      if (other.UsingPassiveSkill != 0) {
        UsingPassiveSkill = other.UsingPassiveSkill;
      }
      if (other.PassiveSkillLevel != 0) {
        PassiveSkillLevel = other.PassiveSkillLevel;
      }
      unlockPassiveSkills_.Add(other.unlockPassiveSkills_);
      if (other.IsQualityChallenge != 0) {
        IsQualityChallenge = other.IsQualityChallenge;
      }
      if (other.IsQualityProps != 0) {
        IsQualityProps = other.IsQualityProps;
      }
      if (other.condition_ != null) {
        if (condition_ == null) {
          condition_ = new global::Stardom.RoleQualityUpCondition();
        }
        Condition.MergeFrom(other.Condition);
      }
      if (other.HpEnergize != 0) {
        HpEnergize = other.HpEnergize;
      }
      if (other.SpeedEnergize != 0) {
        SpeedEnergize = other.SpeedEnergize;
      }
      if (other.AttackEnergize != 0) {
        AttackEnergize = other.AttackEnergize;
      }
      if (other.DefendEnergize != 0) {
        DefendEnergize = other.DefendEnergize;
      }
      if (other.EnergizePhase != 0) {
        EnergizePhase = other.EnergizePhase;
      }
      if (other.EnergizeEventType != 0) {
        EnergizeEventType = other.EnergizeEventType;
      }
      if (other.EnergizeEventTimes != 0) {
        EnergizeEventTimes = other.EnergizeEventTimes;
      }
      if (other.EnergizeEventDeadtime != 0UL) {
        EnergizeEventDeadtime = other.EnergizeEventDeadtime;
      }
      energizeCostItems_.Add(other.energizeCostItems_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 16: {
            Cid = input.ReadInt32();
            break;
          }
          case 24: {
            IsPlayer = input.ReadInt32();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
          case 40: {
            Exp = input.ReadInt32();
            break;
          }
          case 48: {
            Skin = input.ReadInt32();
            break;
          }
          case 56: {
            FashionHat = input.ReadInt32();
            break;
          }
          case 64: {
            FashionCloth = input.ReadInt32();
            break;
          }
          case 160: {
            Transmigration = input.ReadInt32();
            break;
          }
          case 168: {
            Breakthrough = input.ReadInt32();
            break;
          }
          case 176: {
            Awaken = input.ReadInt32();
            break;
          }
          case 184: {
            UsingUltimateSkill = input.ReadInt32();
            break;
          }
          case 192: {
            UltimateSkillLevel = input.ReadInt32();
            break;
          }
          case 202:
          case 200: {
            unlockUltimateSkills_.AddEntriesFrom(input, _repeated_unlockUltimateSkills_codec);
            break;
          }
          case 208: {
            UsingPassiveSkill = input.ReadInt32();
            break;
          }
          case 216: {
            PassiveSkillLevel = input.ReadInt32();
            break;
          }
          case 226:
          case 224: {
            unlockPassiveSkills_.AddEntriesFrom(input, _repeated_unlockPassiveSkills_codec);
            break;
          }
          case 232: {
            IsQualityChallenge = input.ReadInt32();
            break;
          }
          case 240: {
            IsQualityProps = input.ReadInt32();
            break;
          }
          case 250: {
            if (condition_ == null) {
              condition_ = new global::Stardom.RoleQualityUpCondition();
            }
            input.ReadMessage(condition_);
            break;
          }
          case 256: {
            HpEnergize = input.ReadInt32();
            break;
          }
          case 264: {
            SpeedEnergize = input.ReadInt32();
            break;
          }
          case 272: {
            AttackEnergize = input.ReadInt32();
            break;
          }
          case 280: {
            DefendEnergize = input.ReadInt32();
            break;
          }
          case 288: {
            EnergizePhase = input.ReadInt32();
            break;
          }
          case 296: {
            EnergizeEventType = input.ReadInt32();
            break;
          }
          case 304: {
            EnergizeEventTimes = input.ReadInt32();
            break;
          }
          case 312: {
            EnergizeEventDeadtime = input.ReadUInt64();
            break;
          }
          case 322: {
            energizeCostItems_.AddEntriesFrom(input, _repeated_energizeCostItems_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 装备信息
  /// </summary>
  public sealed partial class EquipInfo : pb::IMessage<EquipInfo> {
    private static readonly pb::MessageParser<EquipInfo> _parser = new pb::MessageParser<EquipInfo>(() => new EquipInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EquipInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipInfo(EquipInfo other) : this() {
      Base = other.base_ != null ? other.Base.Clone() : null;
      rolePos_ = other.rolePos_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipInfo Clone() {
      return new EquipInfo(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Stardom.ItemBaseInfo base_;
    /// <summary>
    /// 基础信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.ItemBaseInfo Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "role_pos" field.</summary>
    public const int RolePosFieldNumber = 2;
    private int rolePos_;
    /// <summary>
    /// 所在装备位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RolePos {
      get { return rolePos_; }
      set {
        rolePos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EquipInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EquipInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if (RolePos != other.RolePos) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      if (RolePos != 0) hash ^= RolePos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (RolePos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RolePos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (RolePos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RolePos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EquipInfo other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          base_ = new global::Stardom.ItemBaseInfo();
        }
        Base.MergeFrom(other.Base);
      }
      if (other.RolePos != 0) {
        RolePos = other.RolePos;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (base_ == null) {
              base_ = new global::Stardom.ItemBaseInfo();
            }
            input.ReadMessage(base_);
            break;
          }
          case 16: {
            RolePos = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 宝石信息
  /// </summary>
  public sealed partial class GemInfo : pb::IMessage<GemInfo> {
    private static readonly pb::MessageParser<GemInfo> _parser = new pb::MessageParser<GemInfo>(() => new GemInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GemInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GemInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GemInfo(GemInfo other) : this() {
      Base = other.base_ != null ? other.Base.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GemInfo Clone() {
      return new GemInfo(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Stardom.ItemBaseInfo base_;
    /// <summary>
    /// 基础信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.ItemBaseInfo Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GemInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GemInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GemInfo other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          base_ = new global::Stardom.ItemBaseInfo();
        }
        Base.MergeFrom(other.Base);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (base_ == null) {
              base_ = new global::Stardom.ItemBaseInfo();
            }
            input.ReadMessage(base_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 作品演员
  /// </summary>
  public sealed partial class AVActorInfo : pb::IMessage<AVActorInfo> {
    private static readonly pb::MessageParser<AVActorInfo> _parser = new pb::MessageParser<AVActorInfo>(() => new AVActorInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AVActorInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVActorInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVActorInfo(AVActorInfo other) : this() {
      actorType_ = other.actorType_;
      roleId_ = other.roleId_;
      postId_ = other.postId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVActorInfo Clone() {
      return new AVActorInfo(this);
    }

    /// <summary>Field number for the "actor_type" field.</summary>
    public const int ActorTypeFieldNumber = 1;
    private int actorType_;
    /// <summary>
    /// 演员类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActorType {
      get { return actorType_; }
      set {
        actorType_ = value;
      }
    }

    /// <summary>Field number for the "role_id" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private int roleId_;
    /// <summary>
    /// 安排角色配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "post_id" field.</summary>
    public const int PostIdFieldNumber = 3;
    private int postId_;
    /// <summary>
    /// 演员岗位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PostId {
      get { return postId_; }
      set {
        postId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AVActorInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AVActorInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActorType != other.ActorType) return false;
      if (RoleId != other.RoleId) return false;
      if (PostId != other.PostId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActorType != 0) hash ^= ActorType.GetHashCode();
      if (RoleId != 0) hash ^= RoleId.GetHashCode();
      if (PostId != 0) hash ^= PostId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActorType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActorType);
      }
      if (RoleId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoleId);
      }
      if (PostId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PostId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActorType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActorType);
      }
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (PostId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PostId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AVActorInfo other) {
      if (other == null) {
        return;
      }
      if (other.ActorType != 0) {
        ActorType = other.ActorType;
      }
      if (other.RoleId != 0) {
        RoleId = other.RoleId;
      }
      if (other.PostId != 0) {
        PostId = other.PostId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActorType = input.ReadInt32();
            break;
          }
          case 16: {
            RoleId = input.ReadInt32();
            break;
          }
          case 24: {
            PostId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 作品事件
  /// </summary>
  public sealed partial class AVEvent : pb::IMessage<AVEvent> {
    private static readonly pb::MessageParser<AVEvent> _parser = new pb::MessageParser<AVEvent>(() => new AVEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AVEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVEvent(AVEvent other) : this() {
      eventId_ = other.eventId_;
      isHandled_ = other.isHandled_;
      eventOption_ = other.eventOption_;
      triggerTs_ = other.triggerTs_;
      subEventIds_ = other.subEventIds_.Clone();
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVEvent Clone() {
      return new AVEvent(this);
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 1;
    private int eventId_;
    /// <summary>
    /// 事件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventId {
      get { return eventId_; }
      set {
        eventId_ = value;
      }
    }

    /// <summary>Field number for the "is_handled" field.</summary>
    public const int IsHandledFieldNumber = 2;
    private int isHandled_;
    /// <summary>
    /// 是否处理完结
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsHandled {
      get { return isHandled_; }
      set {
        isHandled_ = value;
      }
    }

    /// <summary>Field number for the "event_option" field.</summary>
    public const int EventOptionFieldNumber = 3;
    private int eventOption_;
    /// <summary>
    /// 事件结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventOption {
      get { return eventOption_; }
      set {
        eventOption_ = value;
      }
    }

    /// <summary>Field number for the "trigger_ts" field.</summary>
    public const int TriggerTsFieldNumber = 4;
    private ulong triggerTs_;
    /// <summary>
    /// 触发时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TriggerTs {
      get { return triggerTs_; }
      set {
        triggerTs_ = value;
      }
    }

    /// <summary>Field number for the "sub_event_ids" field.</summary>
    public const int SubEventIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_subEventIds_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> subEventIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 子事件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SubEventIds {
      get { return subEventIds_; }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Stardom.ItemBaseInfo> _repeated_items_codec
        = pb::FieldCodec.ForMessage(50, global::Stardom.ItemBaseInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.ItemBaseInfo> items_ = new pbc::RepeatedField<global::Stardom.ItemBaseInfo>();
    /// <summary>
    /// 该事件获得物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.ItemBaseInfo> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AVEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AVEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if (IsHandled != other.IsHandled) return false;
      if (EventOption != other.EventOption) return false;
      if (TriggerTs != other.TriggerTs) return false;
      if(!subEventIds_.Equals(other.subEventIds_)) return false;
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventId != 0) hash ^= EventId.GetHashCode();
      if (IsHandled != 0) hash ^= IsHandled.GetHashCode();
      if (EventOption != 0) hash ^= EventOption.GetHashCode();
      if (TriggerTs != 0UL) hash ^= TriggerTs.GetHashCode();
      hash ^= subEventIds_.GetHashCode();
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EventId);
      }
      if (IsHandled != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(IsHandled);
      }
      if (EventOption != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EventOption);
      }
      if (TriggerTs != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(TriggerTs);
      }
      subEventIds_.WriteTo(output, _repeated_subEventIds_codec);
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventId);
      }
      if (IsHandled != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsHandled);
      }
      if (EventOption != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventOption);
      }
      if (TriggerTs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TriggerTs);
      }
      size += subEventIds_.CalculateSize(_repeated_subEventIds_codec);
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AVEvent other) {
      if (other == null) {
        return;
      }
      if (other.EventId != 0) {
        EventId = other.EventId;
      }
      if (other.IsHandled != 0) {
        IsHandled = other.IsHandled;
      }
      if (other.EventOption != 0) {
        EventOption = other.EventOption;
      }
      if (other.TriggerTs != 0UL) {
        TriggerTs = other.TriggerTs;
      }
      subEventIds_.Add(other.subEventIds_);
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EventId = input.ReadInt32();
            break;
          }
          case 16: {
            IsHandled = input.ReadInt32();
            break;
          }
          case 24: {
            EventOption = input.ReadInt32();
            break;
          }
          case 32: {
            TriggerTs = input.ReadUInt64();
            break;
          }
          case 42:
          case 40: {
            subEventIds_.AddEntriesFrom(input, _repeated_subEventIds_codec);
            break;
          }
          case 50: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 作品章节自定义信息 
  /// </summary>
  public sealed partial class AVChapterInfo : pb::IMessage<AVChapterInfo> {
    private static readonly pb::MessageParser<AVChapterInfo> _parser = new pb::MessageParser<AVChapterInfo>(() => new AVChapterInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AVChapterInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVChapterInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVChapterInfo(AVChapterInfo other) : this() {
      chapterId_ = other.chapterId_;
      status_ = other.status_;
      customName_ = other.customName_;
      customBrief_ = other.customBrief_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVChapterInfo Clone() {
      return new AVChapterInfo(this);
    }

    /// <summary>Field number for the "chapter_id" field.</summary>
    public const int ChapterIdFieldNumber = 1;
    private int chapterId_;
    /// <summary>
    /// 章节id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChapterId {
      get { return chapterId_; }
      set {
        chapterId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    /// <summary>
    /// 章节完成(0.未启动、1.制作中、2.进度满、3.已完成)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "custom_name" field.</summary>
    public const int CustomNameFieldNumber = 3;
    private string customName_ = "";
    /// <summary>
    /// 章节名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomName {
      get { return customName_; }
      set {
        customName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "custom_brief" field.</summary>
    public const int CustomBriefFieldNumber = 4;
    private string customBrief_ = "";
    /// <summary>
    /// 章节简介
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomBrief {
      get { return customBrief_; }
      set {
        customBrief_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 5;
    private ulong startTime_;
    /// <summary>
    /// 章节开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 6;
    private ulong endTime_;
    /// <summary>
    /// 章节结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AVChapterInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AVChapterInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChapterId != other.ChapterId) return false;
      if (Status != other.Status) return false;
      if (CustomName != other.CustomName) return false;
      if (CustomBrief != other.CustomBrief) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChapterId != 0) hash ^= ChapterId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (CustomName.Length != 0) hash ^= CustomName.GetHashCode();
      if (CustomBrief.Length != 0) hash ^= CustomBrief.GetHashCode();
      if (StartTime != 0UL) hash ^= StartTime.GetHashCode();
      if (EndTime != 0UL) hash ^= EndTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChapterId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChapterId);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
      if (CustomName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CustomName);
      }
      if (CustomBrief.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CustomBrief);
      }
      if (StartTime != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(StartTime);
      }
      if (EndTime != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(EndTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChapterId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (CustomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomName);
      }
      if (CustomBrief.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomBrief);
      }
      if (StartTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartTime);
      }
      if (EndTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AVChapterInfo other) {
      if (other == null) {
        return;
      }
      if (other.ChapterId != 0) {
        ChapterId = other.ChapterId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.CustomName.Length != 0) {
        CustomName = other.CustomName;
      }
      if (other.CustomBrief.Length != 0) {
        CustomBrief = other.CustomBrief;
      }
      if (other.StartTime != 0UL) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0UL) {
        EndTime = other.EndTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChapterId = input.ReadInt32();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
          case 26: {
            CustomName = input.ReadString();
            break;
          }
          case 34: {
            CustomBrief = input.ReadString();
            break;
          }
          case 40: {
            StartTime = input.ReadUInt64();
            break;
          }
          case 48: {
            EndTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 作品随机属性
  /// </summary>
  public sealed partial class AdditionAttr : pb::IMessage<AdditionAttr> {
    private static readonly pb::MessageParser<AdditionAttr> _parser = new pb::MessageParser<AdditionAttr>(() => new AdditionAttr());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdditionAttr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdditionAttr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdditionAttr(AdditionAttr other) : this() {
      attrId_ = other.attrId_;
      attrType_ = other.attrType_;
      attrValue_ = other.attrValue_;
      attrHit_ = other.attrHit_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdditionAttr Clone() {
      return new AdditionAttr(this);
    }

    /// <summary>Field number for the "attr_id" field.</summary>
    public const int AttrIdFieldNumber = 1;
    private int attrId_;
    /// <summary>
    /// 随机属性id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttrId {
      get { return attrId_; }
      set {
        attrId_ = value;
      }
    }

    /// <summary>Field number for the "attr_type" field.</summary>
    public const int AttrTypeFieldNumber = 2;
    private int attrType_;
    /// <summary>
    /// 属性类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttrType {
      get { return attrType_; }
      set {
        attrType_ = value;
      }
    }

    /// <summary>Field number for the "attr_value" field.</summary>
    public const int AttrValueFieldNumber = 3;
    private int attrValue_;
    /// <summary>
    /// 属性值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttrValue {
      get { return attrValue_; }
      set {
        attrValue_ = value;
      }
    }

    /// <summary>Field number for the "attr_hit" field.</summary>
    public const int AttrHitFieldNumber = 4;
    private int attrHit_;
    /// <summary>
    /// 属性热度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttrHit {
      get { return attrHit_; }
      set {
        attrHit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdditionAttr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdditionAttr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AttrId != other.AttrId) return false;
      if (AttrType != other.AttrType) return false;
      if (AttrValue != other.AttrValue) return false;
      if (AttrHit != other.AttrHit) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AttrId != 0) hash ^= AttrId.GetHashCode();
      if (AttrType != 0) hash ^= AttrType.GetHashCode();
      if (AttrValue != 0) hash ^= AttrValue.GetHashCode();
      if (AttrHit != 0) hash ^= AttrHit.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AttrId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AttrId);
      }
      if (AttrType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AttrType);
      }
      if (AttrValue != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AttrValue);
      }
      if (AttrHit != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AttrHit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttrId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttrId);
      }
      if (AttrType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttrType);
      }
      if (AttrValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttrValue);
      }
      if (AttrHit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttrHit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdditionAttr other) {
      if (other == null) {
        return;
      }
      if (other.AttrId != 0) {
        AttrId = other.AttrId;
      }
      if (other.AttrType != 0) {
        AttrType = other.AttrType;
      }
      if (other.AttrValue != 0) {
        AttrValue = other.AttrValue;
      }
      if (other.AttrHit != 0) {
        AttrHit = other.AttrHit;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AttrId = input.ReadInt32();
            break;
          }
          case 16: {
            AttrType = input.ReadInt32();
            break;
          }
          case 24: {
            AttrValue = input.ReadInt32();
            break;
          }
          case 32: {
            AttrHit = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 作品礼物信息
  /// </summary>
  public sealed partial class AVGiftsInfo : pb::IMessage<AVGiftsInfo> {
    private static readonly pb::MessageParser<AVGiftsInfo> _parser = new pb::MessageParser<AVGiftsInfo>(() => new AVGiftsInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AVGiftsInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVGiftsInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVGiftsInfo(AVGiftsInfo other) : this() {
      worksUuid_ = other.worksUuid_;
      dropId_ = other.dropId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVGiftsInfo Clone() {
      return new AVGiftsInfo(this);
    }

    /// <summary>Field number for the "works_uuid" field.</summary>
    public const int WorksUuidFieldNumber = 1;
    private ulong worksUuid_;
    /// <summary>
    /// 作品 uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong WorksUuid {
      get { return worksUuid_; }
      set {
        worksUuid_ = value;
      }
    }

    /// <summary>Field number for the "drop_id" field.</summary>
    public const int DropIdFieldNumber = 2;
    private int dropId_;
    /// <summary>
    /// 掉落 id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DropId {
      get { return dropId_; }
      set {
        dropId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AVGiftsInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AVGiftsInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WorksUuid != other.WorksUuid) return false;
      if (DropId != other.DropId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WorksUuid != 0UL) hash ^= WorksUuid.GetHashCode();
      if (DropId != 0) hash ^= DropId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WorksUuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(WorksUuid);
      }
      if (DropId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DropId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorksUuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WorksUuid);
      }
      if (DropId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DropId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AVGiftsInfo other) {
      if (other == null) {
        return;
      }
      if (other.WorksUuid != 0UL) {
        WorksUuid = other.WorksUuid;
      }
      if (other.DropId != 0) {
        DropId = other.DropId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            WorksUuid = input.ReadUInt64();
            break;
          }
          case 16: {
            DropId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 音影作品
  /// </summary>
  public sealed partial class AVWorkInfo : pb::IMessage<AVWorkInfo> {
    private static readonly pb::MessageParser<AVWorkInfo> _parser = new pb::MessageParser<AVWorkInfo>(() => new AVWorkInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AVWorkInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkInfo(AVWorkInfo other) : this() {
      uuid_ = other.uuid_;
      cid_ = other.cid_;
      status_ = other.status_;
      avName_ = other.avName_;
      avBrief_ = other.avBrief_;
      TempAttr = other.tempAttr_ != null ? other.TempAttr.Clone() : null;
      AttrInfo = other.attrInfo_ != null ? other.AttrInfo.Clone() : null;
      events_ = other.events_.Clone();
      actors_ = other.actors_.Clone();
      chapterInfo_ = other.chapterInfo_.Clone();
      fightPower_ = other.fightPower_;
      starLevel_ = other.starLevel_;
      discussDegree_ = other.discussDegree_;
      discConsumeNums_ = other.discConsumeNums_.Clone();
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkInfo Clone() {
      return new AVWorkInfo(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    /// <summary>
    /// 作品uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "cid" field.</summary>
    public const int CidFieldNumber = 2;
    private int cid_;
    /// <summary>
    /// 作品配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cid {
      get { return cid_; }
      set {
        cid_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private int status_;
    /// <summary>
    /// 作品状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "av_name" field.</summary>
    public const int AvNameFieldNumber = 4;
    private string avName_ = "";
    /// <summary>
    /// 作品名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvName {
      get { return avName_; }
      set {
        avName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "av_brief" field.</summary>
    public const int AvBriefFieldNumber = 5;
    private string avBrief_ = "";
    /// <summary>
    /// 作品简介
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvBrief {
      get { return avBrief_; }
      set {
        avBrief_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "temp_attr" field.</summary>
    public const int TempAttrFieldNumber = 6;
    private global::Stardom.AdditionAttr tempAttr_;
    /// <summary>
    /// 暂存洗属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.AdditionAttr TempAttr {
      get { return tempAttr_; }
      set {
        tempAttr_ = value;
      }
    }

    /// <summary>Field number for the "attr_info" field.</summary>
    public const int AttrInfoFieldNumber = 7;
    private global::Stardom.AdditionAttr attrInfo_;
    /// <summary>
    /// 随机属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.AdditionAttr AttrInfo {
      get { return attrInfo_; }
      set {
        attrInfo_ = value;
      }
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Stardom.AVEvent> _repeated_events_codec
        = pb::FieldCodec.ForMessage(66, global::Stardom.AVEvent.Parser);
    private readonly pbc::RepeatedField<global::Stardom.AVEvent> events_ = new pbc::RepeatedField<global::Stardom.AVEvent>();
    /// <summary>
    /// 事件列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.AVEvent> Events {
      get { return events_; }
    }

    /// <summary>Field number for the "actors" field.</summary>
    public const int ActorsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Stardom.AVActorInfo> _repeated_actors_codec
        = pb::FieldCodec.ForMessage(74, global::Stardom.AVActorInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.AVActorInfo> actors_ = new pbc::RepeatedField<global::Stardom.AVActorInfo>();
    /// <summary>
    /// 演员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.AVActorInfo> Actors {
      get { return actors_; }
    }

    /// <summary>Field number for the "chapter_info" field.</summary>
    public const int ChapterInfoFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Stardom.AVChapterInfo> _repeated_chapterInfo_codec
        = pb::FieldCodec.ForMessage(82, global::Stardom.AVChapterInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.AVChapterInfo> chapterInfo_ = new pbc::RepeatedField<global::Stardom.AVChapterInfo>();
    /// <summary>
    /// 章节自定义信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.AVChapterInfo> ChapterInfo {
      get { return chapterInfo_; }
    }

    /// <summary>Field number for the "fight_power" field.</summary>
    public const int FightPowerFieldNumber = 11;
    private uint fightPower_;
    /// <summary>
    /// 作品增加战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FightPower {
      get { return fightPower_; }
      set {
        fightPower_ = value;
      }
    }

    /// <summary>Field number for the "star_level" field.</summary>
    public const int StarLevelFieldNumber = 12;
    private int starLevel_;
    /// <summary>
    /// 作品星级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StarLevel {
      get { return starLevel_; }
      set {
        starLevel_ = value;
      }
    }

    /// <summary>Field number for the "discuss_degree" field.</summary>
    public const int DiscussDegreeFieldNumber = 13;
    private int discussDegree_;
    /// <summary>
    /// 讨论度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DiscussDegree {
      get { return discussDegree_; }
      set {
        discussDegree_ = value;
      }
    }

    /// <summary>Field number for the "disc_consume_nums" field.</summary>
    public const int DiscConsumeNumsFieldNumber = 14;
    private static readonly pb::FieldCodec<int> _repeated_discConsumeNums_codec
        = pb::FieldCodec.ForInt32(114);
    private readonly pbc::RepeatedField<int> discConsumeNums_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 讨论度物品消耗数量(队列里面index0-2,分别对应低低中高消耗数量)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DiscConsumeNums {
      get { return discConsumeNums_; }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 15;
    private ulong startTime_;
    /// <summary>
    /// 开始拍摄时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 16;
    private ulong endTime_;
    /// <summary>
    /// 拍摄结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AVWorkInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AVWorkInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (Cid != other.Cid) return false;
      if (Status != other.Status) return false;
      if (AvName != other.AvName) return false;
      if (AvBrief != other.AvBrief) return false;
      if (!object.Equals(TempAttr, other.TempAttr)) return false;
      if (!object.Equals(AttrInfo, other.AttrInfo)) return false;
      if(!events_.Equals(other.events_)) return false;
      if(!actors_.Equals(other.actors_)) return false;
      if(!chapterInfo_.Equals(other.chapterInfo_)) return false;
      if (FightPower != other.FightPower) return false;
      if (StarLevel != other.StarLevel) return false;
      if (DiscussDegree != other.DiscussDegree) return false;
      if(!discConsumeNums_.Equals(other.discConsumeNums_)) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid != 0UL) hash ^= Uuid.GetHashCode();
      if (Cid != 0) hash ^= Cid.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (AvName.Length != 0) hash ^= AvName.GetHashCode();
      if (AvBrief.Length != 0) hash ^= AvBrief.GetHashCode();
      if (tempAttr_ != null) hash ^= TempAttr.GetHashCode();
      if (attrInfo_ != null) hash ^= AttrInfo.GetHashCode();
      hash ^= events_.GetHashCode();
      hash ^= actors_.GetHashCode();
      hash ^= chapterInfo_.GetHashCode();
      if (FightPower != 0) hash ^= FightPower.GetHashCode();
      if (StarLevel != 0) hash ^= StarLevel.GetHashCode();
      if (DiscussDegree != 0) hash ^= DiscussDegree.GetHashCode();
      hash ^= discConsumeNums_.GetHashCode();
      if (StartTime != 0UL) hash ^= StartTime.GetHashCode();
      if (EndTime != 0UL) hash ^= EndTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      if (Cid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cid);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Status);
      }
      if (AvName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AvName);
      }
      if (AvBrief.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AvBrief);
      }
      if (tempAttr_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TempAttr);
      }
      if (attrInfo_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(AttrInfo);
      }
      events_.WriteTo(output, _repeated_events_codec);
      actors_.WriteTo(output, _repeated_actors_codec);
      chapterInfo_.WriteTo(output, _repeated_chapterInfo_codec);
      if (FightPower != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(FightPower);
      }
      if (StarLevel != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(StarLevel);
      }
      if (DiscussDegree != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(DiscussDegree);
      }
      discConsumeNums_.WriteTo(output, _repeated_discConsumeNums_codec);
      if (StartTime != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(StartTime);
      }
      if (EndTime != 0UL) {
        output.WriteRawTag(128, 1);
        output.WriteUInt64(EndTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (Cid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cid);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (AvName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvName);
      }
      if (AvBrief.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvBrief);
      }
      if (tempAttr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TempAttr);
      }
      if (attrInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttrInfo);
      }
      size += events_.CalculateSize(_repeated_events_codec);
      size += actors_.CalculateSize(_repeated_actors_codec);
      size += chapterInfo_.CalculateSize(_repeated_chapterInfo_codec);
      if (FightPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FightPower);
      }
      if (StarLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StarLevel);
      }
      if (DiscussDegree != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DiscussDegree);
      }
      size += discConsumeNums_.CalculateSize(_repeated_discConsumeNums_codec);
      if (StartTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartTime);
      }
      if (EndTime != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(EndTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AVWorkInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uuid != 0UL) {
        Uuid = other.Uuid;
      }
      if (other.Cid != 0) {
        Cid = other.Cid;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.AvName.Length != 0) {
        AvName = other.AvName;
      }
      if (other.AvBrief.Length != 0) {
        AvBrief = other.AvBrief;
      }
      if (other.tempAttr_ != null) {
        if (tempAttr_ == null) {
          tempAttr_ = new global::Stardom.AdditionAttr();
        }
        TempAttr.MergeFrom(other.TempAttr);
      }
      if (other.attrInfo_ != null) {
        if (attrInfo_ == null) {
          attrInfo_ = new global::Stardom.AdditionAttr();
        }
        AttrInfo.MergeFrom(other.AttrInfo);
      }
      events_.Add(other.events_);
      actors_.Add(other.actors_);
      chapterInfo_.Add(other.chapterInfo_);
      if (other.FightPower != 0) {
        FightPower = other.FightPower;
      }
      if (other.StarLevel != 0) {
        StarLevel = other.StarLevel;
      }
      if (other.DiscussDegree != 0) {
        DiscussDegree = other.DiscussDegree;
      }
      discConsumeNums_.Add(other.discConsumeNums_);
      if (other.StartTime != 0UL) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0UL) {
        EndTime = other.EndTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 16: {
            Cid = input.ReadInt32();
            break;
          }
          case 24: {
            Status = input.ReadInt32();
            break;
          }
          case 34: {
            AvName = input.ReadString();
            break;
          }
          case 42: {
            AvBrief = input.ReadString();
            break;
          }
          case 50: {
            if (tempAttr_ == null) {
              tempAttr_ = new global::Stardom.AdditionAttr();
            }
            input.ReadMessage(tempAttr_);
            break;
          }
          case 58: {
            if (attrInfo_ == null) {
              attrInfo_ = new global::Stardom.AdditionAttr();
            }
            input.ReadMessage(attrInfo_);
            break;
          }
          case 66: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
          case 74: {
            actors_.AddEntriesFrom(input, _repeated_actors_codec);
            break;
          }
          case 82: {
            chapterInfo_.AddEntriesFrom(input, _repeated_chapterInfo_codec);
            break;
          }
          case 88: {
            FightPower = input.ReadUInt32();
            break;
          }
          case 96: {
            StarLevel = input.ReadInt32();
            break;
          }
          case 104: {
            DiscussDegree = input.ReadInt32();
            break;
          }
          case 114:
          case 112: {
            discConsumeNums_.AddEntriesFrom(input, _repeated_discConsumeNums_codec);
            break;
          }
          case 120: {
            StartTime = input.ReadUInt64();
            break;
          }
          case 128: {
            EndTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 作品条件属性
  /// </summary>
  public sealed partial class AVWorkCondAttr : pb::IMessage<AVWorkCondAttr> {
    private static readonly pb::MessageParser<AVWorkCondAttr> _parser = new pb::MessageParser<AVWorkCondAttr>(() => new AVWorkCondAttr());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AVWorkCondAttr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkCondAttr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkCondAttr(AVWorkCondAttr other) : this() {
      id_ = other.id_;
      count_ = other.count_;
      finished_ = other.finished_;
      param_ = other.param_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkCondAttr Clone() {
      return new AVWorkCondAttr(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 条件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    /// 进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "finished" field.</summary>
    public const int FinishedFieldNumber = 3;
    private int finished_;
    /// <summary>
    /// 满足
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Finished {
      get { return finished_; }
      set {
        finished_ = value;
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 4;
    private int param_;
    /// <summary>
    /// 参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Param {
      get { return param_; }
      set {
        param_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AVWorkCondAttr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AVWorkCondAttr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Count != other.Count) return false;
      if (Finished != other.Finished) return false;
      if (Param != other.Param) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Finished != 0) hash ^= Finished.GetHashCode();
      if (Param != 0) hash ^= Param.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (Finished != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Finished);
      }
      if (Param != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Param);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Finished != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Finished);
      }
      if (Param != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Param);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AVWorkCondAttr other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Finished != 0) {
        Finished = other.Finished;
      }
      if (other.Param != 0) {
        Param = other.Param;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            Finished = input.ReadInt32();
            break;
          }
          case 32: {
            Param = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 伙伴事件
  /// </summary>
  public sealed partial class PartnerEvent : pb::IMessage<PartnerEvent> {
    private static readonly pb::MessageParser<PartnerEvent> _parser = new pb::MessageParser<PartnerEvent>(() => new PartnerEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PartnerEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartnerEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartnerEvent(PartnerEvent other) : this() {
      eventId_ = other.eventId_;
      eventStatus_ = other.eventStatus_;
      eventPart_ = other.eventPart_;
      eventResult_ = other.eventResult_;
      eventDelay_ = other.eventDelay_;
      eventWaitTs_ = other.eventWaitTs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartnerEvent Clone() {
      return new PartnerEvent(this);
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 1;
    private int eventId_;
    /// <summary>
    /// 伙伴事件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventId {
      get { return eventId_; }
      set {
        eventId_ = value;
      }
    }

    /// <summary>Field number for the "event_status" field.</summary>
    public const int EventStatusFieldNumber = 2;
    private int eventStatus_;
    /// <summary>
    /// 伙伴事件处理状态(0.在队列, 1.正在发生的事件, 2.已经处理的事件)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventStatus {
      get { return eventStatus_; }
      set {
        eventStatus_ = value;
      }
    }

    /// <summary>Field number for the "event_part" field.</summary>
    public const int EventPartFieldNumber = 3;
    private int eventPart_;
    /// <summary>
    /// 和事件（1： 1事件完成、待2事件 2： 2事件完成，待1事件）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventPart {
      get { return eventPart_; }
      set {
        eventPart_ = value;
      }
    }

    /// <summary>Field number for the "event_result" field.</summary>
    public const int EventResultFieldNumber = 4;
    private int eventResult_;
    /// <summary>
    /// 事件结果（输1赢2认怂0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventResult {
      get { return eventResult_; }
      set {
        eventResult_ = value;
      }
    }

    /// <summary>Field number for the "event_delay" field.</summary>
    public const int EventDelayFieldNumber = 5;
    private ulong eventDelay_;
    /// <summary>
    /// 延期触发时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EventDelay {
      get { return eventDelay_; }
      set {
        eventDelay_ = value;
      }
    }

    /// <summary>Field number for the "event_wait_ts" field.</summary>
    public const int EventWaitTsFieldNumber = 6;
    private ulong eventWaitTs_;
    /// <summary>
    /// 可以再次挑战的时间 (不是0，生效)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EventWaitTs {
      get { return eventWaitTs_; }
      set {
        eventWaitTs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PartnerEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PartnerEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if (EventStatus != other.EventStatus) return false;
      if (EventPart != other.EventPart) return false;
      if (EventResult != other.EventResult) return false;
      if (EventDelay != other.EventDelay) return false;
      if (EventWaitTs != other.EventWaitTs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventId != 0) hash ^= EventId.GetHashCode();
      if (EventStatus != 0) hash ^= EventStatus.GetHashCode();
      if (EventPart != 0) hash ^= EventPart.GetHashCode();
      if (EventResult != 0) hash ^= EventResult.GetHashCode();
      if (EventDelay != 0UL) hash ^= EventDelay.GetHashCode();
      if (EventWaitTs != 0UL) hash ^= EventWaitTs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EventId);
      }
      if (EventStatus != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EventStatus);
      }
      if (EventPart != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EventPart);
      }
      if (EventResult != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EventResult);
      }
      if (EventDelay != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(EventDelay);
      }
      if (EventWaitTs != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(EventWaitTs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventId);
      }
      if (EventStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventStatus);
      }
      if (EventPart != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventPart);
      }
      if (EventResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventResult);
      }
      if (EventDelay != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EventDelay);
      }
      if (EventWaitTs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EventWaitTs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PartnerEvent other) {
      if (other == null) {
        return;
      }
      if (other.EventId != 0) {
        EventId = other.EventId;
      }
      if (other.EventStatus != 0) {
        EventStatus = other.EventStatus;
      }
      if (other.EventPart != 0) {
        EventPart = other.EventPart;
      }
      if (other.EventResult != 0) {
        EventResult = other.EventResult;
      }
      if (other.EventDelay != 0UL) {
        EventDelay = other.EventDelay;
      }
      if (other.EventWaitTs != 0UL) {
        EventWaitTs = other.EventWaitTs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EventId = input.ReadInt32();
            break;
          }
          case 16: {
            EventStatus = input.ReadInt32();
            break;
          }
          case 24: {
            EventPart = input.ReadInt32();
            break;
          }
          case 32: {
            EventResult = input.ReadInt32();
            break;
          }
          case 40: {
            EventDelay = input.ReadUInt64();
            break;
          }
          case 48: {
            EventWaitTs = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 伙伴关系
  /// </summary>
  public sealed partial class PartnerRelationship : pb::IMessage<PartnerRelationship> {
    private static readonly pb::MessageParser<PartnerRelationship> _parser = new pb::MessageParser<PartnerRelationship>(() => new PartnerRelationship());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PartnerRelationship> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartnerRelationship() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartnerRelationship(PartnerRelationship other) : this() {
      partnerAId_ = other.partnerAId_;
      partnerBId_ = other.partnerBId_;
      bondage_ = other.bondage_;
      bondageLevel_ = other.bondageLevel_;
      bondageName_ = other.bondageName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartnerRelationship Clone() {
      return new PartnerRelationship(this);
    }

    /// <summary>Field number for the "partner_a_id" field.</summary>
    public const int PartnerAIdFieldNumber = 1;
    private int partnerAId_;
    /// <summary>
    /// 伙伴Aid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PartnerAId {
      get { return partnerAId_; }
      set {
        partnerAId_ = value;
      }
    }

    /// <summary>Field number for the "partner_b_id" field.</summary>
    public const int PartnerBIdFieldNumber = 2;
    private int partnerBId_;
    /// <summary>
    /// 伙伴Bid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PartnerBId {
      get { return partnerBId_; }
      set {
        partnerBId_ = value;
      }
    }

    /// <summary>Field number for the "bondage" field.</summary>
    public const int BondageFieldNumber = 3;
    private int bondage_;
    /// <summary>
    /// 羁绊度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bondage {
      get { return bondage_; }
      set {
        bondage_ = value;
      }
    }

    /// <summary>Field number for the "bondage_level" field.</summary>
    public const int BondageLevelFieldNumber = 4;
    private int bondageLevel_;
    /// <summary>
    /// 羁绊度等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BondageLevel {
      get { return bondageLevel_; }
      set {
        bondageLevel_ = value;
      }
    }

    /// <summary>Field number for the "bondage_name" field.</summary>
    public const int BondageNameFieldNumber = 5;
    private string bondageName_ = "";
    /// <summary>
    /// 羁绊关系新名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BondageName {
      get { return bondageName_; }
      set {
        bondageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PartnerRelationship);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PartnerRelationship other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PartnerAId != other.PartnerAId) return false;
      if (PartnerBId != other.PartnerBId) return false;
      if (Bondage != other.Bondage) return false;
      if (BondageLevel != other.BondageLevel) return false;
      if (BondageName != other.BondageName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PartnerAId != 0) hash ^= PartnerAId.GetHashCode();
      if (PartnerBId != 0) hash ^= PartnerBId.GetHashCode();
      if (Bondage != 0) hash ^= Bondage.GetHashCode();
      if (BondageLevel != 0) hash ^= BondageLevel.GetHashCode();
      if (BondageName.Length != 0) hash ^= BondageName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PartnerAId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PartnerAId);
      }
      if (PartnerBId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PartnerBId);
      }
      if (Bondage != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Bondage);
      }
      if (BondageLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BondageLevel);
      }
      if (BondageName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BondageName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PartnerAId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PartnerAId);
      }
      if (PartnerBId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PartnerBId);
      }
      if (Bondage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bondage);
      }
      if (BondageLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BondageLevel);
      }
      if (BondageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BondageName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PartnerRelationship other) {
      if (other == null) {
        return;
      }
      if (other.PartnerAId != 0) {
        PartnerAId = other.PartnerAId;
      }
      if (other.PartnerBId != 0) {
        PartnerBId = other.PartnerBId;
      }
      if (other.Bondage != 0) {
        Bondage = other.Bondage;
      }
      if (other.BondageLevel != 0) {
        BondageLevel = other.BondageLevel;
      }
      if (other.BondageName.Length != 0) {
        BondageName = other.BondageName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PartnerAId = input.ReadInt32();
            break;
          }
          case 16: {
            PartnerBId = input.ReadInt32();
            break;
          }
          case 24: {
            Bondage = input.ReadInt32();
            break;
          }
          case 32: {
            BondageLevel = input.ReadInt32();
            break;
          }
          case 42: {
            BondageName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 伙伴相约数据
  /// </summary>
  public sealed partial class PartnerDateInfo : pb::IMessage<PartnerDateInfo> {
    private static readonly pb::MessageParser<PartnerDateInfo> _parser = new pb::MessageParser<PartnerDateInfo>(() => new PartnerDateInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PartnerDateInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartnerDateInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartnerDateInfo(PartnerDateInfo other) : this() {
      dateId_ = other.dateId_;
      versaDateId_ = other.versaDateId_;
      isUnlock_ = other.isUnlock_;
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartnerDateInfo Clone() {
      return new PartnerDateInfo(this);
    }

    /// <summary>Field number for the "date_id" field.</summary>
    public const int DateIdFieldNumber = 1;
    private int dateId_;
    /// <summary>
    /// 约会id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DateId {
      get { return dateId_; }
      set {
        dateId_ = value;
      }
    }

    /// <summary>Field number for the "versa_date_id" field.</summary>
    public const int VersaDateIdFieldNumber = 2;
    private int versaDateId_;
    /// <summary>
    /// 伙伴视角约会id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VersaDateId {
      get { return versaDateId_; }
      set {
        versaDateId_ = value;
      }
    }

    /// <summary>Field number for the "is_unlock" field.</summary>
    public const int IsUnlockFieldNumber = 3;
    private int isUnlock_;
    /// <summary>
    /// 是否已经解锁
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsUnlock {
      get { return isUnlock_; }
      set {
        isUnlock_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private int status_;
    /// <summary>
    /// 0.未阅读、1.已阅读第一封、3.已阅读所有
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PartnerDateInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PartnerDateInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DateId != other.DateId) return false;
      if (VersaDateId != other.VersaDateId) return false;
      if (IsUnlock != other.IsUnlock) return false;
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DateId != 0) hash ^= DateId.GetHashCode();
      if (VersaDateId != 0) hash ^= VersaDateId.GetHashCode();
      if (IsUnlock != 0) hash ^= IsUnlock.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DateId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DateId);
      }
      if (VersaDateId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VersaDateId);
      }
      if (IsUnlock != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IsUnlock);
      }
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DateId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DateId);
      }
      if (VersaDateId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VersaDateId);
      }
      if (IsUnlock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsUnlock);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PartnerDateInfo other) {
      if (other == null) {
        return;
      }
      if (other.DateId != 0) {
        DateId = other.DateId;
      }
      if (other.VersaDateId != 0) {
        VersaDateId = other.VersaDateId;
      }
      if (other.IsUnlock != 0) {
        IsUnlock = other.IsUnlock;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DateId = input.ReadInt32();
            break;
          }
          case 16: {
            VersaDateId = input.ReadInt32();
            break;
          }
          case 24: {
            IsUnlock = input.ReadInt32();
            break;
          }
          case 32: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 伙伴信息
  /// </summary>
  public sealed partial class PartnerInfo : pb::IMessage<PartnerInfo> {
    private static readonly pb::MessageParser<PartnerInfo> _parser = new pb::MessageParser<PartnerInfo>(() => new PartnerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PartnerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartnerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartnerInfo(PartnerInfo other) : this() {
      uuid_ = other.uuid_;
      cid_ = other.cid_;
      bondage_ = other.bondage_;
      bondageLevel_ = other.bondageLevel_;
      chatId_ = other.chatId_;
      correctChatOption_ = other.correctChatOption_;
      todayChattedIds_ = other.todayChattedIds_.Clone();
      dateInfo_ = other.dateInfo_.Clone();
      nickName_ = other.nickName_;
      bondageName_ = other.bondageName_;
      todayAddBondage_ = other.todayAddBondage_;
      greetingsTimes_ = other.greetingsTimes_.Clone();
      isTodayPlayedGame_ = other.isTodayPlayedGame_;
      gameLog_ = other.gameLog_;
      todayPlayBarTimes_ = other.todayPlayBarTimes_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartnerInfo Clone() {
      return new PartnerInfo(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    /// <summary>
    /// 伙伴uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "cid" field.</summary>
    public const int CidFieldNumber = 2;
    private int cid_;
    /// <summary>
    /// 伙伴cid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cid {
      get { return cid_; }
      set {
        cid_ = value;
      }
    }

    /// <summary>Field number for the "bondage" field.</summary>
    public const int BondageFieldNumber = 3;
    private int bondage_;
    /// <summary>
    /// 羁绊度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bondage {
      get { return bondage_; }
      set {
        bondage_ = value;
      }
    }

    /// <summary>Field number for the "bondage_level" field.</summary>
    public const int BondageLevelFieldNumber = 4;
    private int bondageLevel_;
    /// <summary>
    /// 羁绊度等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BondageLevel {
      get { return bondageLevel_; }
      set {
        bondageLevel_ = value;
      }
    }

    /// <summary>Field number for the "chat_id" field.</summary>
    public const int ChatIdFieldNumber = 6;
    private int chatId_;
    /// <summary>
    /// 当前正在进行的聊天id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChatId {
      get { return chatId_; }
      set {
        chatId_ = value;
      }
    }

    /// <summary>Field number for the "correct_chat_option" field.</summary>
    public const int CorrectChatOptionFieldNumber = 7;
    private int correctChatOption_;
    /// <summary>
    /// 0.未扫描、1.选项一是正确的答案、2.选项二是正确答案、3.隐藏选项是正确答案、4.扫描失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CorrectChatOption {
      get { return correctChatOption_; }
      set {
        correctChatOption_ = value;
      }
    }

    /// <summary>Field number for the "today_chatted_ids" field.</summary>
    public const int TodayChattedIdsFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_todayChattedIds_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> todayChattedIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 已经进行的聊天id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TodayChattedIds {
      get { return todayChattedIds_; }
    }

    /// <summary>Field number for the "date_info" field.</summary>
    public const int DateInfoFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Stardom.PartnerDateInfo> _repeated_dateInfo_codec
        = pb::FieldCodec.ForMessage(74, global::Stardom.PartnerDateInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.PartnerDateInfo> dateInfo_ = new pbc::RepeatedField<global::Stardom.PartnerDateInfo>();
    /// <summary>
    /// 约会信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.PartnerDateInfo> DateInfo {
      get { return dateInfo_; }
    }

    /// <summary>Field number for the "nick_name" field.</summary>
    public const int NickNameFieldNumber = 10;
    private string nickName_ = "";
    /// <summary>
    /// 昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bondage_name" field.</summary>
    public const int BondageNameFieldNumber = 11;
    private string bondageName_ = "";
    /// <summary>
    /// 羁绊度名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BondageName {
      get { return bondageName_; }
      set {
        bondageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "today_add_bondage" field.</summary>
    public const int TodayAddBondageFieldNumber = 12;
    private int todayAddBondage_;
    /// <summary>
    /// 今日已添加羁绊度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TodayAddBondage {
      get { return todayAddBondage_; }
      set {
        todayAddBondage_ = value;
      }
    }

    /// <summary>Field number for the "greetings_times" field.</summary>
    public const int GreetingsTimesFieldNumber = 13;
    private static readonly pb::FieldCodec<int> _repeated_greetingsTimes_codec
        = pb::FieldCodec.ForInt32(106);
    private readonly pbc::RepeatedField<int> greetingsTimes_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 问候次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> GreetingsTimes {
      get { return greetingsTimes_; }
    }

    /// <summary>Field number for the "is_today_played_game" field.</summary>
    public const int IsTodayPlayedGameFieldNumber = 14;
    private int isTodayPlayedGame_;
    /// <summary>
    /// 今天是否玩过小游戏
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsTodayPlayedGame {
      get { return isTodayPlayedGame_; }
      set {
        isTodayPlayedGame_ = value;
      }
    }

    /// <summary>Field number for the "game_log" field.</summary>
    public const int GameLogFieldNumber = 15;
    private string gameLog_ = "";
    /// <summary>
    /// 小游戏旅行日志
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameLog {
      get { return gameLog_; }
      set {
        gameLog_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "today_play_bar_times" field.</summary>
    public const int TodayPlayBarTimesFieldNumber = 17;
    private int todayPlayBarTimes_;
    /// <summary>
    /// 今日酒吧喝酒次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TodayPlayBarTimes {
      get { return todayPlayBarTimes_; }
      set {
        todayPlayBarTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PartnerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PartnerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (Cid != other.Cid) return false;
      if (Bondage != other.Bondage) return false;
      if (BondageLevel != other.BondageLevel) return false;
      if (ChatId != other.ChatId) return false;
      if (CorrectChatOption != other.CorrectChatOption) return false;
      if(!todayChattedIds_.Equals(other.todayChattedIds_)) return false;
      if(!dateInfo_.Equals(other.dateInfo_)) return false;
      if (NickName != other.NickName) return false;
      if (BondageName != other.BondageName) return false;
      if (TodayAddBondage != other.TodayAddBondage) return false;
      if(!greetingsTimes_.Equals(other.greetingsTimes_)) return false;
      if (IsTodayPlayedGame != other.IsTodayPlayedGame) return false;
      if (GameLog != other.GameLog) return false;
      if (TodayPlayBarTimes != other.TodayPlayBarTimes) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid != 0UL) hash ^= Uuid.GetHashCode();
      if (Cid != 0) hash ^= Cid.GetHashCode();
      if (Bondage != 0) hash ^= Bondage.GetHashCode();
      if (BondageLevel != 0) hash ^= BondageLevel.GetHashCode();
      if (ChatId != 0) hash ^= ChatId.GetHashCode();
      if (CorrectChatOption != 0) hash ^= CorrectChatOption.GetHashCode();
      hash ^= todayChattedIds_.GetHashCode();
      hash ^= dateInfo_.GetHashCode();
      if (NickName.Length != 0) hash ^= NickName.GetHashCode();
      if (BondageName.Length != 0) hash ^= BondageName.GetHashCode();
      if (TodayAddBondage != 0) hash ^= TodayAddBondage.GetHashCode();
      hash ^= greetingsTimes_.GetHashCode();
      if (IsTodayPlayedGame != 0) hash ^= IsTodayPlayedGame.GetHashCode();
      if (GameLog.Length != 0) hash ^= GameLog.GetHashCode();
      if (TodayPlayBarTimes != 0) hash ^= TodayPlayBarTimes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      if (Cid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cid);
      }
      if (Bondage != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Bondage);
      }
      if (BondageLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BondageLevel);
      }
      if (ChatId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ChatId);
      }
      if (CorrectChatOption != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CorrectChatOption);
      }
      todayChattedIds_.WriteTo(output, _repeated_todayChattedIds_codec);
      dateInfo_.WriteTo(output, _repeated_dateInfo_codec);
      if (NickName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(NickName);
      }
      if (BondageName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(BondageName);
      }
      if (TodayAddBondage != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(TodayAddBondage);
      }
      greetingsTimes_.WriteTo(output, _repeated_greetingsTimes_codec);
      if (IsTodayPlayedGame != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(IsTodayPlayedGame);
      }
      if (GameLog.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(GameLog);
      }
      if (TodayPlayBarTimes != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(TodayPlayBarTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (Cid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cid);
      }
      if (Bondage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bondage);
      }
      if (BondageLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BondageLevel);
      }
      if (ChatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChatId);
      }
      if (CorrectChatOption != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CorrectChatOption);
      }
      size += todayChattedIds_.CalculateSize(_repeated_todayChattedIds_codec);
      size += dateInfo_.CalculateSize(_repeated_dateInfo_codec);
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (BondageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BondageName);
      }
      if (TodayAddBondage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TodayAddBondage);
      }
      size += greetingsTimes_.CalculateSize(_repeated_greetingsTimes_codec);
      if (IsTodayPlayedGame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsTodayPlayedGame);
      }
      if (GameLog.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameLog);
      }
      if (TodayPlayBarTimes != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TodayPlayBarTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PartnerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uuid != 0UL) {
        Uuid = other.Uuid;
      }
      if (other.Cid != 0) {
        Cid = other.Cid;
      }
      if (other.Bondage != 0) {
        Bondage = other.Bondage;
      }
      if (other.BondageLevel != 0) {
        BondageLevel = other.BondageLevel;
      }
      if (other.ChatId != 0) {
        ChatId = other.ChatId;
      }
      if (other.CorrectChatOption != 0) {
        CorrectChatOption = other.CorrectChatOption;
      }
      todayChattedIds_.Add(other.todayChattedIds_);
      dateInfo_.Add(other.dateInfo_);
      if (other.NickName.Length != 0) {
        NickName = other.NickName;
      }
      if (other.BondageName.Length != 0) {
        BondageName = other.BondageName;
      }
      if (other.TodayAddBondage != 0) {
        TodayAddBondage = other.TodayAddBondage;
      }
      greetingsTimes_.Add(other.greetingsTimes_);
      if (other.IsTodayPlayedGame != 0) {
        IsTodayPlayedGame = other.IsTodayPlayedGame;
      }
      if (other.GameLog.Length != 0) {
        GameLog = other.GameLog;
      }
      if (other.TodayPlayBarTimes != 0) {
        TodayPlayBarTimes = other.TodayPlayBarTimes;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 16: {
            Cid = input.ReadInt32();
            break;
          }
          case 24: {
            Bondage = input.ReadInt32();
            break;
          }
          case 32: {
            BondageLevel = input.ReadInt32();
            break;
          }
          case 48: {
            ChatId = input.ReadInt32();
            break;
          }
          case 56: {
            CorrectChatOption = input.ReadInt32();
            break;
          }
          case 66:
          case 64: {
            todayChattedIds_.AddEntriesFrom(input, _repeated_todayChattedIds_codec);
            break;
          }
          case 74: {
            dateInfo_.AddEntriesFrom(input, _repeated_dateInfo_codec);
            break;
          }
          case 82: {
            NickName = input.ReadString();
            break;
          }
          case 90: {
            BondageName = input.ReadString();
            break;
          }
          case 96: {
            TodayAddBondage = input.ReadInt32();
            break;
          }
          case 106:
          case 104: {
            greetingsTimes_.AddEntriesFrom(input, _repeated_greetingsTimes_codec);
            break;
          }
          case 112: {
            IsTodayPlayedGame = input.ReadInt32();
            break;
          }
          case 122: {
            GameLog = input.ReadString();
            break;
          }
          case 136: {
            TodayPlayBarTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PartnerPhoto : pb::IMessage<PartnerPhoto> {
    private static readonly pb::MessageParser<PartnerPhoto> _parser = new pb::MessageParser<PartnerPhoto>(() => new PartnerPhoto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PartnerPhoto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartnerPhoto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartnerPhoto(PartnerPhoto other) : this() {
      partnerId_ = other.partnerId_;
      id_ = other.id_;
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartnerPhoto Clone() {
      return new PartnerPhoto(this);
    }

    /// <summary>Field number for the "partner_id" field.</summary>
    public const int PartnerIdFieldNumber = 1;
    private int partnerId_;
    /// <summary>
    /// 伙伴id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PartnerId {
      get { return partnerId_; }
      set {
        partnerId_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    /// <summary>
    /// photoid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private int status_;
    /// <summary>
    /// 0.未开启、1已开启
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PartnerPhoto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PartnerPhoto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PartnerId != other.PartnerId) return false;
      if (Id != other.Id) return false;
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PartnerId != 0) hash ^= PartnerId.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PartnerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PartnerId);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PartnerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PartnerId);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PartnerPhoto other) {
      if (other == null) {
        return;
      }
      if (other.PartnerId != 0) {
        PartnerId = other.PartnerId;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PartnerId = input.ReadInt32();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 24: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 伙伴委托信息
  /// </summary>
  public sealed partial class PartnerCommission : pb::IMessage<PartnerCommission> {
    private static readonly pb::MessageParser<PartnerCommission> _parser = new pb::MessageParser<PartnerCommission>(() => new PartnerCommission());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PartnerCommission> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartnerCommission() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartnerCommission(PartnerCommission other) : this() {
      principalId_ = other.principalId_;
      commissionId_ = other.commissionId_;
      commissionStatus_ = other.commissionStatus_;
      targetPartnerId_ = other.targetPartnerId_;
      settlePartnerId_ = other.settlePartnerId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartnerCommission Clone() {
      return new PartnerCommission(this);
    }

    /// <summary>Field number for the "principal_id" field.</summary>
    public const int PrincipalIdFieldNumber = 1;
    private int principalId_;
    /// <summary>
    /// 委托人伙伴id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PrincipalId {
      get { return principalId_; }
      set {
        principalId_ = value;
      }
    }

    /// <summary>Field number for the "commission_id" field.</summary>
    public const int CommissionIdFieldNumber = 2;
    private int commissionId_;
    /// <summary>
    /// 委托任务id (这里是传话id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CommissionId {
      get { return commissionId_; }
      set {
        commissionId_ = value;
      }
    }

    /// <summary>Field number for the "commission_status" field.</summary>
    public const int CommissionStatusFieldNumber = 3;
    private int commissionStatus_;
    /// <summary>
    /// 委托任务状态,0.未领取、1.已领取任务、2.完成、3.已领取奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CommissionStatus {
      get { return commissionStatus_; }
      set {
        commissionStatus_ = value;
      }
    }

    /// <summary>Field number for the "target_partner_id" field.</summary>
    public const int TargetPartnerIdFieldNumber = 4;
    private int targetPartnerId_;
    /// <summary>
    /// 需要查询对象的伙伴id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetPartnerId {
      get { return targetPartnerId_; }
      set {
        targetPartnerId_ = value;
      }
    }

    /// <summary>Field number for the "settle_partner_id" field.</summary>
    public const int SettlePartnerIdFieldNumber = 5;
    private int settlePartnerId_;
    /// <summary>
    /// 结算对象的伙伴id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SettlePartnerId {
      get { return settlePartnerId_; }
      set {
        settlePartnerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PartnerCommission);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PartnerCommission other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PrincipalId != other.PrincipalId) return false;
      if (CommissionId != other.CommissionId) return false;
      if (CommissionStatus != other.CommissionStatus) return false;
      if (TargetPartnerId != other.TargetPartnerId) return false;
      if (SettlePartnerId != other.SettlePartnerId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PrincipalId != 0) hash ^= PrincipalId.GetHashCode();
      if (CommissionId != 0) hash ^= CommissionId.GetHashCode();
      if (CommissionStatus != 0) hash ^= CommissionStatus.GetHashCode();
      if (TargetPartnerId != 0) hash ^= TargetPartnerId.GetHashCode();
      if (SettlePartnerId != 0) hash ^= SettlePartnerId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PrincipalId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PrincipalId);
      }
      if (CommissionId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CommissionId);
      }
      if (CommissionStatus != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CommissionStatus);
      }
      if (TargetPartnerId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TargetPartnerId);
      }
      if (SettlePartnerId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SettlePartnerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PrincipalId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PrincipalId);
      }
      if (CommissionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CommissionId);
      }
      if (CommissionStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CommissionStatus);
      }
      if (TargetPartnerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetPartnerId);
      }
      if (SettlePartnerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SettlePartnerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PartnerCommission other) {
      if (other == null) {
        return;
      }
      if (other.PrincipalId != 0) {
        PrincipalId = other.PrincipalId;
      }
      if (other.CommissionId != 0) {
        CommissionId = other.CommissionId;
      }
      if (other.CommissionStatus != 0) {
        CommissionStatus = other.CommissionStatus;
      }
      if (other.TargetPartnerId != 0) {
        TargetPartnerId = other.TargetPartnerId;
      }
      if (other.SettlePartnerId != 0) {
        SettlePartnerId = other.SettlePartnerId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PrincipalId = input.ReadInt32();
            break;
          }
          case 16: {
            CommissionId = input.ReadInt32();
            break;
          }
          case 24: {
            CommissionStatus = input.ReadInt32();
            break;
          }
          case 32: {
            TargetPartnerId = input.ReadInt32();
            break;
          }
          case 40: {
            SettlePartnerId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家自己的协会信息
  /// </summary>
  public sealed partial class MyGuildInfo : pb::IMessage<MyGuildInfo> {
    private static readonly pb::MessageParser<MyGuildInfo> _parser = new pb::MessageParser<MyGuildInfo>(() => new MyGuildInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MyGuildInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyGuildInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyGuildInfo(MyGuildInfo other) : this() {
      guildId_ = other.guildId_;
      dailyPayFundTimes_ = other.dailyPayFundTimes_;
      lastExitTime_ = other.lastExitTime_;
      dailyChallengeTimes_ = other.dailyChallengeTimes_;
      rewardedStage_ = other.rewardedStage_.Clone();
      applyGuilds_ = other.applyGuilds_.Clone();
      rewardedWelfareIds_ = other.rewardedWelfareIds_.Clone();
      attrSkills_ = other.attrSkills_.Clone();
      assetSkills_ = other.assetSkills_.Clone();
      dailyPresentTimes_ = other.dailyPresentTimes_;
      teaPartyAddExpTimes_ = other.teaPartyAddExpTimes_;
      cardTeaPartyAddExpTimes_ = other.cardTeaPartyAddExpTimes_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyGuildInfo Clone() {
      return new MyGuildInfo(this);
    }

    /// <summary>Field number for the "guild_id" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private ulong guildId_;
    /// <summary>
    /// 协会id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "daily_pay_fund_times" field.</summary>
    public const int DailyPayFundTimesFieldNumber = 3;
    private int dailyPayFundTimes_;
    /// <summary>
    /// 资金捐献次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DailyPayFundTimes {
      get { return dailyPayFundTimes_; }
      set {
        dailyPayFundTimes_ = value;
      }
    }

    /// <summary>Field number for the "last_exit_time" field.</summary>
    public const int LastExitTimeFieldNumber = 4;
    private ulong lastExitTime_;
    /// <summary>
    /// 最近一次退出公会时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LastExitTime {
      get { return lastExitTime_; }
      set {
        lastExitTime_ = value;
      }
    }

    /// <summary>Field number for the "daily_challenge_times" field.</summary>
    public const int DailyChallengeTimesFieldNumber = 5;
    private int dailyChallengeTimes_;
    /// <summary>
    /// 今日挑战次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DailyChallengeTimes {
      get { return dailyChallengeTimes_; }
      set {
        dailyChallengeTimes_ = value;
      }
    }

    /// <summary>Field number for the "rewarded_stage" field.</summary>
    public const int RewardedStageFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_rewardedStage_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> rewardedStage_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 已领奖的副本id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RewardedStage {
      get { return rewardedStage_; }
    }

    /// <summary>Field number for the "apply_guilds" field.</summary>
    public const int ApplyGuildsFieldNumber = 10;
    private static readonly pb::FieldCodec<ulong> _repeated_applyGuilds_codec
        = pb::FieldCodec.ForUInt64(82);
    private readonly pbc::RepeatedField<ulong> applyGuilds_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// 申请的协会列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> ApplyGuilds {
      get { return applyGuilds_; }
    }

    /// <summary>Field number for the "rewarded_welfare_ids" field.</summary>
    public const int RewardedWelfareIdsFieldNumber = 11;
    private static readonly pb::FieldCodec<int> _repeated_rewardedWelfareIds_codec
        = pb::FieldCodec.ForInt32(90);
    private readonly pbc::RepeatedField<int> rewardedWelfareIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 已领奖的协会升级福利
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RewardedWelfareIds {
      get { return rewardedWelfareIds_; }
    }

    /// <summary>Field number for the "attr_skills" field.</summary>
    public const int AttrSkillsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Stardom.GuildSkillInfo> _repeated_attrSkills_codec
        = pb::FieldCodec.ForMessage(98, global::Stardom.GuildSkillInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.GuildSkillInfo> attrSkills_ = new pbc::RepeatedField<global::Stardom.GuildSkillInfo>();
    /// <summary>
    /// 协会实力技能信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.GuildSkillInfo> AttrSkills {
      get { return attrSkills_; }
    }

    /// <summary>Field number for the "asset_skills" field.</summary>
    public const int AssetSkillsFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Stardom.GuildSkillInfo> _repeated_assetSkills_codec
        = pb::FieldCodec.ForMessage(106, global::Stardom.GuildSkillInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.GuildSkillInfo> assetSkills_ = new pbc::RepeatedField<global::Stardom.GuildSkillInfo>();
    /// <summary>
    /// 协会资源技能信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.GuildSkillInfo> AssetSkills {
      get { return assetSkills_; }
    }

    /// <summary>Field number for the "daily_present_times" field.</summary>
    public const int DailyPresentTimesFieldNumber = 14;
    private int dailyPresentTimes_;
    /// <summary>
    /// 今日赠送碎片次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DailyPresentTimes {
      get { return dailyPresentTimes_; }
      set {
        dailyPresentTimes_ = value;
      }
    }

    /// <summary>Field number for the "tea_party_add_exp_times" field.</summary>
    public const int TeaPartyAddExpTimesFieldNumber = 15;
    private int teaPartyAddExpTimes_;
    /// <summary>
    /// 今日茶会增加经验次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeaPartyAddExpTimes {
      get { return teaPartyAddExpTimes_; }
      set {
        teaPartyAddExpTimes_ = value;
      }
    }

    /// <summary>Field number for the "card_tea_party_add_exp_times" field.</summary>
    public const int CardTeaPartyAddExpTimesFieldNumber = 16;
    private int cardTeaPartyAddExpTimes_;
    /// <summary>
    /// 卡牌今日茶会增加经验次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardTeaPartyAddExpTimes {
      get { return cardTeaPartyAddExpTimes_; }
      set {
        cardTeaPartyAddExpTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MyGuildInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MyGuildInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GuildId != other.GuildId) return false;
      if (DailyPayFundTimes != other.DailyPayFundTimes) return false;
      if (LastExitTime != other.LastExitTime) return false;
      if (DailyChallengeTimes != other.DailyChallengeTimes) return false;
      if(!rewardedStage_.Equals(other.rewardedStage_)) return false;
      if(!applyGuilds_.Equals(other.applyGuilds_)) return false;
      if(!rewardedWelfareIds_.Equals(other.rewardedWelfareIds_)) return false;
      if(!attrSkills_.Equals(other.attrSkills_)) return false;
      if(!assetSkills_.Equals(other.assetSkills_)) return false;
      if (DailyPresentTimes != other.DailyPresentTimes) return false;
      if (TeaPartyAddExpTimes != other.TeaPartyAddExpTimes) return false;
      if (CardTeaPartyAddExpTimes != other.CardTeaPartyAddExpTimes) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GuildId != 0UL) hash ^= GuildId.GetHashCode();
      if (DailyPayFundTimes != 0) hash ^= DailyPayFundTimes.GetHashCode();
      if (LastExitTime != 0UL) hash ^= LastExitTime.GetHashCode();
      if (DailyChallengeTimes != 0) hash ^= DailyChallengeTimes.GetHashCode();
      hash ^= rewardedStage_.GetHashCode();
      hash ^= applyGuilds_.GetHashCode();
      hash ^= rewardedWelfareIds_.GetHashCode();
      hash ^= attrSkills_.GetHashCode();
      hash ^= assetSkills_.GetHashCode();
      if (DailyPresentTimes != 0) hash ^= DailyPresentTimes.GetHashCode();
      if (TeaPartyAddExpTimes != 0) hash ^= TeaPartyAddExpTimes.GetHashCode();
      if (CardTeaPartyAddExpTimes != 0) hash ^= CardTeaPartyAddExpTimes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GuildId);
      }
      if (DailyPayFundTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DailyPayFundTimes);
      }
      if (LastExitTime != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(LastExitTime);
      }
      if (DailyChallengeTimes != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DailyChallengeTimes);
      }
      rewardedStage_.WriteTo(output, _repeated_rewardedStage_codec);
      applyGuilds_.WriteTo(output, _repeated_applyGuilds_codec);
      rewardedWelfareIds_.WriteTo(output, _repeated_rewardedWelfareIds_codec);
      attrSkills_.WriteTo(output, _repeated_attrSkills_codec);
      assetSkills_.WriteTo(output, _repeated_assetSkills_codec);
      if (DailyPresentTimes != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(DailyPresentTimes);
      }
      if (TeaPartyAddExpTimes != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(TeaPartyAddExpTimes);
      }
      if (CardTeaPartyAddExpTimes != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(CardTeaPartyAddExpTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (DailyPayFundTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DailyPayFundTimes);
      }
      if (LastExitTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LastExitTime);
      }
      if (DailyChallengeTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DailyChallengeTimes);
      }
      size += rewardedStage_.CalculateSize(_repeated_rewardedStage_codec);
      size += applyGuilds_.CalculateSize(_repeated_applyGuilds_codec);
      size += rewardedWelfareIds_.CalculateSize(_repeated_rewardedWelfareIds_codec);
      size += attrSkills_.CalculateSize(_repeated_attrSkills_codec);
      size += assetSkills_.CalculateSize(_repeated_assetSkills_codec);
      if (DailyPresentTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DailyPresentTimes);
      }
      if (TeaPartyAddExpTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeaPartyAddExpTimes);
      }
      if (CardTeaPartyAddExpTimes != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CardTeaPartyAddExpTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MyGuildInfo other) {
      if (other == null) {
        return;
      }
      if (other.GuildId != 0UL) {
        GuildId = other.GuildId;
      }
      if (other.DailyPayFundTimes != 0) {
        DailyPayFundTimes = other.DailyPayFundTimes;
      }
      if (other.LastExitTime != 0UL) {
        LastExitTime = other.LastExitTime;
      }
      if (other.DailyChallengeTimes != 0) {
        DailyChallengeTimes = other.DailyChallengeTimes;
      }
      rewardedStage_.Add(other.rewardedStage_);
      applyGuilds_.Add(other.applyGuilds_);
      rewardedWelfareIds_.Add(other.rewardedWelfareIds_);
      attrSkills_.Add(other.attrSkills_);
      assetSkills_.Add(other.assetSkills_);
      if (other.DailyPresentTimes != 0) {
        DailyPresentTimes = other.DailyPresentTimes;
      }
      if (other.TeaPartyAddExpTimes != 0) {
        TeaPartyAddExpTimes = other.TeaPartyAddExpTimes;
      }
      if (other.CardTeaPartyAddExpTimes != 0) {
        CardTeaPartyAddExpTimes = other.CardTeaPartyAddExpTimes;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 24: {
            DailyPayFundTimes = input.ReadInt32();
            break;
          }
          case 32: {
            LastExitTime = input.ReadUInt64();
            break;
          }
          case 40: {
            DailyChallengeTimes = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            rewardedStage_.AddEntriesFrom(input, _repeated_rewardedStage_codec);
            break;
          }
          case 82:
          case 80: {
            applyGuilds_.AddEntriesFrom(input, _repeated_applyGuilds_codec);
            break;
          }
          case 90:
          case 88: {
            rewardedWelfareIds_.AddEntriesFrom(input, _repeated_rewardedWelfareIds_codec);
            break;
          }
          case 98: {
            attrSkills_.AddEntriesFrom(input, _repeated_attrSkills_codec);
            break;
          }
          case 106: {
            assetSkills_.AddEntriesFrom(input, _repeated_assetSkills_codec);
            break;
          }
          case 112: {
            DailyPresentTimes = input.ReadInt32();
            break;
          }
          case 120: {
            TeaPartyAddExpTimes = input.ReadInt32();
            break;
          }
          case 128: {
            CardTeaPartyAddExpTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 协会申请信息
  /// </summary>
  public sealed partial class GuildApplyInfo : pb::IMessage<GuildApplyInfo> {
    private static readonly pb::MessageParser<GuildApplyInfo> _parser = new pb::MessageParser<GuildApplyInfo>(() => new GuildApplyInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildApplyInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildApplyInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildApplyInfo(GuildApplyInfo other) : this() {
      playerId_ = other.playerId_;
      playerName_ = other.playerName_;
      sex_ = other.sex_;
      headId_ = other.headId_;
      level_ = other.level_;
      kawei_ = other.kawei_;
      isOnline_ = other.isOnline_;
      fightPower_ = other.fightPower_;
      pianoLevel_ = other.pianoLevel_;
      drumLevel_ = other.drumLevel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildApplyInfo Clone() {
      return new GuildApplyInfo(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    /// <summary>
    /// 申请者id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "player_name" field.</summary>
    public const int PlayerNameFieldNumber = 2;
    private string playerName_ = "";
    /// <summary>
    /// 申请者名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 3;
    private int sex_;
    /// <summary>
    /// 申请者性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "head_id" field.</summary>
    public const int HeadIdFieldNumber = 4;
    private int headId_;
    /// <summary>
    /// 申请者头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadId {
      get { return headId_; }
      set {
        headId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 5;
    private int level_;
    /// <summary>
    /// 申请者等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "kawei" field.</summary>
    public const int KaweiFieldNumber = 6;
    private int kawei_;
    /// <summary>
    /// 申请者咖位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Kawei {
      get { return kawei_; }
      set {
        kawei_ = value;
      }
    }

    /// <summary>Field number for the "is_online" field.</summary>
    public const int IsOnlineFieldNumber = 7;
    private int isOnline_;
    /// <summary>
    /// 是否在线
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsOnline {
      get { return isOnline_; }
      set {
        isOnline_ = value;
      }
    }

    /// <summary>Field number for the "fight_power" field.</summary>
    public const int FightPowerFieldNumber = 8;
    private uint fightPower_;
    /// <summary>
    /// 战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FightPower {
      get { return fightPower_; }
      set {
        fightPower_ = value;
      }
    }

    /// <summary>Field number for the "piano_level" field.</summary>
    public const int PianoLevelFieldNumber = 9;
    private int pianoLevel_;
    /// <summary>
    /// 钢琴等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PianoLevel {
      get { return pianoLevel_; }
      set {
        pianoLevel_ = value;
      }
    }

    /// <summary>Field number for the "drum_level" field.</summary>
    public const int DrumLevelFieldNumber = 10;
    private int drumLevel_;
    /// <summary>
    /// 架子鼓等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DrumLevel {
      get { return drumLevel_; }
      set {
        drumLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuildApplyInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuildApplyInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (PlayerName != other.PlayerName) return false;
      if (Sex != other.Sex) return false;
      if (HeadId != other.HeadId) return false;
      if (Level != other.Level) return false;
      if (Kawei != other.Kawei) return false;
      if (IsOnline != other.IsOnline) return false;
      if (FightPower != other.FightPower) return false;
      if (PianoLevel != other.PianoLevel) return false;
      if (DrumLevel != other.DrumLevel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (Sex != 0) hash ^= Sex.GetHashCode();
      if (HeadId != 0) hash ^= HeadId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Kawei != 0) hash ^= Kawei.GetHashCode();
      if (IsOnline != 0) hash ^= IsOnline.GetHashCode();
      if (FightPower != 0) hash ^= FightPower.GetHashCode();
      if (PianoLevel != 0) hash ^= PianoLevel.GetHashCode();
      if (DrumLevel != 0) hash ^= DrumLevel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerName);
      }
      if (Sex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Sex);
      }
      if (HeadId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HeadId);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Level);
      }
      if (Kawei != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Kawei);
      }
      if (IsOnline != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(IsOnline);
      }
      if (FightPower != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(FightPower);
      }
      if (PianoLevel != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(PianoLevel);
      }
      if (DrumLevel != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(DrumLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (HeadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Kawei != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Kawei);
      }
      if (IsOnline != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsOnline);
      }
      if (FightPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FightPower);
      }
      if (PianoLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PianoLevel);
      }
      if (DrumLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DrumLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuildApplyInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      if (other.Sex != 0) {
        Sex = other.Sex;
      }
      if (other.HeadId != 0) {
        HeadId = other.HeadId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Kawei != 0) {
        Kawei = other.Kawei;
      }
      if (other.IsOnline != 0) {
        IsOnline = other.IsOnline;
      }
      if (other.FightPower != 0) {
        FightPower = other.FightPower;
      }
      if (other.PianoLevel != 0) {
        PianoLevel = other.PianoLevel;
      }
      if (other.DrumLevel != 0) {
        DrumLevel = other.DrumLevel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 18: {
            PlayerName = input.ReadString();
            break;
          }
          case 24: {
            Sex = input.ReadInt32();
            break;
          }
          case 32: {
            HeadId = input.ReadInt32();
            break;
          }
          case 40: {
            Level = input.ReadInt32();
            break;
          }
          case 48: {
            Kawei = input.ReadInt32();
            break;
          }
          case 56: {
            IsOnline = input.ReadInt32();
            break;
          }
          case 64: {
            FightPower = input.ReadUInt32();
            break;
          }
          case 72: {
            PianoLevel = input.ReadInt32();
            break;
          }
          case 80: {
            DrumLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 建筑信息
  /// </summary>
  public sealed partial class GuildBuildingInfo : pb::IMessage<GuildBuildingInfo> {
    private static readonly pb::MessageParser<GuildBuildingInfo> _parser = new pb::MessageParser<GuildBuildingInfo>(() => new GuildBuildingInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildBuildingInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildBuildingInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildBuildingInfo(GuildBuildingInfo other) : this() {
      buildType_ = other.buildType_;
      level_ = other.level_;
      buildCompleteTs_ = other.buildCompleteTs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildBuildingInfo Clone() {
      return new GuildBuildingInfo(this);
    }

    /// <summary>Field number for the "build_type" field.</summary>
    public const int BuildTypeFieldNumber = 1;
    private int buildType_;
    /// <summary>
    /// 建筑类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuildType {
      get { return buildType_; }
      set {
        buildType_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    /// <summary>
    /// 建筑等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "build_complete_ts" field.</summary>
    public const int BuildCompleteTsFieldNumber = 3;
    private ulong buildCompleteTs_;
    /// <summary>
    /// 建筑完成时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BuildCompleteTs {
      get { return buildCompleteTs_; }
      set {
        buildCompleteTs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuildBuildingInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuildBuildingInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BuildType != other.BuildType) return false;
      if (Level != other.Level) return false;
      if (BuildCompleteTs != other.BuildCompleteTs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BuildType != 0) hash ^= BuildType.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (BuildCompleteTs != 0UL) hash ^= BuildCompleteTs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BuildType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BuildType);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (BuildCompleteTs != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(BuildCompleteTs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BuildType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuildType);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (BuildCompleteTs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BuildCompleteTs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuildBuildingInfo other) {
      if (other == null) {
        return;
      }
      if (other.BuildType != 0) {
        BuildType = other.BuildType;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.BuildCompleteTs != 0UL) {
        BuildCompleteTs = other.BuildCompleteTs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BuildType = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 24: {
            BuildCompleteTs = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 协会事件参数
  /// </summary>
  public sealed partial class GuildEventParam : pb::IMessage<GuildEventParam> {
    private static readonly pb::MessageParser<GuildEventParam> _parser = new pb::MessageParser<GuildEventParam>(() => new GuildEventParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildEventParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildEventParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildEventParam(GuildEventParam other) : this() {
      key_ = other.key_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildEventParam Clone() {
      return new GuildEventParam(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    /// <summary>
    /// 事件key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    /// <summary>
    /// 事件value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuildEventParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuildEventParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuildEventParam other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 资金排行
  /// </summary>
  public sealed partial class GuildPayFundRank : pb::IMessage<GuildPayFundRank> {
    private static readonly pb::MessageParser<GuildPayFundRank> _parser = new pb::MessageParser<GuildPayFundRank>(() => new GuildPayFundRank());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildPayFundRank> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildPayFundRank() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildPayFundRank(GuildPayFundRank other) : this() {
      playerId_ = other.playerId_;
      rank_ = other.rank_;
      payFund_ = other.payFund_;
      playerName_ = other.playerName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildPayFundRank Clone() {
      return new GuildPayFundRank(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    /// <summary>
    /// 成员id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 2;
    private int rank_;
    /// <summary>
    /// 排行名次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "pay_fund" field.</summary>
    public const int PayFundFieldNumber = 3;
    private int payFund_;
    /// <summary>
    /// 资金数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PayFund {
      get { return payFund_; }
      set {
        payFund_ = value;
      }
    }

    /// <summary>Field number for the "player_name" field.</summary>
    public const int PlayerNameFieldNumber = 4;
    private string playerName_ = "";
    /// <summary>
    /// 成员名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuildPayFundRank);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuildPayFundRank other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Rank != other.Rank) return false;
      if (PayFund != other.PayFund) return false;
      if (PlayerName != other.PlayerName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (PayFund != 0) hash ^= PayFund.GetHashCode();
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (Rank != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Rank);
      }
      if (PayFund != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PayFund);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PlayerName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (PayFund != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PayFund);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuildPayFundRank other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.PayFund != 0) {
        PayFund = other.PayFund;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 16: {
            Rank = input.ReadInt32();
            break;
          }
          case 24: {
            PayFund = input.ReadInt32();
            break;
          }
          case 34: {
            PlayerName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 协会事件记录 
  /// </summary>
  public sealed partial class GuildEventInfo : pb::IMessage<GuildEventInfo> {
    private static readonly pb::MessageParser<GuildEventInfo> _parser = new pb::MessageParser<GuildEventInfo>(() => new GuildEventInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildEventInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildEventInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildEventInfo(GuildEventInfo other) : this() {
      eventType_ = other.eventType_;
      eventId_ = other.eventId_;
      eventTime_ = other.eventTime_;
      eventParams_ = other.eventParams_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildEventInfo Clone() {
      return new GuildEventInfo(this);
    }

    /// <summary>Field number for the "event_type" field.</summary>
    public const int EventTypeFieldNumber = 1;
    private int eventType_;
    /// <summary>
    /// 事件类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 2;
    private int eventId_;
    /// <summary>
    /// 事件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventId {
      get { return eventId_; }
      set {
        eventId_ = value;
      }
    }

    /// <summary>Field number for the "event_time" field.</summary>
    public const int EventTimeFieldNumber = 3;
    private ulong eventTime_;
    /// <summary>
    /// 事件发生时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EventTime {
      get { return eventTime_; }
      set {
        eventTime_ = value;
      }
    }

    /// <summary>Field number for the "event_params" field.</summary>
    public const int EventParamsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Stardom.GuildEventParam> _repeated_eventParams_codec
        = pb::FieldCodec.ForMessage(34, global::Stardom.GuildEventParam.Parser);
    private readonly pbc::RepeatedField<global::Stardom.GuildEventParam> eventParams_ = new pbc::RepeatedField<global::Stardom.GuildEventParam>();
    /// <summary>
    /// 事件参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.GuildEventParam> EventParams {
      get { return eventParams_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuildEventInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuildEventInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventType != other.EventType) return false;
      if (EventId != other.EventId) return false;
      if (EventTime != other.EventTime) return false;
      if(!eventParams_.Equals(other.eventParams_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventType != 0) hash ^= EventType.GetHashCode();
      if (EventId != 0) hash ^= EventId.GetHashCode();
      if (EventTime != 0UL) hash ^= EventTime.GetHashCode();
      hash ^= eventParams_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EventType);
      }
      if (EventId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EventId);
      }
      if (EventTime != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(EventTime);
      }
      eventParams_.WriteTo(output, _repeated_eventParams_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventType);
      }
      if (EventId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventId);
      }
      if (EventTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EventTime);
      }
      size += eventParams_.CalculateSize(_repeated_eventParams_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuildEventInfo other) {
      if (other == null) {
        return;
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
      if (other.EventId != 0) {
        EventId = other.EventId;
      }
      if (other.EventTime != 0UL) {
        EventTime = other.EventTime;
      }
      eventParams_.Add(other.eventParams_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EventType = input.ReadInt32();
            break;
          }
          case 16: {
            EventId = input.ReadInt32();
            break;
          }
          case 24: {
            EventTime = input.ReadUInt64();
            break;
          }
          case 34: {
            eventParams_.AddEntriesFrom(input, _repeated_eventParams_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 副本挑战排行信息
  /// </summary>
  public sealed partial class GuildStageDamageRank : pb::IMessage<GuildStageDamageRank> {
    private static readonly pb::MessageParser<GuildStageDamageRank> _parser = new pb::MessageParser<GuildStageDamageRank>(() => new GuildStageDamageRank());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildStageDamageRank> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildStageDamageRank() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildStageDamageRank(GuildStageDamageRank other) : this() {
      playerId_ = other.playerId_;
      damage_ = other.damage_;
      playerName_ = other.playerName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildStageDamageRank Clone() {
      return new GuildStageDamageRank(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    /// <summary>
    /// 成员id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 2;
    private int damage_;
    /// <summary>
    /// 伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "player_name" field.</summary>
    public const int PlayerNameFieldNumber = 3;
    private string playerName_ = "";
    /// <summary>
    /// 成员名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuildStageDamageRank);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuildStageDamageRank other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Damage != other.Damage) return false;
      if (PlayerName != other.PlayerName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (Damage != 0) hash ^= Damage.GetHashCode();
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (Damage != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Damage);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PlayerName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuildStageDamageRank other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 16: {
            Damage = input.ReadInt32();
            break;
          }
          case 26: {
            PlayerName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 副本中怪物剩余血量
  /// </summary>
  public sealed partial class GuildStageMonster : pb::IMessage<GuildStageMonster> {
    private static readonly pb::MessageParser<GuildStageMonster> _parser = new pb::MessageParser<GuildStageMonster>(() => new GuildStageMonster());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildStageMonster> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildStageMonster() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildStageMonster(GuildStageMonster other) : this() {
      wave_ = other.wave_;
      pos_ = other.pos_;
      monsterHp_ = other.monsterHp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildStageMonster Clone() {
      return new GuildStageMonster(this);
    }

    /// <summary>Field number for the "wave" field.</summary>
    public const int WaveFieldNumber = 1;
    private int wave_;
    /// <summary>
    /// 波数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Wave {
      get { return wave_; }
      set {
        wave_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private int pos_;
    /// <summary>
    /// 位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "monster_hp" field.</summary>
    public const int MonsterHpFieldNumber = 3;
    private int monsterHp_;
    /// <summary>
    /// 怪物剩余血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterHp {
      get { return monsterHp_; }
      set {
        monsterHp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuildStageMonster);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuildStageMonster other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Wave != other.Wave) return false;
      if (Pos != other.Pos) return false;
      if (MonsterHp != other.MonsterHp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Wave != 0) hash ^= Wave.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (MonsterHp != 0) hash ^= MonsterHp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Wave != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Wave);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pos);
      }
      if (MonsterHp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MonsterHp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Wave != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Wave);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (MonsterHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterHp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuildStageMonster other) {
      if (other == null) {
        return;
      }
      if (other.Wave != 0) {
        Wave = other.Wave;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.MonsterHp != 0) {
        MonsterHp = other.MonsterHp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Wave = input.ReadInt32();
            break;
          }
          case 16: {
            Pos = input.ReadInt32();
            break;
          }
          case 24: {
            MonsterHp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 协会副本
  /// </summary>
  public sealed partial class GuildStageInfo : pb::IMessage<GuildStageInfo> {
    private static readonly pb::MessageParser<GuildStageInfo> _parser = new pb::MessageParser<GuildStageInfo>(() => new GuildStageInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildStageInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildStageInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildStageInfo(GuildStageInfo other) : this() {
      guildStageId_ = other.guildStageId_;
      bossHp_ = other.bossHp_;
      lastHitPlayer_ = other.lastHitPlayer_;
      lastHitPlayerName_ = other.lastHitPlayerName_;
      damageRank_ = other.damageRank_.Clone();
      stageMonsters_ = other.stageMonsters_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildStageInfo Clone() {
      return new GuildStageInfo(this);
    }

    /// <summary>Field number for the "guild_stage_id" field.</summary>
    public const int GuildStageIdFieldNumber = 1;
    private int guildStageId_;
    /// <summary>
    /// 副本id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildStageId {
      get { return guildStageId_; }
      set {
        guildStageId_ = value;
      }
    }

    /// <summary>Field number for the "boss_hp" field.</summary>
    public const int BossHpFieldNumber = 2;
    private int bossHp_;
    /// <summary>
    /// boss总血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BossHp {
      get { return bossHp_; }
      set {
        bossHp_ = value;
      }
    }

    /// <summary>Field number for the "last_hit_player" field.</summary>
    public const int LastHitPlayerFieldNumber = 3;
    private ulong lastHitPlayer_;
    /// <summary>
    /// 最后一击成员id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LastHitPlayer {
      get { return lastHitPlayer_; }
      set {
        lastHitPlayer_ = value;
      }
    }

    /// <summary>Field number for the "last_hit_player_name" field.</summary>
    public const int LastHitPlayerNameFieldNumber = 4;
    private string lastHitPlayerName_ = "";
    /// <summary>
    /// 成员名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastHitPlayerName {
      get { return lastHitPlayerName_; }
      set {
        lastHitPlayerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "damage_rank" field.</summary>
    public const int DamageRankFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Stardom.GuildStageDamageRank> _repeated_damageRank_codec
        = pb::FieldCodec.ForMessage(42, global::Stardom.GuildStageDamageRank.Parser);
    private readonly pbc::RepeatedField<global::Stardom.GuildStageDamageRank> damageRank_ = new pbc::RepeatedField<global::Stardom.GuildStageDamageRank>();
    /// <summary>
    /// 伤害排行
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.GuildStageDamageRank> DamageRank {
      get { return damageRank_; }
    }

    /// <summary>Field number for the "stage_monsters" field.</summary>
    public const int StageMonstersFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Stardom.GuildStageMonster> _repeated_stageMonsters_codec
        = pb::FieldCodec.ForMessage(50, global::Stardom.GuildStageMonster.Parser);
    private readonly pbc::RepeatedField<global::Stardom.GuildStageMonster> stageMonsters_ = new pbc::RepeatedField<global::Stardom.GuildStageMonster>();
    /// <summary>
    /// 怪物剩余血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.GuildStageMonster> StageMonsters {
      get { return stageMonsters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuildStageInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuildStageInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GuildStageId != other.GuildStageId) return false;
      if (BossHp != other.BossHp) return false;
      if (LastHitPlayer != other.LastHitPlayer) return false;
      if (LastHitPlayerName != other.LastHitPlayerName) return false;
      if(!damageRank_.Equals(other.damageRank_)) return false;
      if(!stageMonsters_.Equals(other.stageMonsters_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GuildStageId != 0) hash ^= GuildStageId.GetHashCode();
      if (BossHp != 0) hash ^= BossHp.GetHashCode();
      if (LastHitPlayer != 0UL) hash ^= LastHitPlayer.GetHashCode();
      if (LastHitPlayerName.Length != 0) hash ^= LastHitPlayerName.GetHashCode();
      hash ^= damageRank_.GetHashCode();
      hash ^= stageMonsters_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildStageId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GuildStageId);
      }
      if (BossHp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BossHp);
      }
      if (LastHitPlayer != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(LastHitPlayer);
      }
      if (LastHitPlayerName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LastHitPlayerName);
      }
      damageRank_.WriteTo(output, _repeated_damageRank_codec);
      stageMonsters_.WriteTo(output, _repeated_stageMonsters_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildStageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildStageId);
      }
      if (BossHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossHp);
      }
      if (LastHitPlayer != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LastHitPlayer);
      }
      if (LastHitPlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastHitPlayerName);
      }
      size += damageRank_.CalculateSize(_repeated_damageRank_codec);
      size += stageMonsters_.CalculateSize(_repeated_stageMonsters_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuildStageInfo other) {
      if (other == null) {
        return;
      }
      if (other.GuildStageId != 0) {
        GuildStageId = other.GuildStageId;
      }
      if (other.BossHp != 0) {
        BossHp = other.BossHp;
      }
      if (other.LastHitPlayer != 0UL) {
        LastHitPlayer = other.LastHitPlayer;
      }
      if (other.LastHitPlayerName.Length != 0) {
        LastHitPlayerName = other.LastHitPlayerName;
      }
      damageRank_.Add(other.damageRank_);
      stageMonsters_.Add(other.stageMonsters_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuildStageId = input.ReadInt32();
            break;
          }
          case 16: {
            BossHp = input.ReadInt32();
            break;
          }
          case 24: {
            LastHitPlayer = input.ReadUInt64();
            break;
          }
          case 34: {
            LastHitPlayerName = input.ReadString();
            break;
          }
          case 42: {
            damageRank_.AddEntriesFrom(input, _repeated_damageRank_codec);
            break;
          }
          case 50: {
            stageMonsters_.AddEntriesFrom(input, _repeated_stageMonsters_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 公会信息
  /// </summary>
  public sealed partial class GuildInfo : pb::IMessage<GuildInfo> {
    private static readonly pb::MessageParser<GuildInfo> _parser = new pb::MessageParser<GuildInfo>(() => new GuildInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildInfo(GuildInfo other) : this() {
      guildId_ = other.guildId_;
      faction_ = other.faction_;
      guildLevel_ = other.guildLevel_;
      guildName_ = other.guildName_;
      tenet_ = other.tenet_;
      badgeId_ = other.badgeId_;
      guildFund_ = other.guildFund_;
      guildInfluence_ = other.guildInfluence_;
      rank_ = other.rank_;
      maxMember_ = other.maxMember_;
      requireLevelId_ = other.requireLevelId_;
      requireKaweiId_ = other.requireKaweiId_;
      isAutoExamine_ = other.isAutoExamine_;
      members_ = other.members_.Clone();
      applyList_ = other.applyList_.Clone();
      buildingInfo_ = other.buildingInfo_.Clone();
      guildEvents_ = other.guildEvents_.Clone();
      guildStages_ = other.guildStages_.Clone();
      guildWishInfo_ = other.guildWishInfo_.Clone();
      guildRetinues_ = other.guildRetinues_.Clone();
      mailTimes_ = other.mailTimes_;
      buildedTime_ = other.buildedTime_;
      TeaPartyInfo = other.teaPartyInfo_ != null ? other.TeaPartyInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildInfo Clone() {
      return new GuildInfo(this);
    }

    /// <summary>Field number for the "guild_id" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private ulong guildId_;
    /// <summary>
    /// 协会id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "faction" field.</summary>
    public const int FactionFieldNumber = 2;
    private int faction_;
    /// <summary>
    /// 协会所属势力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Faction {
      get { return faction_; }
      set {
        faction_ = value;
      }
    }

    /// <summary>Field number for the "guild_level" field.</summary>
    public const int GuildLevelFieldNumber = 3;
    private int guildLevel_;
    /// <summary>
    /// 协会等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildLevel {
      get { return guildLevel_; }
      set {
        guildLevel_ = value;
      }
    }

    /// <summary>Field number for the "guild_name" field.</summary>
    public const int GuildNameFieldNumber = 4;
    private string guildName_ = "";
    /// <summary>
    /// 协会名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tenet" field.</summary>
    public const int TenetFieldNumber = 5;
    private string tenet_ = "";
    /// <summary>
    /// 协会宗旨(公告)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tenet {
      get { return tenet_; }
      set {
        tenet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "badge_id" field.</summary>
    public const int BadgeIdFieldNumber = 6;
    private int badgeId_;
    /// <summary>
    /// 协会徽章
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BadgeId {
      get { return badgeId_; }
      set {
        badgeId_ = value;
      }
    }

    /// <summary>Field number for the "guild_fund" field.</summary>
    public const int GuildFundFieldNumber = 7;
    private int guildFund_;
    /// <summary>
    /// 协会基金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildFund {
      get { return guildFund_; }
      set {
        guildFund_ = value;
      }
    }

    /// <summary>Field number for the "guild_influence" field.</summary>
    public const int GuildInfluenceFieldNumber = 8;
    private int guildInfluence_;
    /// <summary>
    /// 协会影响力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildInfluence {
      get { return guildInfluence_; }
      set {
        guildInfluence_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 9;
    private int rank_;
    /// <summary>
    /// 临时排行(请求列表时填充)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "max_member" field.</summary>
    public const int MaxMemberFieldNumber = 10;
    private int maxMember_;
    /// <summary>
    /// 最大成员数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxMember {
      get { return maxMember_; }
      set {
        maxMember_ = value;
      }
    }

    /// <summary>Field number for the "require_level_id" field.</summary>
    public const int RequireLevelIdFieldNumber = 11;
    private int requireLevelId_;
    /// <summary>
    /// 协会入会等级需求id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequireLevelId {
      get { return requireLevelId_; }
      set {
        requireLevelId_ = value;
      }
    }

    /// <summary>Field number for the "require_kawei_id" field.</summary>
    public const int RequireKaweiIdFieldNumber = 12;
    private int requireKaweiId_;
    /// <summary>
    /// 协会入会咖位需求id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequireKaweiId {
      get { return requireKaweiId_; }
      set {
        requireKaweiId_ = value;
      }
    }

    /// <summary>Field number for the "is_auto_examine" field.</summary>
    public const int IsAutoExamineFieldNumber = 13;
    private int isAutoExamine_;
    /// <summary>
    /// 自动审批
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsAutoExamine {
      get { return isAutoExamine_; }
      set {
        isAutoExamine_ = value;
      }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Stardom.GuildMemberInfo> _repeated_members_codec
        = pb::FieldCodec.ForMessage(114, global::Stardom.GuildMemberInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.GuildMemberInfo> members_ = new pbc::RepeatedField<global::Stardom.GuildMemberInfo>();
    /// <summary>
    /// 协会成员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.GuildMemberInfo> Members {
      get { return members_; }
    }

    /// <summary>Field number for the "apply_list" field.</summary>
    public const int ApplyListFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Stardom.GuildApplyInfo> _repeated_applyList_codec
        = pb::FieldCodec.ForMessage(122, global::Stardom.GuildApplyInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.GuildApplyInfo> applyList_ = new pbc::RepeatedField<global::Stardom.GuildApplyInfo>();
    /// <summary>
    /// 协会申请列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.GuildApplyInfo> ApplyList {
      get { return applyList_; }
    }

    /// <summary>Field number for the "building_info" field.</summary>
    public const int BuildingInfoFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Stardom.GuildBuildingInfo> _repeated_buildingInfo_codec
        = pb::FieldCodec.ForMessage(130, global::Stardom.GuildBuildingInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.GuildBuildingInfo> buildingInfo_ = new pbc::RepeatedField<global::Stardom.GuildBuildingInfo>();
    /// <summary>
    /// 建筑信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.GuildBuildingInfo> BuildingInfo {
      get { return buildingInfo_; }
    }

    /// <summary>Field number for the "guild_events" field.</summary>
    public const int GuildEventsFieldNumber = 17;
    private static readonly pb::FieldCodec<global::Stardom.GuildEventInfo> _repeated_guildEvents_codec
        = pb::FieldCodec.ForMessage(138, global::Stardom.GuildEventInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.GuildEventInfo> guildEvents_ = new pbc::RepeatedField<global::Stardom.GuildEventInfo>();
    /// <summary>
    /// 捐献记录等等事件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.GuildEventInfo> GuildEvents {
      get { return guildEvents_; }
    }

    /// <summary>Field number for the "guild_stages" field.</summary>
    public const int GuildStagesFieldNumber = 18;
    private static readonly pb::FieldCodec<global::Stardom.GuildStageInfo> _repeated_guildStages_codec
        = pb::FieldCodec.ForMessage(146, global::Stardom.GuildStageInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.GuildStageInfo> guildStages_ = new pbc::RepeatedField<global::Stardom.GuildStageInfo>();
    /// <summary>
    /// 联盟副本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.GuildStageInfo> GuildStages {
      get { return guildStages_; }
    }

    /// <summary>Field number for the "guild_wish_info" field.</summary>
    public const int GuildWishInfoFieldNumber = 19;
    private static readonly pb::FieldCodec<global::Stardom.GuildWishInfo> _repeated_guildWishInfo_codec
        = pb::FieldCodec.ForMessage(154, global::Stardom.GuildWishInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.GuildWishInfo> guildWishInfo_ = new pbc::RepeatedField<global::Stardom.GuildWishInfo>();
    /// <summary>
    /// 成员许愿信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.GuildWishInfo> GuildWishInfo {
      get { return guildWishInfo_; }
    }

    /// <summary>Field number for the "guild_retinues" field.</summary>
    public const int GuildRetinuesFieldNumber = 20;
    private static readonly pb::FieldCodec<global::Stardom.GuildRetinueInfo> _repeated_guildRetinues_codec
        = pb::FieldCodec.ForMessage(162, global::Stardom.GuildRetinueInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.GuildRetinueInfo> guildRetinues_ = new pbc::RepeatedField<global::Stardom.GuildRetinueInfo>();
    /// <summary>
    /// 协会随从信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.GuildRetinueInfo> GuildRetinues {
      get { return guildRetinues_; }
    }

    /// <summary>Field number for the "mail_times" field.</summary>
    public const int MailTimesFieldNumber = 25;
    private int mailTimes_;
    /// <summary>
    /// 协会发送邮件次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MailTimes {
      get { return mailTimes_; }
      set {
        mailTimes_ = value;
      }
    }

    /// <summary>Field number for the "builded_time" field.</summary>
    public const int BuildedTimeFieldNumber = 26;
    private ulong buildedTime_;
    /// <summary>
    /// 协会创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BuildedTime {
      get { return buildedTime_; }
      set {
        buildedTime_ = value;
      }
    }

    /// <summary>Field number for the "tea_party_info" field.</summary>
    public const int TeaPartyInfoFieldNumber = 27;
    private global::Stardom.GuildTeaPartyInfo teaPartyInfo_;
    /// <summary>
    /// 协会茶会信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.GuildTeaPartyInfo TeaPartyInfo {
      get { return teaPartyInfo_; }
      set {
        teaPartyInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuildInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuildInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GuildId != other.GuildId) return false;
      if (Faction != other.Faction) return false;
      if (GuildLevel != other.GuildLevel) return false;
      if (GuildName != other.GuildName) return false;
      if (Tenet != other.Tenet) return false;
      if (BadgeId != other.BadgeId) return false;
      if (GuildFund != other.GuildFund) return false;
      if (GuildInfluence != other.GuildInfluence) return false;
      if (Rank != other.Rank) return false;
      if (MaxMember != other.MaxMember) return false;
      if (RequireLevelId != other.RequireLevelId) return false;
      if (RequireKaweiId != other.RequireKaweiId) return false;
      if (IsAutoExamine != other.IsAutoExamine) return false;
      if(!members_.Equals(other.members_)) return false;
      if(!applyList_.Equals(other.applyList_)) return false;
      if(!buildingInfo_.Equals(other.buildingInfo_)) return false;
      if(!guildEvents_.Equals(other.guildEvents_)) return false;
      if(!guildStages_.Equals(other.guildStages_)) return false;
      if(!guildWishInfo_.Equals(other.guildWishInfo_)) return false;
      if(!guildRetinues_.Equals(other.guildRetinues_)) return false;
      if (MailTimes != other.MailTimes) return false;
      if (BuildedTime != other.BuildedTime) return false;
      if (!object.Equals(TeaPartyInfo, other.TeaPartyInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GuildId != 0UL) hash ^= GuildId.GetHashCode();
      if (Faction != 0) hash ^= Faction.GetHashCode();
      if (GuildLevel != 0) hash ^= GuildLevel.GetHashCode();
      if (GuildName.Length != 0) hash ^= GuildName.GetHashCode();
      if (Tenet.Length != 0) hash ^= Tenet.GetHashCode();
      if (BadgeId != 0) hash ^= BadgeId.GetHashCode();
      if (GuildFund != 0) hash ^= GuildFund.GetHashCode();
      if (GuildInfluence != 0) hash ^= GuildInfluence.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (MaxMember != 0) hash ^= MaxMember.GetHashCode();
      if (RequireLevelId != 0) hash ^= RequireLevelId.GetHashCode();
      if (RequireKaweiId != 0) hash ^= RequireKaweiId.GetHashCode();
      if (IsAutoExamine != 0) hash ^= IsAutoExamine.GetHashCode();
      hash ^= members_.GetHashCode();
      hash ^= applyList_.GetHashCode();
      hash ^= buildingInfo_.GetHashCode();
      hash ^= guildEvents_.GetHashCode();
      hash ^= guildStages_.GetHashCode();
      hash ^= guildWishInfo_.GetHashCode();
      hash ^= guildRetinues_.GetHashCode();
      if (MailTimes != 0) hash ^= MailTimes.GetHashCode();
      if (BuildedTime != 0UL) hash ^= BuildedTime.GetHashCode();
      if (teaPartyInfo_ != null) hash ^= TeaPartyInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GuildId);
      }
      if (Faction != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Faction);
      }
      if (GuildLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GuildLevel);
      }
      if (GuildName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(GuildName);
      }
      if (Tenet.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Tenet);
      }
      if (BadgeId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BadgeId);
      }
      if (GuildFund != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GuildFund);
      }
      if (GuildInfluence != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(GuildInfluence);
      }
      if (Rank != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Rank);
      }
      if (MaxMember != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MaxMember);
      }
      if (RequireLevelId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(RequireLevelId);
      }
      if (RequireKaweiId != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(RequireKaweiId);
      }
      if (IsAutoExamine != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(IsAutoExamine);
      }
      members_.WriteTo(output, _repeated_members_codec);
      applyList_.WriteTo(output, _repeated_applyList_codec);
      buildingInfo_.WriteTo(output, _repeated_buildingInfo_codec);
      guildEvents_.WriteTo(output, _repeated_guildEvents_codec);
      guildStages_.WriteTo(output, _repeated_guildStages_codec);
      guildWishInfo_.WriteTo(output, _repeated_guildWishInfo_codec);
      guildRetinues_.WriteTo(output, _repeated_guildRetinues_codec);
      if (MailTimes != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(MailTimes);
      }
      if (BuildedTime != 0UL) {
        output.WriteRawTag(208, 1);
        output.WriteUInt64(BuildedTime);
      }
      if (teaPartyInfo_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(TeaPartyInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (Faction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Faction);
      }
      if (GuildLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildLevel);
      }
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GuildName);
      }
      if (Tenet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tenet);
      }
      if (BadgeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BadgeId);
      }
      if (GuildFund != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildFund);
      }
      if (GuildInfluence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildInfluence);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (MaxMember != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxMember);
      }
      if (RequireLevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequireLevelId);
      }
      if (RequireKaweiId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequireKaweiId);
      }
      if (IsAutoExamine != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsAutoExamine);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      size += applyList_.CalculateSize(_repeated_applyList_codec);
      size += buildingInfo_.CalculateSize(_repeated_buildingInfo_codec);
      size += guildEvents_.CalculateSize(_repeated_guildEvents_codec);
      size += guildStages_.CalculateSize(_repeated_guildStages_codec);
      size += guildWishInfo_.CalculateSize(_repeated_guildWishInfo_codec);
      size += guildRetinues_.CalculateSize(_repeated_guildRetinues_codec);
      if (MailTimes != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MailTimes);
      }
      if (BuildedTime != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(BuildedTime);
      }
      if (teaPartyInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TeaPartyInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuildInfo other) {
      if (other == null) {
        return;
      }
      if (other.GuildId != 0UL) {
        GuildId = other.GuildId;
      }
      if (other.Faction != 0) {
        Faction = other.Faction;
      }
      if (other.GuildLevel != 0) {
        GuildLevel = other.GuildLevel;
      }
      if (other.GuildName.Length != 0) {
        GuildName = other.GuildName;
      }
      if (other.Tenet.Length != 0) {
        Tenet = other.Tenet;
      }
      if (other.BadgeId != 0) {
        BadgeId = other.BadgeId;
      }
      if (other.GuildFund != 0) {
        GuildFund = other.GuildFund;
      }
      if (other.GuildInfluence != 0) {
        GuildInfluence = other.GuildInfluence;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.MaxMember != 0) {
        MaxMember = other.MaxMember;
      }
      if (other.RequireLevelId != 0) {
        RequireLevelId = other.RequireLevelId;
      }
      if (other.RequireKaweiId != 0) {
        RequireKaweiId = other.RequireKaweiId;
      }
      if (other.IsAutoExamine != 0) {
        IsAutoExamine = other.IsAutoExamine;
      }
      members_.Add(other.members_);
      applyList_.Add(other.applyList_);
      buildingInfo_.Add(other.buildingInfo_);
      guildEvents_.Add(other.guildEvents_);
      guildStages_.Add(other.guildStages_);
      guildWishInfo_.Add(other.guildWishInfo_);
      guildRetinues_.Add(other.guildRetinues_);
      if (other.MailTimes != 0) {
        MailTimes = other.MailTimes;
      }
      if (other.BuildedTime != 0UL) {
        BuildedTime = other.BuildedTime;
      }
      if (other.teaPartyInfo_ != null) {
        if (teaPartyInfo_ == null) {
          teaPartyInfo_ = new global::Stardom.GuildTeaPartyInfo();
        }
        TeaPartyInfo.MergeFrom(other.TeaPartyInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 16: {
            Faction = input.ReadInt32();
            break;
          }
          case 24: {
            GuildLevel = input.ReadInt32();
            break;
          }
          case 34: {
            GuildName = input.ReadString();
            break;
          }
          case 42: {
            Tenet = input.ReadString();
            break;
          }
          case 48: {
            BadgeId = input.ReadInt32();
            break;
          }
          case 56: {
            GuildFund = input.ReadInt32();
            break;
          }
          case 64: {
            GuildInfluence = input.ReadInt32();
            break;
          }
          case 72: {
            Rank = input.ReadInt32();
            break;
          }
          case 80: {
            MaxMember = input.ReadInt32();
            break;
          }
          case 88: {
            RequireLevelId = input.ReadInt32();
            break;
          }
          case 96: {
            RequireKaweiId = input.ReadInt32();
            break;
          }
          case 104: {
            IsAutoExamine = input.ReadInt32();
            break;
          }
          case 114: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
          case 122: {
            applyList_.AddEntriesFrom(input, _repeated_applyList_codec);
            break;
          }
          case 130: {
            buildingInfo_.AddEntriesFrom(input, _repeated_buildingInfo_codec);
            break;
          }
          case 138: {
            guildEvents_.AddEntriesFrom(input, _repeated_guildEvents_codec);
            break;
          }
          case 146: {
            guildStages_.AddEntriesFrom(input, _repeated_guildStages_codec);
            break;
          }
          case 154: {
            guildWishInfo_.AddEntriesFrom(input, _repeated_guildWishInfo_codec);
            break;
          }
          case 162: {
            guildRetinues_.AddEntriesFrom(input, _repeated_guildRetinues_codec);
            break;
          }
          case 200: {
            MailTimes = input.ReadInt32();
            break;
          }
          case 208: {
            BuildedTime = input.ReadUInt64();
            break;
          }
          case 218: {
            if (teaPartyInfo_ == null) {
              teaPartyInfo_ = new global::Stardom.GuildTeaPartyInfo();
            }
            input.ReadMessage(teaPartyInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 协会成员
  /// </summary>
  public sealed partial class GuildMemberInfo : pb::IMessage<GuildMemberInfo> {
    private static readonly pb::MessageParser<GuildMemberInfo> _parser = new pb::MessageParser<GuildMemberInfo>(() => new GuildMemberInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildMemberInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildMemberInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildMemberInfo(GuildMemberInfo other) : this() {
      playerId_ = other.playerId_;
      name_ = other.name_;
      sex_ = other.sex_;
      headId_ = other.headId_;
      level_ = other.level_;
      kawei_ = other.kawei_;
      guildPosition_ = other.guildPosition_;
      dailyPayFund_ = other.dailyPayFund_;
      weekContribution_ = other.weekContribution_;
      totalContribution_ = other.totalContribution_;
      logoutTs_ = other.logoutTs_;
      fightPower_ = other.fightPower_;
      pianoLevel_ = other.pianoLevel_;
      drumLevel_ = other.drumLevel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildMemberInfo Clone() {
      return new GuildMemberInfo(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 3;
    private int sex_;
    /// <summary>
    /// 性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "head_id" field.</summary>
    public const int HeadIdFieldNumber = 4;
    private int headId_;
    /// <summary>
    /// 头像id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadId {
      get { return headId_; }
      set {
        headId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 5;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "kawei" field.</summary>
    public const int KaweiFieldNumber = 6;
    private int kawei_;
    /// <summary>
    /// 咖位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Kawei {
      get { return kawei_; }
      set {
        kawei_ = value;
      }
    }

    /// <summary>Field number for the "guild_position" field.</summary>
    public const int GuildPositionFieldNumber = 7;
    private int guildPosition_;
    /// <summary>
    /// 职位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildPosition {
      get { return guildPosition_; }
      set {
        guildPosition_ = value;
      }
    }

    /// <summary>Field number for the "daily_pay_fund" field.</summary>
    public const int DailyPayFundFieldNumber = 8;
    private int dailyPayFund_;
    /// <summary>
    /// 每日缴纳资金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DailyPayFund {
      get { return dailyPayFund_; }
      set {
        dailyPayFund_ = value;
      }
    }

    /// <summary>Field number for the "week_contribution" field.</summary>
    public const int WeekContributionFieldNumber = 9;
    private int weekContribution_;
    /// <summary>
    /// 周贡献
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeekContribution {
      get { return weekContribution_; }
      set {
        weekContribution_ = value;
      }
    }

    /// <summary>Field number for the "total_contribution" field.</summary>
    public const int TotalContributionFieldNumber = 10;
    private int totalContribution_;
    /// <summary>
    /// 总贡献
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalContribution {
      get { return totalContribution_; }
      set {
        totalContribution_ = value;
      }
    }

    /// <summary>Field number for the "logout_ts" field.</summary>
    public const int LogoutTsFieldNumber = 11;
    private ulong logoutTs_;
    /// <summary>
    /// 登出时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LogoutTs {
      get { return logoutTs_; }
      set {
        logoutTs_ = value;
      }
    }

    /// <summary>Field number for the "fight_power" field.</summary>
    public const int FightPowerFieldNumber = 12;
    private uint fightPower_;
    /// <summary>
    /// 战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FightPower {
      get { return fightPower_; }
      set {
        fightPower_ = value;
      }
    }

    /// <summary>Field number for the "piano_level" field.</summary>
    public const int PianoLevelFieldNumber = 13;
    private int pianoLevel_;
    /// <summary>
    /// 钢琴等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PianoLevel {
      get { return pianoLevel_; }
      set {
        pianoLevel_ = value;
      }
    }

    /// <summary>Field number for the "drum_level" field.</summary>
    public const int DrumLevelFieldNumber = 14;
    private int drumLevel_;
    /// <summary>
    /// 架子鼓等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DrumLevel {
      get { return drumLevel_; }
      set {
        drumLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuildMemberInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuildMemberInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Name != other.Name) return false;
      if (Sex != other.Sex) return false;
      if (HeadId != other.HeadId) return false;
      if (Level != other.Level) return false;
      if (Kawei != other.Kawei) return false;
      if (GuildPosition != other.GuildPosition) return false;
      if (DailyPayFund != other.DailyPayFund) return false;
      if (WeekContribution != other.WeekContribution) return false;
      if (TotalContribution != other.TotalContribution) return false;
      if (LogoutTs != other.LogoutTs) return false;
      if (FightPower != other.FightPower) return false;
      if (PianoLevel != other.PianoLevel) return false;
      if (DrumLevel != other.DrumLevel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Sex != 0) hash ^= Sex.GetHashCode();
      if (HeadId != 0) hash ^= HeadId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Kawei != 0) hash ^= Kawei.GetHashCode();
      if (GuildPosition != 0) hash ^= GuildPosition.GetHashCode();
      if (DailyPayFund != 0) hash ^= DailyPayFund.GetHashCode();
      if (WeekContribution != 0) hash ^= WeekContribution.GetHashCode();
      if (TotalContribution != 0) hash ^= TotalContribution.GetHashCode();
      if (LogoutTs != 0UL) hash ^= LogoutTs.GetHashCode();
      if (FightPower != 0) hash ^= FightPower.GetHashCode();
      if (PianoLevel != 0) hash ^= PianoLevel.GetHashCode();
      if (DrumLevel != 0) hash ^= DrumLevel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Sex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Sex);
      }
      if (HeadId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HeadId);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Level);
      }
      if (Kawei != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Kawei);
      }
      if (GuildPosition != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GuildPosition);
      }
      if (DailyPayFund != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DailyPayFund);
      }
      if (WeekContribution != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(WeekContribution);
      }
      if (TotalContribution != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(TotalContribution);
      }
      if (LogoutTs != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(LogoutTs);
      }
      if (FightPower != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(FightPower);
      }
      if (PianoLevel != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(PianoLevel);
      }
      if (DrumLevel != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(DrumLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (HeadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Kawei != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Kawei);
      }
      if (GuildPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildPosition);
      }
      if (DailyPayFund != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DailyPayFund);
      }
      if (WeekContribution != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeekContribution);
      }
      if (TotalContribution != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalContribution);
      }
      if (LogoutTs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LogoutTs);
      }
      if (FightPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FightPower);
      }
      if (PianoLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PianoLevel);
      }
      if (DrumLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DrumLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuildMemberInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Sex != 0) {
        Sex = other.Sex;
      }
      if (other.HeadId != 0) {
        HeadId = other.HeadId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Kawei != 0) {
        Kawei = other.Kawei;
      }
      if (other.GuildPosition != 0) {
        GuildPosition = other.GuildPosition;
      }
      if (other.DailyPayFund != 0) {
        DailyPayFund = other.DailyPayFund;
      }
      if (other.WeekContribution != 0) {
        WeekContribution = other.WeekContribution;
      }
      if (other.TotalContribution != 0) {
        TotalContribution = other.TotalContribution;
      }
      if (other.LogoutTs != 0UL) {
        LogoutTs = other.LogoutTs;
      }
      if (other.FightPower != 0) {
        FightPower = other.FightPower;
      }
      if (other.PianoLevel != 0) {
        PianoLevel = other.PianoLevel;
      }
      if (other.DrumLevel != 0) {
        DrumLevel = other.DrumLevel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Sex = input.ReadInt32();
            break;
          }
          case 32: {
            HeadId = input.ReadInt32();
            break;
          }
          case 40: {
            Level = input.ReadInt32();
            break;
          }
          case 48: {
            Kawei = input.ReadInt32();
            break;
          }
          case 56: {
            GuildPosition = input.ReadInt32();
            break;
          }
          case 64: {
            DailyPayFund = input.ReadInt32();
            break;
          }
          case 72: {
            WeekContribution = input.ReadInt32();
            break;
          }
          case 80: {
            TotalContribution = input.ReadInt32();
            break;
          }
          case 88: {
            LogoutTs = input.ReadUInt64();
            break;
          }
          case 96: {
            FightPower = input.ReadUInt32();
            break;
          }
          case 104: {
            PianoLevel = input.ReadInt32();
            break;
          }
          case 112: {
            DrumLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 协会茶会经验信息
  /// </summary>
  public sealed partial class GuildTeaPartyAddExpInfo : pb::IMessage<GuildTeaPartyAddExpInfo> {
    private static readonly pb::MessageParser<GuildTeaPartyAddExpInfo> _parser = new pb::MessageParser<GuildTeaPartyAddExpInfo>(() => new GuildTeaPartyAddExpInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildTeaPartyAddExpInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildTeaPartyAddExpInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildTeaPartyAddExpInfo(GuildTeaPartyAddExpInfo other) : this() {
      playerId_ = other.playerId_;
      addExpTimes_ = other.addExpTimes_;
      cardAddExpTimes_ = other.cardAddExpTimes_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildTeaPartyAddExpInfo Clone() {
      return new GuildTeaPartyAddExpInfo(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "add_exp_times" field.</summary>
    public const int AddExpTimesFieldNumber = 2;
    private int addExpTimes_;
    /// <summary>
    /// 添加经验次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddExpTimes {
      get { return addExpTimes_; }
      set {
        addExpTimes_ = value;
      }
    }

    /// <summary>Field number for the "card_add_exp_times" field.</summary>
    public const int CardAddExpTimesFieldNumber = 3;
    private int cardAddExpTimes_;
    /// <summary>
    /// 卡牌增加经验次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardAddExpTimes {
      get { return cardAddExpTimes_; }
      set {
        cardAddExpTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuildTeaPartyAddExpInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuildTeaPartyAddExpInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (AddExpTimes != other.AddExpTimes) return false;
      if (CardAddExpTimes != other.CardAddExpTimes) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (AddExpTimes != 0) hash ^= AddExpTimes.GetHashCode();
      if (CardAddExpTimes != 0) hash ^= CardAddExpTimes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (AddExpTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AddExpTimes);
      }
      if (CardAddExpTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CardAddExpTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (AddExpTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddExpTimes);
      }
      if (CardAddExpTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardAddExpTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuildTeaPartyAddExpInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.AddExpTimes != 0) {
        AddExpTimes = other.AddExpTimes;
      }
      if (other.CardAddExpTimes != 0) {
        CardAddExpTimes = other.CardAddExpTimes;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 16: {
            AddExpTimes = input.ReadInt32();
            break;
          }
          case 24: {
            CardAddExpTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 协会茶会信息
  /// </summary>
  public sealed partial class GuildTeaPartyInfo : pb::IMessage<GuildTeaPartyInfo> {
    private static readonly pb::MessageParser<GuildTeaPartyInfo> _parser = new pb::MessageParser<GuildTeaPartyInfo>(() => new GuildTeaPartyInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildTeaPartyInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildTeaPartyInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildTeaPartyInfo(GuildTeaPartyInfo other) : this() {
      isTeaPartyOpen_ = other.isTeaPartyOpen_;
      opentimeOption_ = other.opentimeOption_;
      teaPartyId_ = other.teaPartyId_;
      weeklyOpenTimes_ = other.weeklyOpenTimes_;
      startTs_ = other.startTs_;
      endTs_ = other.endTs_;
      playerExpInfos_ = other.playerExpInfos_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildTeaPartyInfo Clone() {
      return new GuildTeaPartyInfo(this);
    }

    /// <summary>Field number for the "is_tea_party_open" field.</summary>
    public const int IsTeaPartyOpenFieldNumber = 1;
    private int isTeaPartyOpen_;
    /// <summary>
    /// 关闭服务器时茶会是否开启中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsTeaPartyOpen {
      get { return isTeaPartyOpen_; }
      set {
        isTeaPartyOpen_ = value;
      }
    }

    /// <summary>Field number for the "opentime_option" field.</summary>
    public const int OpentimeOptionFieldNumber = 2;
    private int opentimeOption_;
    /// <summary>
    /// 管理员设置自动开启项
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpentimeOption {
      get { return opentimeOption_; }
      set {
        opentimeOption_ = value;
      }
    }

    /// <summary>Field number for the "tea_party_id" field.</summary>
    public const int TeaPartyIdFieldNumber = 3;
    private int teaPartyId_;
    /// <summary>
    /// 主题id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeaPartyId {
      get { return teaPartyId_; }
      set {
        teaPartyId_ = value;
      }
    }

    /// <summary>Field number for the "weekly_open_times" field.</summary>
    public const int WeeklyOpenTimesFieldNumber = 4;
    private int weeklyOpenTimes_;
    /// <summary>
    /// 周开启次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeeklyOpenTimes {
      get { return weeklyOpenTimes_; }
      set {
        weeklyOpenTimes_ = value;
      }
    }

    /// <summary>Field number for the "start_ts" field.</summary>
    public const int StartTsFieldNumber = 5;
    private ulong startTs_;
    /// <summary>
    /// 开启时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartTs {
      get { return startTs_; }
      set {
        startTs_ = value;
      }
    }

    /// <summary>Field number for the "end_ts" field.</summary>
    public const int EndTsFieldNumber = 6;
    private ulong endTs_;
    /// <summary>
    /// 结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EndTs {
      get { return endTs_; }
      set {
        endTs_ = value;
      }
    }

    /// <summary>Field number for the "player_exp_infos" field.</summary>
    public const int PlayerExpInfosFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Stardom.GuildTeaPartyAddExpInfo> _repeated_playerExpInfos_codec
        = pb::FieldCodec.ForMessage(58, global::Stardom.GuildTeaPartyAddExpInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.GuildTeaPartyAddExpInfo> playerExpInfos_ = new pbc::RepeatedField<global::Stardom.GuildTeaPartyAddExpInfo>();
    /// <summary>
    /// 玩家增加经验信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.GuildTeaPartyAddExpInfo> PlayerExpInfos {
      get { return playerExpInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuildTeaPartyInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuildTeaPartyInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsTeaPartyOpen != other.IsTeaPartyOpen) return false;
      if (OpentimeOption != other.OpentimeOption) return false;
      if (TeaPartyId != other.TeaPartyId) return false;
      if (WeeklyOpenTimes != other.WeeklyOpenTimes) return false;
      if (StartTs != other.StartTs) return false;
      if (EndTs != other.EndTs) return false;
      if(!playerExpInfos_.Equals(other.playerExpInfos_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsTeaPartyOpen != 0) hash ^= IsTeaPartyOpen.GetHashCode();
      if (OpentimeOption != 0) hash ^= OpentimeOption.GetHashCode();
      if (TeaPartyId != 0) hash ^= TeaPartyId.GetHashCode();
      if (WeeklyOpenTimes != 0) hash ^= WeeklyOpenTimes.GetHashCode();
      if (StartTs != 0UL) hash ^= StartTs.GetHashCode();
      if (EndTs != 0UL) hash ^= EndTs.GetHashCode();
      hash ^= playerExpInfos_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsTeaPartyOpen != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsTeaPartyOpen);
      }
      if (OpentimeOption != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OpentimeOption);
      }
      if (TeaPartyId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TeaPartyId);
      }
      if (WeeklyOpenTimes != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(WeeklyOpenTimes);
      }
      if (StartTs != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(StartTs);
      }
      if (EndTs != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(EndTs);
      }
      playerExpInfos_.WriteTo(output, _repeated_playerExpInfos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsTeaPartyOpen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsTeaPartyOpen);
      }
      if (OpentimeOption != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpentimeOption);
      }
      if (TeaPartyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeaPartyId);
      }
      if (WeeklyOpenTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeeklyOpenTimes);
      }
      if (StartTs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartTs);
      }
      if (EndTs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndTs);
      }
      size += playerExpInfos_.CalculateSize(_repeated_playerExpInfos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuildTeaPartyInfo other) {
      if (other == null) {
        return;
      }
      if (other.IsTeaPartyOpen != 0) {
        IsTeaPartyOpen = other.IsTeaPartyOpen;
      }
      if (other.OpentimeOption != 0) {
        OpentimeOption = other.OpentimeOption;
      }
      if (other.TeaPartyId != 0) {
        TeaPartyId = other.TeaPartyId;
      }
      if (other.WeeklyOpenTimes != 0) {
        WeeklyOpenTimes = other.WeeklyOpenTimes;
      }
      if (other.StartTs != 0UL) {
        StartTs = other.StartTs;
      }
      if (other.EndTs != 0UL) {
        EndTs = other.EndTs;
      }
      playerExpInfos_.Add(other.playerExpInfos_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsTeaPartyOpen = input.ReadInt32();
            break;
          }
          case 16: {
            OpentimeOption = input.ReadInt32();
            break;
          }
          case 24: {
            TeaPartyId = input.ReadInt32();
            break;
          }
          case 32: {
            WeeklyOpenTimes = input.ReadInt32();
            break;
          }
          case 40: {
            StartTs = input.ReadUInt64();
            break;
          }
          case 48: {
            EndTs = input.ReadUInt64();
            break;
          }
          case 58: {
            playerExpInfos_.AddEntriesFrom(input, _repeated_playerExpInfos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 协会成员许愿信息
  /// </summary>
  public sealed partial class GuildWishInfo : pb::IMessage<GuildWishInfo> {
    private static readonly pb::MessageParser<GuildWishInfo> _parser = new pb::MessageParser<GuildWishInfo>(() => new GuildWishInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildWishInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildWishInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildWishInfo(GuildWishInfo other) : this() {
      playerId_ = other.playerId_;
      wishDebrisId_ = other.wishDebrisId_;
      switchDebrisItems_ = other.switchDebrisItems_.Clone();
      presentPlayerIds_ = other.presentPlayerIds_.Clone();
      switchedPlayerIds_ = other.switchedPlayerIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildWishInfo Clone() {
      return new GuildWishInfo(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "wish_debris_id" field.</summary>
    public const int WishDebrisIdFieldNumber = 2;
    private int wishDebrisId_;
    /// <summary>
    /// 祈祷的碎片id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WishDebrisId {
      get { return wishDebrisId_; }
      set {
        wishDebrisId_ = value;
      }
    }

    /// <summary>Field number for the "switch_debris_items" field.</summary>
    public const int SwitchDebrisItemsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Stardom.ItemBaseInfo> _repeated_switchDebrisItems_codec
        = pb::FieldCodec.ForMessage(26, global::Stardom.ItemBaseInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.ItemBaseInfo> switchDebrisItems_ = new pbc::RepeatedField<global::Stardom.ItemBaseInfo>();
    /// <summary>
    /// 可以交换的碎片
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.ItemBaseInfo> SwitchDebrisItems {
      get { return switchDebrisItems_; }
    }

    /// <summary>Field number for the "present_player_ids" field.</summary>
    public const int PresentPlayerIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<ulong> _repeated_presentPlayerIds_codec
        = pb::FieldCodec.ForUInt64(34);
    private readonly pbc::RepeatedField<ulong> presentPlayerIds_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// 捐赠过的玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> PresentPlayerIds {
      get { return presentPlayerIds_; }
    }

    /// <summary>Field number for the "switched_player_ids" field.</summary>
    public const int SwitchedPlayerIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<ulong> _repeated_switchedPlayerIds_codec
        = pb::FieldCodec.ForUInt64(42);
    private readonly pbc::RepeatedField<ulong> switchedPlayerIds_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// 已经交换过的玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> SwitchedPlayerIds {
      get { return switchedPlayerIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuildWishInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuildWishInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (WishDebrisId != other.WishDebrisId) return false;
      if(!switchDebrisItems_.Equals(other.switchDebrisItems_)) return false;
      if(!presentPlayerIds_.Equals(other.presentPlayerIds_)) return false;
      if(!switchedPlayerIds_.Equals(other.switchedPlayerIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (WishDebrisId != 0) hash ^= WishDebrisId.GetHashCode();
      hash ^= switchDebrisItems_.GetHashCode();
      hash ^= presentPlayerIds_.GetHashCode();
      hash ^= switchedPlayerIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (WishDebrisId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WishDebrisId);
      }
      switchDebrisItems_.WriteTo(output, _repeated_switchDebrisItems_codec);
      presentPlayerIds_.WriteTo(output, _repeated_presentPlayerIds_codec);
      switchedPlayerIds_.WriteTo(output, _repeated_switchedPlayerIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (WishDebrisId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WishDebrisId);
      }
      size += switchDebrisItems_.CalculateSize(_repeated_switchDebrisItems_codec);
      size += presentPlayerIds_.CalculateSize(_repeated_presentPlayerIds_codec);
      size += switchedPlayerIds_.CalculateSize(_repeated_switchedPlayerIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuildWishInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.WishDebrisId != 0) {
        WishDebrisId = other.WishDebrisId;
      }
      switchDebrisItems_.Add(other.switchDebrisItems_);
      presentPlayerIds_.Add(other.presentPlayerIds_);
      switchedPlayerIds_.Add(other.switchedPlayerIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 16: {
            WishDebrisId = input.ReadInt32();
            break;
          }
          case 26: {
            switchDebrisItems_.AddEntriesFrom(input, _repeated_switchDebrisItems_codec);
            break;
          }
          case 34:
          case 32: {
            presentPlayerIds_.AddEntriesFrom(input, _repeated_presentPlayerIds_codec);
            break;
          }
          case 42:
          case 40: {
            switchedPlayerIds_.AddEntriesFrom(input, _repeated_switchedPlayerIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 协会随从信息
  /// </summary>
  public sealed partial class GuildRetinueInfo : pb::IMessage<GuildRetinueInfo> {
    private static readonly pb::MessageParser<GuildRetinueInfo> _parser = new pb::MessageParser<GuildRetinueInfo>(() => new GuildRetinueInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildRetinueInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildRetinueInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildRetinueInfo(GuildRetinueInfo other) : this() {
      playerId_ = other.playerId_;
      RetinueInfo = other.retinueInfo_ != null ? other.RetinueInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildRetinueInfo Clone() {
      return new GuildRetinueInfo(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "retinue_info" field.</summary>
    public const int RetinueInfoFieldNumber = 2;
    private global::Stardom.AreaEntityRetinueInfo retinueInfo_;
    /// <summary>
    /// 玩家随从信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.AreaEntityRetinueInfo RetinueInfo {
      get { return retinueInfo_; }
      set {
        retinueInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuildRetinueInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuildRetinueInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (!object.Equals(RetinueInfo, other.RetinueInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (retinueInfo_ != null) hash ^= RetinueInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (retinueInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RetinueInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (retinueInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RetinueInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuildRetinueInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.retinueInfo_ != null) {
        if (retinueInfo_ == null) {
          retinueInfo_ = new global::Stardom.AreaEntityRetinueInfo();
        }
        RetinueInfo.MergeFrom(other.RetinueInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (retinueInfo_ == null) {
              retinueInfo_ = new global::Stardom.AreaEntityRetinueInfo();
            }
            input.ReadMessage(retinueInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 协会祈愿信息
  /// </summary>
  public sealed partial class GuildWishRecord : pb::IMessage<GuildWishRecord> {
    private static readonly pb::MessageParser<GuildWishRecord> _parser = new pb::MessageParser<GuildWishRecord>(() => new GuildWishRecord());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildWishRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildWishRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildWishRecord(GuildWishRecord other) : this() {
      recordType_ = other.recordType_;
      sParam1_ = other.sParam1_;
      sParam2_ = other.sParam2_;
      iParam1_ = other.iParam1_;
      iParam2_ = other.iParam2_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildWishRecord Clone() {
      return new GuildWishRecord(this);
    }

    /// <summary>Field number for the "record_type" field.</summary>
    public const int RecordTypeFieldNumber = 1;
    private int recordType_;
    /// <summary>
    /// 记录类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecordType {
      get { return recordType_; }
      set {
        recordType_ = value;
      }
    }

    /// <summary>Field number for the "s_param1" field.</summary>
    public const int SParam1FieldNumber = 2;
    private string sParam1_ = "";
    /// <summary>
    /// 参数1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SParam1 {
      get { return sParam1_; }
      set {
        sParam1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "s_param2" field.</summary>
    public const int SParam2FieldNumber = 3;
    private string sParam2_ = "";
    /// <summary>
    /// 参数2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SParam2 {
      get { return sParam2_; }
      set {
        sParam2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "i_param1" field.</summary>
    public const int IParam1FieldNumber = 4;
    private int iParam1_;
    /// <summary>
    /// 整数参数1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IParam1 {
      get { return iParam1_; }
      set {
        iParam1_ = value;
      }
    }

    /// <summary>Field number for the "i_param2" field.</summary>
    public const int IParam2FieldNumber = 5;
    private int iParam2_;
    /// <summary>
    /// 整数参数2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IParam2 {
      get { return iParam2_; }
      set {
        iParam2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuildWishRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuildWishRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecordType != other.RecordType) return false;
      if (SParam1 != other.SParam1) return false;
      if (SParam2 != other.SParam2) return false;
      if (IParam1 != other.IParam1) return false;
      if (IParam2 != other.IParam2) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RecordType != 0) hash ^= RecordType.GetHashCode();
      if (SParam1.Length != 0) hash ^= SParam1.GetHashCode();
      if (SParam2.Length != 0) hash ^= SParam2.GetHashCode();
      if (IParam1 != 0) hash ^= IParam1.GetHashCode();
      if (IParam2 != 0) hash ^= IParam2.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecordType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RecordType);
      }
      if (SParam1.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SParam1);
      }
      if (SParam2.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SParam2);
      }
      if (IParam1 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(IParam1);
      }
      if (IParam2 != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(IParam2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecordType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecordType);
      }
      if (SParam1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SParam1);
      }
      if (SParam2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SParam2);
      }
      if (IParam1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IParam1);
      }
      if (IParam2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IParam2);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuildWishRecord other) {
      if (other == null) {
        return;
      }
      if (other.RecordType != 0) {
        RecordType = other.RecordType;
      }
      if (other.SParam1.Length != 0) {
        SParam1 = other.SParam1;
      }
      if (other.SParam2.Length != 0) {
        SParam2 = other.SParam2;
      }
      if (other.IParam1 != 0) {
        IParam1 = other.IParam1;
      }
      if (other.IParam2 != 0) {
        IParam2 = other.IParam2;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RecordType = input.ReadInt32();
            break;
          }
          case 18: {
            SParam1 = input.ReadString();
            break;
          }
          case 26: {
            SParam2 = input.ReadString();
            break;
          }
          case 32: {
            IParam1 = input.ReadInt32();
            break;
          }
          case 40: {
            IParam2 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 协会技能信息
  /// </summary>
  public sealed partial class GuildSkillInfo : pb::IMessage<GuildSkillInfo> {
    private static readonly pb::MessageParser<GuildSkillInfo> _parser = new pb::MessageParser<GuildSkillInfo>(() => new GuildSkillInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildSkillInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildSkillInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildSkillInfo(GuildSkillInfo other) : this() {
      skillId_ = other.skillId_;
      skillGroupId_ = other.skillGroupId_;
      skillLevel_ = other.skillLevel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildSkillInfo Clone() {
      return new GuildSkillInfo(this);
    }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private int skillId_;
    /// <summary>
    /// 技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "skill_group_id" field.</summary>
    public const int SkillGroupIdFieldNumber = 2;
    private int skillGroupId_;
    /// <summary>
    /// 技能组id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillGroupId {
      get { return skillGroupId_; }
      set {
        skillGroupId_ = value;
      }
    }

    /// <summary>Field number for the "skill_level" field.</summary>
    public const int SkillLevelFieldNumber = 3;
    private int skillLevel_;
    /// <summary>
    /// 技能等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillLevel {
      get { return skillLevel_; }
      set {
        skillLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuildSkillInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuildSkillInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkillId != other.SkillId) return false;
      if (SkillGroupId != other.SkillGroupId) return false;
      if (SkillLevel != other.SkillLevel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SkillId != 0) hash ^= SkillId.GetHashCode();
      if (SkillGroupId != 0) hash ^= SkillGroupId.GetHashCode();
      if (SkillLevel != 0) hash ^= SkillLevel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkillId);
      }
      if (SkillGroupId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SkillGroupId);
      }
      if (SkillLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SkillLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (SkillGroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillGroupId);
      }
      if (SkillLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuildSkillInfo other) {
      if (other == null) {
        return;
      }
      if (other.SkillId != 0) {
        SkillId = other.SkillId;
      }
      if (other.SkillGroupId != 0) {
        SkillGroupId = other.SkillGroupId;
      }
      if (other.SkillLevel != 0) {
        SkillLevel = other.SkillLevel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillId = input.ReadInt32();
            break;
          }
          case 16: {
            SkillGroupId = input.ReadInt32();
            break;
          }
          case 24: {
            SkillLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 粉丝延迟队列 (后端用)
  /// </summary>
  public sealed partial class FansDelayInfo : pb::IMessage<FansDelayInfo> {
    private static readonly pb::MessageParser<FansDelayInfo> _parser = new pb::MessageParser<FansDelayInfo>(() => new FansDelayInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FansDelayInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FansDelayInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FansDelayInfo(FansDelayInfo other) : this() {
      notificationType_ = other.notificationType_;
      notificationParam_ = other.notificationParam_;
      addFans_ = other.addFans_;
      subFans_ = other.subFans_;
      addBlackRatio_ = other.addBlackRatio_;
      subBlackRatio_ = other.subBlackRatio_;
      delayTime_ = other.delayTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FansDelayInfo Clone() {
      return new FansDelayInfo(this);
    }

    /// <summary>Field number for the "notification_type" field.</summary>
    public const int NotificationTypeFieldNumber = 1;
    private int notificationType_;
    /// <summary>
    /// 通知类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NotificationType {
      get { return notificationType_; }
      set {
        notificationType_ = value;
      }
    }

    /// <summary>Field number for the "notification_param" field.</summary>
    public const int NotificationParamFieldNumber = 2;
    private int notificationParam_;
    /// <summary>
    /// 通知参数（一般是配置id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NotificationParam {
      get { return notificationParam_; }
      set {
        notificationParam_ = value;
      }
    }

    /// <summary>Field number for the "add_fans" field.</summary>
    public const int AddFansFieldNumber = 3;
    private int addFans_;
    /// <summary>
    /// 增加粉丝
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddFans {
      get { return addFans_; }
      set {
        addFans_ = value;
      }
    }

    /// <summary>Field number for the "sub_fans" field.</summary>
    public const int SubFansFieldNumber = 4;
    private int subFans_;
    /// <summary>
    /// 减少粉丝
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubFans {
      get { return subFans_; }
      set {
        subFans_ = value;
      }
    }

    /// <summary>Field number for the "add_black_ratio" field.</summary>
    public const int AddBlackRatioFieldNumber = 5;
    private int addBlackRatio_;
    /// <summary>
    /// 减少黑粉比例
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddBlackRatio {
      get { return addBlackRatio_; }
      set {
        addBlackRatio_ = value;
      }
    }

    /// <summary>Field number for the "sub_black_ratio" field.</summary>
    public const int SubBlackRatioFieldNumber = 6;
    private int subBlackRatio_;
    /// <summary>
    /// 减少黑粉比例
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubBlackRatio {
      get { return subBlackRatio_; }
      set {
        subBlackRatio_ = value;
      }
    }

    /// <summary>Field number for the "delay_time" field.</summary>
    public const int DelayTimeFieldNumber = 7;
    private ulong delayTime_;
    /// <summary>
    /// 延迟时间点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DelayTime {
      get { return delayTime_; }
      set {
        delayTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FansDelayInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FansDelayInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NotificationType != other.NotificationType) return false;
      if (NotificationParam != other.NotificationParam) return false;
      if (AddFans != other.AddFans) return false;
      if (SubFans != other.SubFans) return false;
      if (AddBlackRatio != other.AddBlackRatio) return false;
      if (SubBlackRatio != other.SubBlackRatio) return false;
      if (DelayTime != other.DelayTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NotificationType != 0) hash ^= NotificationType.GetHashCode();
      if (NotificationParam != 0) hash ^= NotificationParam.GetHashCode();
      if (AddFans != 0) hash ^= AddFans.GetHashCode();
      if (SubFans != 0) hash ^= SubFans.GetHashCode();
      if (AddBlackRatio != 0) hash ^= AddBlackRatio.GetHashCode();
      if (SubBlackRatio != 0) hash ^= SubBlackRatio.GetHashCode();
      if (DelayTime != 0UL) hash ^= DelayTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NotificationType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NotificationType);
      }
      if (NotificationParam != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NotificationParam);
      }
      if (AddFans != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AddFans);
      }
      if (SubFans != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SubFans);
      }
      if (AddBlackRatio != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AddBlackRatio);
      }
      if (SubBlackRatio != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SubBlackRatio);
      }
      if (DelayTime != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(DelayTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NotificationType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NotificationType);
      }
      if (NotificationParam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NotificationParam);
      }
      if (AddFans != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddFans);
      }
      if (SubFans != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubFans);
      }
      if (AddBlackRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddBlackRatio);
      }
      if (SubBlackRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubBlackRatio);
      }
      if (DelayTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DelayTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FansDelayInfo other) {
      if (other == null) {
        return;
      }
      if (other.NotificationType != 0) {
        NotificationType = other.NotificationType;
      }
      if (other.NotificationParam != 0) {
        NotificationParam = other.NotificationParam;
      }
      if (other.AddFans != 0) {
        AddFans = other.AddFans;
      }
      if (other.SubFans != 0) {
        SubFans = other.SubFans;
      }
      if (other.AddBlackRatio != 0) {
        AddBlackRatio = other.AddBlackRatio;
      }
      if (other.SubBlackRatio != 0) {
        SubBlackRatio = other.SubBlackRatio;
      }
      if (other.DelayTime != 0UL) {
        DelayTime = other.DelayTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NotificationType = input.ReadInt32();
            break;
          }
          case 16: {
            NotificationParam = input.ReadInt32();
            break;
          }
          case 24: {
            AddFans = input.ReadInt32();
            break;
          }
          case 32: {
            SubFans = input.ReadInt32();
            break;
          }
          case 40: {
            AddBlackRatio = input.ReadInt32();
            break;
          }
          case 48: {
            SubBlackRatio = input.ReadInt32();
            break;
          }
          case 56: {
            DelayTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 单个后援会活动信息
  /// </summary>
  public sealed partial class ClubActivity : pb::IMessage<ClubActivity> {
    private static readonly pb::MessageParser<ClubActivity> _parser = new pb::MessageParser<ClubActivity>(() => new ClubActivity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClubActivity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubActivity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubActivity(ClubActivity other) : this() {
      clubActivityId_ = other.clubActivityId_;
      useFcNum_ = other.useFcNum_;
      endTime_ = other.endTime_;
      isReward_ = other.isReward_;
      isUrgent_ = other.isUrgent_;
      sort_ = other.sort_;
      isNew_ = other.isNew_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubActivity Clone() {
      return new ClubActivity(this);
    }

    /// <summary>Field number for the "club_activity_id" field.</summary>
    public const int ClubActivityIdFieldNumber = 1;
    private int clubActivityId_;
    /// <summary>
    /// 后援会活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClubActivityId {
      get { return clubActivityId_; }
      set {
        clubActivityId_ = value;
      }
    }

    /// <summary>Field number for the "use_fc_num" field.</summary>
    public const int UseFcNumFieldNumber = 2;
    private int useFcNum_;
    /// <summary>
    /// 分配的人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UseFcNum {
      get { return useFcNum_; }
      set {
        useFcNum_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 3;
    private ulong endTime_;
    /// <summary>
    /// 结束时间 (0是可安排，不为0是进行中，当前时间大于结束时间为已完成)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "is_reward" field.</summary>
    public const int IsRewardFieldNumber = 4;
    private int isReward_;
    /// <summary>
    /// 是否已领取 (0为未领取，1为已领取)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsReward {
      get { return isReward_; }
      set {
        isReward_ = value;
      }
    }

    /// <summary>Field number for the "is_urgent" field.</summary>
    public const int IsUrgentFieldNumber = 5;
    private int isUrgent_;
    /// <summary>
    /// 是否是紧急
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsUrgent {
      get { return isUrgent_; }
      set {
        isUrgent_ = value;
      }
    }

    /// <summary>Field number for the "sort" field.</summary>
    public const int SortFieldNumber = 6;
    private int sort_;
    /// <summary>
    /// 排序权重
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sort {
      get { return sort_; }
      set {
        sort_ = value;
      }
    }

    /// <summary>Field number for the "is_new" field.</summary>
    public const int IsNewFieldNumber = 7;
    private int isNew_;
    /// <summary>
    /// 是否刷新
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsNew {
      get { return isNew_; }
      set {
        isNew_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClubActivity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClubActivity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClubActivityId != other.ClubActivityId) return false;
      if (UseFcNum != other.UseFcNum) return false;
      if (EndTime != other.EndTime) return false;
      if (IsReward != other.IsReward) return false;
      if (IsUrgent != other.IsUrgent) return false;
      if (Sort != other.Sort) return false;
      if (IsNew != other.IsNew) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClubActivityId != 0) hash ^= ClubActivityId.GetHashCode();
      if (UseFcNum != 0) hash ^= UseFcNum.GetHashCode();
      if (EndTime != 0UL) hash ^= EndTime.GetHashCode();
      if (IsReward != 0) hash ^= IsReward.GetHashCode();
      if (IsUrgent != 0) hash ^= IsUrgent.GetHashCode();
      if (Sort != 0) hash ^= Sort.GetHashCode();
      if (IsNew != 0) hash ^= IsNew.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClubActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ClubActivityId);
      }
      if (UseFcNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UseFcNum);
      }
      if (EndTime != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(EndTime);
      }
      if (IsReward != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(IsReward);
      }
      if (IsUrgent != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(IsUrgent);
      }
      if (Sort != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Sort);
      }
      if (IsNew != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(IsNew);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClubActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClubActivityId);
      }
      if (UseFcNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UseFcNum);
      }
      if (EndTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndTime);
      }
      if (IsReward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsReward);
      }
      if (IsUrgent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsUrgent);
      }
      if (Sort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sort);
      }
      if (IsNew != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsNew);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClubActivity other) {
      if (other == null) {
        return;
      }
      if (other.ClubActivityId != 0) {
        ClubActivityId = other.ClubActivityId;
      }
      if (other.UseFcNum != 0) {
        UseFcNum = other.UseFcNum;
      }
      if (other.EndTime != 0UL) {
        EndTime = other.EndTime;
      }
      if (other.IsReward != 0) {
        IsReward = other.IsReward;
      }
      if (other.IsUrgent != 0) {
        IsUrgent = other.IsUrgent;
      }
      if (other.Sort != 0) {
        Sort = other.Sort;
      }
      if (other.IsNew != 0) {
        IsNew = other.IsNew;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ClubActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            UseFcNum = input.ReadInt32();
            break;
          }
          case 24: {
            EndTime = input.ReadUInt64();
            break;
          }
          case 32: {
            IsReward = input.ReadInt32();
            break;
          }
          case 40: {
            IsUrgent = input.ReadInt32();
            break;
          }
          case 48: {
            Sort = input.ReadInt32();
            break;
          }
          case 56: {
            IsNew = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 核心粉丝分组数据
  /// </summary>
  public sealed partial class FansClassInfo : pb::IMessage<FansClassInfo> {
    private static readonly pb::MessageParser<FansClassInfo> _parser = new pb::MessageParser<FansClassInfo>(() => new FansClassInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FansClassInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FansClassInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FansClassInfo(FansClassInfo other) : this() {
      fcType_ = other.fcType_;
      fcNum_ = other.fcNum_;
      fcLeisureNum_ = other.fcLeisureNum_;
      fcSkillLevel_ = other.fcSkillLevel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FansClassInfo Clone() {
      return new FansClassInfo(this);
    }

    /// <summary>Field number for the "fc_type" field.</summary>
    public const int FcTypeFieldNumber = 1;
    private int fcType_;
    /// <summary>
    /// 粉丝分组类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FcType {
      get { return fcType_; }
      set {
        fcType_ = value;
      }
    }

    /// <summary>Field number for the "fc_num" field.</summary>
    public const int FcNumFieldNumber = 2;
    private int fcNum_;
    /// <summary>
    /// 粉丝数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FcNum {
      get { return fcNum_; }
      set {
        fcNum_ = value;
      }
    }

    /// <summary>Field number for the "fc_leisure_num" field.</summary>
    public const int FcLeisureNumFieldNumber = 3;
    private int fcLeisureNum_;
    /// <summary>
    /// 空闲数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FcLeisureNum {
      get { return fcLeisureNum_; }
      set {
        fcLeisureNum_ = value;
      }
    }

    /// <summary>Field number for the "fc_skill_level" field.</summary>
    public const int FcSkillLevelFieldNumber = 4;
    private int fcSkillLevel_;
    /// <summary>
    /// 粉丝技能等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FcSkillLevel {
      get { return fcSkillLevel_; }
      set {
        fcSkillLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FansClassInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FansClassInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FcType != other.FcType) return false;
      if (FcNum != other.FcNum) return false;
      if (FcLeisureNum != other.FcLeisureNum) return false;
      if (FcSkillLevel != other.FcSkillLevel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FcType != 0) hash ^= FcType.GetHashCode();
      if (FcNum != 0) hash ^= FcNum.GetHashCode();
      if (FcLeisureNum != 0) hash ^= FcLeisureNum.GetHashCode();
      if (FcSkillLevel != 0) hash ^= FcSkillLevel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FcType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FcType);
      }
      if (FcNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FcNum);
      }
      if (FcLeisureNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FcLeisureNum);
      }
      if (FcSkillLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FcSkillLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FcType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FcType);
      }
      if (FcNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FcNum);
      }
      if (FcLeisureNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FcLeisureNum);
      }
      if (FcSkillLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FcSkillLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FansClassInfo other) {
      if (other == null) {
        return;
      }
      if (other.FcType != 0) {
        FcType = other.FcType;
      }
      if (other.FcNum != 0) {
        FcNum = other.FcNum;
      }
      if (other.FcLeisureNum != 0) {
        FcLeisureNum = other.FcLeisureNum;
      }
      if (other.FcSkillLevel != 0) {
        FcSkillLevel = other.FcSkillLevel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FcType = input.ReadInt32();
            break;
          }
          case 16: {
            FcNum = input.ReadInt32();
            break;
          }
          case 24: {
            FcLeisureNum = input.ReadInt32();
            break;
          }
          case 32: {
            FcSkillLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 后援会活动信息
  /// </summary>
  public sealed partial class FansClubActivityInfo : pb::IMessage<FansClubActivityInfo> {
    private static readonly pb::MessageParser<FansClubActivityInfo> _parser = new pb::MessageParser<FansClubActivityInfo>(() => new FansClubActivityInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FansClubActivityInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FansClubActivityInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FansClubActivityInfo(FansClubActivityInfo other) : this() {
      refreshTimes_ = other.refreshTimes_;
      extraTimes_ = other.extraTimes_;
      clubRound_ = other.clubRound_;
      clubNextRound_ = other.clubNextRound_;
      inviteFcNum_ = other.inviteFcNum_;
      fansClasses_ = other.fansClasses_.Clone();
      clubActivitys_ = other.clubActivitys_.Clone();
      fansClassLetterIds_ = other.fansClassLetterIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FansClubActivityInfo Clone() {
      return new FansClubActivityInfo(this);
    }

    /// <summary>Field number for the "refresh_times" field.</summary>
    public const int RefreshTimesFieldNumber = 1;
    private int refreshTimes_;
    /// <summary>
    /// 今日已刷新次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefreshTimes {
      get { return refreshTimes_; }
      set {
        refreshTimes_ = value;
      }
    }

    /// <summary>Field number for the "extra_times" field.</summary>
    public const int ExtraTimesFieldNumber = 2;
    private int extraTimes_;
    /// <summary>
    /// 增加的刷新次数(不会清空)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtraTimes {
      get { return extraTimes_; }
      set {
        extraTimes_ = value;
      }
    }

    /// <summary>Field number for the "club_round" field.</summary>
    public const int ClubRoundFieldNumber = 3;
    private int clubRound_;
    /// <summary>
    /// 当前第几轮
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClubRound {
      get { return clubRound_; }
      set {
        clubRound_ = value;
      }
    }

    /// <summary>Field number for the "club_next_round" field.</summary>
    public const int ClubNextRoundFieldNumber = 4;
    private int clubNextRound_;
    /// <summary>
    /// 下一轮（第二天0时为1）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClubNextRound {
      get { return clubNextRound_; }
      set {
        clubNextRound_ = value;
      }
    }

    /// <summary>Field number for the "invite_fc_num" field.</summary>
    public const int InviteFcNumFieldNumber = 6;
    private int inviteFcNum_;
    /// <summary>
    /// 可招聘人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InviteFcNum {
      get { return inviteFcNum_; }
      set {
        inviteFcNum_ = value;
      }
    }

    /// <summary>Field number for the "fans_classes" field.</summary>
    public const int FansClassesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Stardom.FansClassInfo> _repeated_fansClasses_codec
        = pb::FieldCodec.ForMessage(58, global::Stardom.FansClassInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.FansClassInfo> fansClasses_ = new pbc::RepeatedField<global::Stardom.FansClassInfo>();
    /// <summary>
    /// 粉丝分组情况
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.FansClassInfo> FansClasses {
      get { return fansClasses_; }
    }

    /// <summary>Field number for the "club_activitys" field.</summary>
    public const int ClubActivitysFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Stardom.ClubActivity> _repeated_clubActivitys_codec
        = pb::FieldCodec.ForMessage(66, global::Stardom.ClubActivity.Parser);
    private readonly pbc::RepeatedField<global::Stardom.ClubActivity> clubActivitys_ = new pbc::RepeatedField<global::Stardom.ClubActivity>();
    /// <summary>
    /// 活动列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.ClubActivity> ClubActivitys {
      get { return clubActivitys_; }
    }

    /// <summary>Field number for the "fans_class_letter_ids" field.</summary>
    public const int FansClassLetterIdsFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_fansClassLetterIds_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> fansClassLetterIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 已阅读粉丝信封id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FansClassLetterIds {
      get { return fansClassLetterIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FansClubActivityInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FansClubActivityInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RefreshTimes != other.RefreshTimes) return false;
      if (ExtraTimes != other.ExtraTimes) return false;
      if (ClubRound != other.ClubRound) return false;
      if (ClubNextRound != other.ClubNextRound) return false;
      if (InviteFcNum != other.InviteFcNum) return false;
      if(!fansClasses_.Equals(other.fansClasses_)) return false;
      if(!clubActivitys_.Equals(other.clubActivitys_)) return false;
      if(!fansClassLetterIds_.Equals(other.fansClassLetterIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RefreshTimes != 0) hash ^= RefreshTimes.GetHashCode();
      if (ExtraTimes != 0) hash ^= ExtraTimes.GetHashCode();
      if (ClubRound != 0) hash ^= ClubRound.GetHashCode();
      if (ClubNextRound != 0) hash ^= ClubNextRound.GetHashCode();
      if (InviteFcNum != 0) hash ^= InviteFcNum.GetHashCode();
      hash ^= fansClasses_.GetHashCode();
      hash ^= clubActivitys_.GetHashCode();
      hash ^= fansClassLetterIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RefreshTimes != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RefreshTimes);
      }
      if (ExtraTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ExtraTimes);
      }
      if (ClubRound != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ClubRound);
      }
      if (ClubNextRound != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ClubNextRound);
      }
      if (InviteFcNum != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(InviteFcNum);
      }
      fansClasses_.WriteTo(output, _repeated_fansClasses_codec);
      clubActivitys_.WriteTo(output, _repeated_clubActivitys_codec);
      fansClassLetterIds_.WriteTo(output, _repeated_fansClassLetterIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RefreshTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefreshTimes);
      }
      if (ExtraTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtraTimes);
      }
      if (ClubRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClubRound);
      }
      if (ClubNextRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClubNextRound);
      }
      if (InviteFcNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InviteFcNum);
      }
      size += fansClasses_.CalculateSize(_repeated_fansClasses_codec);
      size += clubActivitys_.CalculateSize(_repeated_clubActivitys_codec);
      size += fansClassLetterIds_.CalculateSize(_repeated_fansClassLetterIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FansClubActivityInfo other) {
      if (other == null) {
        return;
      }
      if (other.RefreshTimes != 0) {
        RefreshTimes = other.RefreshTimes;
      }
      if (other.ExtraTimes != 0) {
        ExtraTimes = other.ExtraTimes;
      }
      if (other.ClubRound != 0) {
        ClubRound = other.ClubRound;
      }
      if (other.ClubNextRound != 0) {
        ClubNextRound = other.ClubNextRound;
      }
      if (other.InviteFcNum != 0) {
        InviteFcNum = other.InviteFcNum;
      }
      fansClasses_.Add(other.fansClasses_);
      clubActivitys_.Add(other.clubActivitys_);
      fansClassLetterIds_.Add(other.fansClassLetterIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RefreshTimes = input.ReadInt32();
            break;
          }
          case 16: {
            ExtraTimes = input.ReadInt32();
            break;
          }
          case 24: {
            ClubRound = input.ReadInt32();
            break;
          }
          case 32: {
            ClubNextRound = input.ReadInt32();
            break;
          }
          case 48: {
            InviteFcNum = input.ReadInt32();
            break;
          }
          case 58: {
            fansClasses_.AddEntriesFrom(input, _repeated_fansClasses_codec);
            break;
          }
          case 66: {
            clubActivitys_.AddEntriesFrom(input, _repeated_clubActivitys_codec);
            break;
          }
          case 74:
          case 72: {
            fansClassLetterIds_.AddEntriesFrom(input, _repeated_fansClassLetterIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 粉丝成就
  /// </summary>
  public sealed partial class FansAchievement : pb::IMessage<FansAchievement> {
    private static readonly pb::MessageParser<FansAchievement> _parser = new pb::MessageParser<FansAchievement>(() => new FansAchievement());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FansAchievement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FansAchievement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FansAchievement(FansAchievement other) : this() {
      achievementType_ = other.achievementType_;
      param1_ = other.param1_;
      param2_ = other.param2_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FansAchievement Clone() {
      return new FansAchievement(this);
    }

    /// <summary>Field number for the "achievement_type" field.</summary>
    public const int AchievementTypeFieldNumber = 1;
    private int achievementType_;
    /// <summary>
    /// 成就类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AchievementType {
      get { return achievementType_; }
      set {
        achievementType_ = value;
      }
    }

    /// <summary>Field number for the "param1" field.</summary>
    public const int Param1FieldNumber = 2;
    private int param1_;
    /// <summary>
    /// 参数1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Param1 {
      get { return param1_; }
      set {
        param1_ = value;
      }
    }

    /// <summary>Field number for the "param2" field.</summary>
    public const int Param2FieldNumber = 3;
    private int param2_;
    /// <summary>
    /// 参数2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Param2 {
      get { return param2_; }
      set {
        param2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FansAchievement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FansAchievement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AchievementType != other.AchievementType) return false;
      if (Param1 != other.Param1) return false;
      if (Param2 != other.Param2) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AchievementType != 0) hash ^= AchievementType.GetHashCode();
      if (Param1 != 0) hash ^= Param1.GetHashCode();
      if (Param2 != 0) hash ^= Param2.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AchievementType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AchievementType);
      }
      if (Param1 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Param1);
      }
      if (Param2 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Param2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AchievementType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AchievementType);
      }
      if (Param1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Param1);
      }
      if (Param2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Param2);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FansAchievement other) {
      if (other == null) {
        return;
      }
      if (other.AchievementType != 0) {
        AchievementType = other.AchievementType;
      }
      if (other.Param1 != 0) {
        Param1 = other.Param1;
      }
      if (other.Param2 != 0) {
        Param2 = other.Param2;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AchievementType = input.ReadInt32();
            break;
          }
          case 16: {
            Param1 = input.ReadInt32();
            break;
          }
          case 24: {
            Param2 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 粉丝公益
  /// </summary>
  public sealed partial class FansPublicBenefit : pb::IMessage<FansPublicBenefit> {
    private static readonly pb::MessageParser<FansPublicBenefit> _parser = new pb::MessageParser<FansPublicBenefit>(() => new FansPublicBenefit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FansPublicBenefit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FansPublicBenefit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FansPublicBenefit(FansPublicBenefit other) : this() {
      benefitId_ = other.benefitId_;
      dailyContribution_ = other.dailyContribution_;
      cooldownTs_ = other.cooldownTs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FansPublicBenefit Clone() {
      return new FansPublicBenefit(this);
    }

    /// <summary>Field number for the "benefit_id" field.</summary>
    public const int BenefitIdFieldNumber = 1;
    private int benefitId_;
    /// <summary>
    /// 公益id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BenefitId {
      get { return benefitId_; }
      set {
        benefitId_ = value;
      }
    }

    /// <summary>Field number for the "daily_contribution" field.</summary>
    public const int DailyContributionFieldNumber = 2;
    private int dailyContribution_;
    /// <summary>
    /// 当日已贡献次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DailyContribution {
      get { return dailyContribution_; }
      set {
        dailyContribution_ = value;
      }
    }

    /// <summary>Field number for the "cooldown_ts" field.</summary>
    public const int CooldownTsFieldNumber = 3;
    private ulong cooldownTs_;
    /// <summary>
    /// 冷却时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CooldownTs {
      get { return cooldownTs_; }
      set {
        cooldownTs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FansPublicBenefit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FansPublicBenefit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BenefitId != other.BenefitId) return false;
      if (DailyContribution != other.DailyContribution) return false;
      if (CooldownTs != other.CooldownTs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BenefitId != 0) hash ^= BenefitId.GetHashCode();
      if (DailyContribution != 0) hash ^= DailyContribution.GetHashCode();
      if (CooldownTs != 0UL) hash ^= CooldownTs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BenefitId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BenefitId);
      }
      if (DailyContribution != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DailyContribution);
      }
      if (CooldownTs != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(CooldownTs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BenefitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BenefitId);
      }
      if (DailyContribution != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DailyContribution);
      }
      if (CooldownTs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CooldownTs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FansPublicBenefit other) {
      if (other == null) {
        return;
      }
      if (other.BenefitId != 0) {
        BenefitId = other.BenefitId;
      }
      if (other.DailyContribution != 0) {
        DailyContribution = other.DailyContribution;
      }
      if (other.CooldownTs != 0UL) {
        CooldownTs = other.CooldownTs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BenefitId = input.ReadInt32();
            break;
          }
          case 16: {
            DailyContribution = input.ReadInt32();
            break;
          }
          case 24: {
            CooldownTs = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 粉丝人气打榜
  /// </summary>
  public sealed partial class FansPopularity : pb::IMessage<FansPopularity> {
    private static readonly pb::MessageParser<FansPopularity> _parser = new pb::MessageParser<FansPopularity>(() => new FansPopularity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FansPopularity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FansPopularity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FansPopularity(FansPopularity other) : this() {
      popularityId_ = other.popularityId_;
      dailyTimes_ = other.dailyTimes_;
      dailyFeeTimes_ = other.dailyFeeTimes_;
      dailyPopularity_ = other.dailyPopularity_;
      param_ = other.param_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FansPopularity Clone() {
      return new FansPopularity(this);
    }

    /// <summary>Field number for the "popularity_id" field.</summary>
    public const int PopularityIdFieldNumber = 1;
    private int popularityId_;
    /// <summary>
    /// 人气id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PopularityId {
      get { return popularityId_; }
      set {
        popularityId_ = value;
      }
    }

    /// <summary>Field number for the "daily_times" field.</summary>
    public const int DailyTimesFieldNumber = 2;
    private int dailyTimes_;
    /// <summary>
    /// 今日次数（关卡）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DailyTimes {
      get { return dailyTimes_; }
      set {
        dailyTimes_ = value;
      }
    }

    /// <summary>Field number for the "daily_fee_times" field.</summary>
    public const int DailyFeeTimesFieldNumber = 3;
    private int dailyFeeTimes_;
    /// <summary>
    /// 今日付费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DailyFeeTimes {
      get { return dailyFeeTimes_; }
      set {
        dailyFeeTimes_ = value;
      }
    }

    /// <summary>Field number for the "daily_popularity" field.</summary>
    public const int DailyPopularityFieldNumber = 4;
    private int dailyPopularity_;
    /// <summary>
    /// 今日获得人气
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DailyPopularity {
      get { return dailyPopularity_; }
      set {
        dailyPopularity_ = value;
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 5;
    private int param_;
    /// <summary>
    /// 存储剩余值（前端暂没用）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Param {
      get { return param_; }
      set {
        param_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FansPopularity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FansPopularity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PopularityId != other.PopularityId) return false;
      if (DailyTimes != other.DailyTimes) return false;
      if (DailyFeeTimes != other.DailyFeeTimes) return false;
      if (DailyPopularity != other.DailyPopularity) return false;
      if (Param != other.Param) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PopularityId != 0) hash ^= PopularityId.GetHashCode();
      if (DailyTimes != 0) hash ^= DailyTimes.GetHashCode();
      if (DailyFeeTimes != 0) hash ^= DailyFeeTimes.GetHashCode();
      if (DailyPopularity != 0) hash ^= DailyPopularity.GetHashCode();
      if (Param != 0) hash ^= Param.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PopularityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PopularityId);
      }
      if (DailyTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DailyTimes);
      }
      if (DailyFeeTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DailyFeeTimes);
      }
      if (DailyPopularity != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DailyPopularity);
      }
      if (Param != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Param);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PopularityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PopularityId);
      }
      if (DailyTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DailyTimes);
      }
      if (DailyFeeTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DailyFeeTimes);
      }
      if (DailyPopularity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DailyPopularity);
      }
      if (Param != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Param);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FansPopularity other) {
      if (other == null) {
        return;
      }
      if (other.PopularityId != 0) {
        PopularityId = other.PopularityId;
      }
      if (other.DailyTimes != 0) {
        DailyTimes = other.DailyTimes;
      }
      if (other.DailyFeeTimes != 0) {
        DailyFeeTimes = other.DailyFeeTimes;
      }
      if (other.DailyPopularity != 0) {
        DailyPopularity = other.DailyPopularity;
      }
      if (other.Param != 0) {
        Param = other.Param;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PopularityId = input.ReadInt32();
            break;
          }
          case 16: {
            DailyTimes = input.ReadInt32();
            break;
          }
          case 24: {
            DailyFeeTimes = input.ReadInt32();
            break;
          }
          case 32: {
            DailyPopularity = input.ReadInt32();
            break;
          }
          case 40: {
            Param = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 粉丝动态,日志
  /// </summary>
  public sealed partial class FansNote : pb::IMessage<FansNote> {
    private static readonly pb::MessageParser<FansNote> _parser = new pb::MessageParser<FansNote>(() => new FansNote());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FansNote> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FansNote() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FansNote(FansNote other) : this() {
      notificationType_ = other.notificationType_;
      notificationParam_ = other.notificationParam_;
      notificationTime_ = other.notificationTime_;
      addFans_ = other.addFans_;
      subFans_ = other.subFans_;
      addBlackRatio_ = other.addBlackRatio_;
      subBlackRatio_ = other.subBlackRatio_;
      noteParams_ = other.noteParams_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FansNote Clone() {
      return new FansNote(this);
    }

    /// <summary>Field number for the "notification_type" field.</summary>
    public const int NotificationTypeFieldNumber = 1;
    private int notificationType_;
    /// <summary>
    /// 动态类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NotificationType {
      get { return notificationType_; }
      set {
        notificationType_ = value;
      }
    }

    /// <summary>Field number for the "notification_param" field.</summary>
    public const int NotificationParamFieldNumber = 2;
    private int notificationParam_;
    /// <summary>
    /// 动态类型参数, 配置id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NotificationParam {
      get { return notificationParam_; }
      set {
        notificationParam_ = value;
      }
    }

    /// <summary>Field number for the "notification_time" field.</summary>
    public const int NotificationTimeFieldNumber = 3;
    private ulong notificationTime_;
    /// <summary>
    /// 动态发生时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NotificationTime {
      get { return notificationTime_; }
      set {
        notificationTime_ = value;
      }
    }

    /// <summary>Field number for the "add_fans" field.</summary>
    public const int AddFansFieldNumber = 4;
    private int addFans_;
    /// <summary>
    /// 增加粉丝
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddFans {
      get { return addFans_; }
      set {
        addFans_ = value;
      }
    }

    /// <summary>Field number for the "sub_fans" field.</summary>
    public const int SubFansFieldNumber = 5;
    private int subFans_;
    /// <summary>
    /// 减少粉丝
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubFans {
      get { return subFans_; }
      set {
        subFans_ = value;
      }
    }

    /// <summary>Field number for the "add_black_ratio" field.</summary>
    public const int AddBlackRatioFieldNumber = 6;
    private int addBlackRatio_;
    /// <summary>
    /// 增加黑粉比例
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddBlackRatio {
      get { return addBlackRatio_; }
      set {
        addBlackRatio_ = value;
      }
    }

    /// <summary>Field number for the "sub_black_ratio" field.</summary>
    public const int SubBlackRatioFieldNumber = 7;
    private int subBlackRatio_;
    /// <summary>
    /// 减少黑粉比例
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubBlackRatio {
      get { return subBlackRatio_; }
      set {
        subBlackRatio_ = value;
      }
    }

    /// <summary>Field number for the "note_params" field.</summary>
    public const int NoteParamsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Stardom.KeyParam> _repeated_noteParams_codec
        = pb::FieldCodec.ForMessage(66, global::Stardom.KeyParam.Parser);
    private readonly pbc::RepeatedField<global::Stardom.KeyParam> noteParams_ = new pbc::RepeatedField<global::Stardom.KeyParam>();
    /// <summary>
    /// 动态参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.KeyParam> NoteParams {
      get { return noteParams_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FansNote);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FansNote other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NotificationType != other.NotificationType) return false;
      if (NotificationParam != other.NotificationParam) return false;
      if (NotificationTime != other.NotificationTime) return false;
      if (AddFans != other.AddFans) return false;
      if (SubFans != other.SubFans) return false;
      if (AddBlackRatio != other.AddBlackRatio) return false;
      if (SubBlackRatio != other.SubBlackRatio) return false;
      if(!noteParams_.Equals(other.noteParams_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NotificationType != 0) hash ^= NotificationType.GetHashCode();
      if (NotificationParam != 0) hash ^= NotificationParam.GetHashCode();
      if (NotificationTime != 0UL) hash ^= NotificationTime.GetHashCode();
      if (AddFans != 0) hash ^= AddFans.GetHashCode();
      if (SubFans != 0) hash ^= SubFans.GetHashCode();
      if (AddBlackRatio != 0) hash ^= AddBlackRatio.GetHashCode();
      if (SubBlackRatio != 0) hash ^= SubBlackRatio.GetHashCode();
      hash ^= noteParams_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NotificationType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NotificationType);
      }
      if (NotificationParam != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NotificationParam);
      }
      if (NotificationTime != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(NotificationTime);
      }
      if (AddFans != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AddFans);
      }
      if (SubFans != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SubFans);
      }
      if (AddBlackRatio != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AddBlackRatio);
      }
      if (SubBlackRatio != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SubBlackRatio);
      }
      noteParams_.WriteTo(output, _repeated_noteParams_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NotificationType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NotificationType);
      }
      if (NotificationParam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NotificationParam);
      }
      if (NotificationTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NotificationTime);
      }
      if (AddFans != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddFans);
      }
      if (SubFans != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubFans);
      }
      if (AddBlackRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddBlackRatio);
      }
      if (SubBlackRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubBlackRatio);
      }
      size += noteParams_.CalculateSize(_repeated_noteParams_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FansNote other) {
      if (other == null) {
        return;
      }
      if (other.NotificationType != 0) {
        NotificationType = other.NotificationType;
      }
      if (other.NotificationParam != 0) {
        NotificationParam = other.NotificationParam;
      }
      if (other.NotificationTime != 0UL) {
        NotificationTime = other.NotificationTime;
      }
      if (other.AddFans != 0) {
        AddFans = other.AddFans;
      }
      if (other.SubFans != 0) {
        SubFans = other.SubFans;
      }
      if (other.AddBlackRatio != 0) {
        AddBlackRatio = other.AddBlackRatio;
      }
      if (other.SubBlackRatio != 0) {
        SubBlackRatio = other.SubBlackRatio;
      }
      noteParams_.Add(other.noteParams_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NotificationType = input.ReadInt32();
            break;
          }
          case 16: {
            NotificationParam = input.ReadInt32();
            break;
          }
          case 24: {
            NotificationTime = input.ReadUInt64();
            break;
          }
          case 32: {
            AddFans = input.ReadInt32();
            break;
          }
          case 40: {
            SubFans = input.ReadInt32();
            break;
          }
          case 48: {
            AddBlackRatio = input.ReadInt32();
            break;
          }
          case 56: {
            SubBlackRatio = input.ReadInt32();
            break;
          }
          case 66: {
            noteParams_.AddEntriesFrom(input, _repeated_noteParams_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 粉丝信息
  /// </summary>
  public sealed partial class PlayerFansInfo : pb::IMessage<PlayerFansInfo> {
    private static readonly pb::MessageParser<PlayerFansInfo> _parser = new pb::MessageParser<PlayerFansInfo>(() => new PlayerFansInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerFansInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerFansInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerFansInfo(PlayerFansInfo other) : this() {
      birthday_ = other.birthday_;
      height_ = other.height_;
      weight_ = other.weight_;
      provinceCode_ = other.provinceCode_;
      cityCode_ = other.cityCode_;
      fansColor_ = other.fansColor_;
      signature_ = other.signature_;
      fansCall_ = other.fansCall_;
      flags_ = other.flags_.Clone();
      fans_ = other.fans_;
      blackRatio_ = other.blackRatio_;
      signTime_ = other.signTime_;
      haveZeroblackReward_ = other.haveZeroblackReward_;
      achieves_ = other.achieves_.Clone();
      publicBenefits_ = other.publicBenefits_.Clone();
      popularity_ = other.popularity_.Clone();
      fansNotes_ = other.fansNotes_.Clone();
      ClubActivity = other.clubActivity_ != null ? other.ClubActivity.Clone() : null;
      delayQueue_ = other.delayQueue_.Clone();
      fansCallModifyTimes_ = other.fansCallModifyTimes_;
      fansColorModifyTimes_ = other.fansColorModifyTimes_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerFansInfo Clone() {
      return new PlayerFansInfo(this);
    }

    /// <summary>Field number for the "birthday" field.</summary>
    public const int BirthdayFieldNumber = 1;
    private int birthday_;
    /// <summary>
    /// 生日月日(815八月十五)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Birthday {
      get { return birthday_; }
      set {
        birthday_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private int height_;
    /// <summary>
    /// 身高
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 3;
    private int weight_;
    /// <summary>
    /// 体重
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    /// <summary>Field number for the "province_code" field.</summary>
    public const int ProvinceCodeFieldNumber = 4;
    private int provinceCode_;
    /// <summary>
    /// 省
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProvinceCode {
      get { return provinceCode_; }
      set {
        provinceCode_ = value;
      }
    }

    /// <summary>Field number for the "city_code" field.</summary>
    public const int CityCodeFieldNumber = 5;
    private int cityCode_;
    /// <summary>
    /// 城市
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CityCode {
      get { return cityCode_; }
      set {
        cityCode_ = value;
      }
    }

    /// <summary>Field number for the "fans_color" field.</summary>
    public const int FansColorFieldNumber = 6;
    private int fansColor_;
    /// <summary>
    /// 应援色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FansColor {
      get { return fansColor_; }
      set {
        fansColor_ = value;
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 7;
    private string signature_ = "";
    /// <summary>
    /// 签名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fans_call" field.</summary>
    public const int FansCallFieldNumber = 8;
    private string fansCall_ = "";
    /// <summary>
    /// 粉丝简称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FansCall {
      get { return fansCall_; }
      set {
        fansCall_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_flags_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> flags_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 标签
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Flags {
      get { return flags_; }
    }

    /// <summary>Field number for the "fans" field.</summary>
    public const int FansFieldNumber = 10;
    private int fans_;
    /// <summary>
    /// 粉丝数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Fans {
      get { return fans_; }
      set {
        fans_ = value;
      }
    }

    /// <summary>Field number for the "black_ratio" field.</summary>
    public const int BlackRatioFieldNumber = 11;
    private int blackRatio_;
    /// <summary>
    /// 黑粉比例
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlackRatio {
      get { return blackRatio_; }
      set {
        blackRatio_ = value;
      }
    }

    /// <summary>Field number for the "sign_time" field.</summary>
    public const int SignTimeFieldNumber = 12;
    private ulong signTime_;
    /// <summary>
    /// 签约时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SignTime {
      get { return signTime_; }
      set {
        signTime_ = value;
      }
    }

    /// <summary>Field number for the "have_zeroblack_reward" field.</summary>
    public const int HaveZeroblackRewardFieldNumber = 13;
    private int haveZeroblackReward_;
    /// <summary>
    /// 是否有0黑粉奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HaveZeroblackReward {
      get { return haveZeroblackReward_; }
      set {
        haveZeroblackReward_ = value;
      }
    }

    /// <summary>Field number for the "achieves" field.</summary>
    public const int AchievesFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Stardom.FansAchievement> _repeated_achieves_codec
        = pb::FieldCodec.ForMessage(114, global::Stardom.FansAchievement.Parser);
    private readonly pbc::RepeatedField<global::Stardom.FansAchievement> achieves_ = new pbc::RepeatedField<global::Stardom.FansAchievement>();
    /// <summary>
    /// 粉丝成就
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.FansAchievement> Achieves {
      get { return achieves_; }
    }

    /// <summary>Field number for the "public_benefits" field.</summary>
    public const int PublicBenefitsFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Stardom.FansPublicBenefit> _repeated_publicBenefits_codec
        = pb::FieldCodec.ForMessage(122, global::Stardom.FansPublicBenefit.Parser);
    private readonly pbc::RepeatedField<global::Stardom.FansPublicBenefit> publicBenefits_ = new pbc::RepeatedField<global::Stardom.FansPublicBenefit>();
    /// <summary>
    /// 公益
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.FansPublicBenefit> PublicBenefits {
      get { return publicBenefits_; }
    }

    /// <summary>Field number for the "popularity" field.</summary>
    public const int PopularityFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Stardom.FansPopularity> _repeated_popularity_codec
        = pb::FieldCodec.ForMessage(130, global::Stardom.FansPopularity.Parser);
    private readonly pbc::RepeatedField<global::Stardom.FansPopularity> popularity_ = new pbc::RepeatedField<global::Stardom.FansPopularity>();
    /// <summary>
    /// 人气打榜
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.FansPopularity> Popularity {
      get { return popularity_; }
    }

    /// <summary>Field number for the "fans_notes" field.</summary>
    public const int FansNotesFieldNumber = 17;
    private static readonly pb::FieldCodec<global::Stardom.FansNote> _repeated_fansNotes_codec
        = pb::FieldCodec.ForMessage(138, global::Stardom.FansNote.Parser);
    private readonly pbc::RepeatedField<global::Stardom.FansNote> fansNotes_ = new pbc::RepeatedField<global::Stardom.FansNote>();
    /// <summary>
    /// 粉丝动态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.FansNote> FansNotes {
      get { return fansNotes_; }
    }

    /// <summary>Field number for the "club_activity" field.</summary>
    public const int ClubActivityFieldNumber = 18;
    private global::Stardom.FansClubActivityInfo clubActivity_;
    /// <summary>
    /// 粉丝后援会
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.FansClubActivityInfo ClubActivity {
      get { return clubActivity_; }
      set {
        clubActivity_ = value;
      }
    }

    /// <summary>Field number for the "delay_queue" field.</summary>
    public const int DelayQueueFieldNumber = 19;
    private static readonly pb::FieldCodec<global::Stardom.FansDelayInfo> _repeated_delayQueue_codec
        = pb::FieldCodec.ForMessage(154, global::Stardom.FansDelayInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.FansDelayInfo> delayQueue_ = new pbc::RepeatedField<global::Stardom.FansDelayInfo>();
    /// <summary>
    /// 延迟队列(后端用)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.FansDelayInfo> DelayQueue {
      get { return delayQueue_; }
    }

    /// <summary>Field number for the "fans_call_modify_times" field.</summary>
    public const int FansCallModifyTimesFieldNumber = 20;
    private int fansCallModifyTimes_;
    /// <summary>
    /// 粉丝昵称修改次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FansCallModifyTimes {
      get { return fansCallModifyTimes_; }
      set {
        fansCallModifyTimes_ = value;
      }
    }

    /// <summary>Field number for the "fans_color_modify_times" field.</summary>
    public const int FansColorModifyTimesFieldNumber = 21;
    private int fansColorModifyTimes_;
    /// <summary>
    /// 应援色修改次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FansColorModifyTimes {
      get { return fansColorModifyTimes_; }
      set {
        fansColorModifyTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerFansInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerFansInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Birthday != other.Birthday) return false;
      if (Height != other.Height) return false;
      if (Weight != other.Weight) return false;
      if (ProvinceCode != other.ProvinceCode) return false;
      if (CityCode != other.CityCode) return false;
      if (FansColor != other.FansColor) return false;
      if (Signature != other.Signature) return false;
      if (FansCall != other.FansCall) return false;
      if(!flags_.Equals(other.flags_)) return false;
      if (Fans != other.Fans) return false;
      if (BlackRatio != other.BlackRatio) return false;
      if (SignTime != other.SignTime) return false;
      if (HaveZeroblackReward != other.HaveZeroblackReward) return false;
      if(!achieves_.Equals(other.achieves_)) return false;
      if(!publicBenefits_.Equals(other.publicBenefits_)) return false;
      if(!popularity_.Equals(other.popularity_)) return false;
      if(!fansNotes_.Equals(other.fansNotes_)) return false;
      if (!object.Equals(ClubActivity, other.ClubActivity)) return false;
      if(!delayQueue_.Equals(other.delayQueue_)) return false;
      if (FansCallModifyTimes != other.FansCallModifyTimes) return false;
      if (FansColorModifyTimes != other.FansColorModifyTimes) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Birthday != 0) hash ^= Birthday.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Weight != 0) hash ^= Weight.GetHashCode();
      if (ProvinceCode != 0) hash ^= ProvinceCode.GetHashCode();
      if (CityCode != 0) hash ^= CityCode.GetHashCode();
      if (FansColor != 0) hash ^= FansColor.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (FansCall.Length != 0) hash ^= FansCall.GetHashCode();
      hash ^= flags_.GetHashCode();
      if (Fans != 0) hash ^= Fans.GetHashCode();
      if (BlackRatio != 0) hash ^= BlackRatio.GetHashCode();
      if (SignTime != 0UL) hash ^= SignTime.GetHashCode();
      if (HaveZeroblackReward != 0) hash ^= HaveZeroblackReward.GetHashCode();
      hash ^= achieves_.GetHashCode();
      hash ^= publicBenefits_.GetHashCode();
      hash ^= popularity_.GetHashCode();
      hash ^= fansNotes_.GetHashCode();
      if (clubActivity_ != null) hash ^= ClubActivity.GetHashCode();
      hash ^= delayQueue_.GetHashCode();
      if (FansCallModifyTimes != 0) hash ^= FansCallModifyTimes.GetHashCode();
      if (FansColorModifyTimes != 0) hash ^= FansColorModifyTimes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Birthday != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Birthday);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Height);
      }
      if (Weight != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Weight);
      }
      if (ProvinceCode != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ProvinceCode);
      }
      if (CityCode != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CityCode);
      }
      if (FansColor != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FansColor);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Signature);
      }
      if (FansCall.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(FansCall);
      }
      flags_.WriteTo(output, _repeated_flags_codec);
      if (Fans != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Fans);
      }
      if (BlackRatio != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(BlackRatio);
      }
      if (SignTime != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(SignTime);
      }
      if (HaveZeroblackReward != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(HaveZeroblackReward);
      }
      achieves_.WriteTo(output, _repeated_achieves_codec);
      publicBenefits_.WriteTo(output, _repeated_publicBenefits_codec);
      popularity_.WriteTo(output, _repeated_popularity_codec);
      fansNotes_.WriteTo(output, _repeated_fansNotes_codec);
      if (clubActivity_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(ClubActivity);
      }
      delayQueue_.WriteTo(output, _repeated_delayQueue_codec);
      if (FansCallModifyTimes != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(FansCallModifyTimes);
      }
      if (FansColorModifyTimes != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(FansColorModifyTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Birthday != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Birthday);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (Weight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Weight);
      }
      if (ProvinceCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProvinceCode);
      }
      if (CityCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CityCode);
      }
      if (FansColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FansColor);
      }
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Signature);
      }
      if (FansCall.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FansCall);
      }
      size += flags_.CalculateSize(_repeated_flags_codec);
      if (Fans != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Fans);
      }
      if (BlackRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlackRatio);
      }
      if (SignTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SignTime);
      }
      if (HaveZeroblackReward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HaveZeroblackReward);
      }
      size += achieves_.CalculateSize(_repeated_achieves_codec);
      size += publicBenefits_.CalculateSize(_repeated_publicBenefits_codec);
      size += popularity_.CalculateSize(_repeated_popularity_codec);
      size += fansNotes_.CalculateSize(_repeated_fansNotes_codec);
      if (clubActivity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ClubActivity);
      }
      size += delayQueue_.CalculateSize(_repeated_delayQueue_codec);
      if (FansCallModifyTimes != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FansCallModifyTimes);
      }
      if (FansColorModifyTimes != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FansColorModifyTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerFansInfo other) {
      if (other == null) {
        return;
      }
      if (other.Birthday != 0) {
        Birthday = other.Birthday;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Weight != 0) {
        Weight = other.Weight;
      }
      if (other.ProvinceCode != 0) {
        ProvinceCode = other.ProvinceCode;
      }
      if (other.CityCode != 0) {
        CityCode = other.CityCode;
      }
      if (other.FansColor != 0) {
        FansColor = other.FansColor;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      if (other.FansCall.Length != 0) {
        FansCall = other.FansCall;
      }
      flags_.Add(other.flags_);
      if (other.Fans != 0) {
        Fans = other.Fans;
      }
      if (other.BlackRatio != 0) {
        BlackRatio = other.BlackRatio;
      }
      if (other.SignTime != 0UL) {
        SignTime = other.SignTime;
      }
      if (other.HaveZeroblackReward != 0) {
        HaveZeroblackReward = other.HaveZeroblackReward;
      }
      achieves_.Add(other.achieves_);
      publicBenefits_.Add(other.publicBenefits_);
      popularity_.Add(other.popularity_);
      fansNotes_.Add(other.fansNotes_);
      if (other.clubActivity_ != null) {
        if (clubActivity_ == null) {
          clubActivity_ = new global::Stardom.FansClubActivityInfo();
        }
        ClubActivity.MergeFrom(other.ClubActivity);
      }
      delayQueue_.Add(other.delayQueue_);
      if (other.FansCallModifyTimes != 0) {
        FansCallModifyTimes = other.FansCallModifyTimes;
      }
      if (other.FansColorModifyTimes != 0) {
        FansColorModifyTimes = other.FansColorModifyTimes;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Birthday = input.ReadInt32();
            break;
          }
          case 16: {
            Height = input.ReadInt32();
            break;
          }
          case 24: {
            Weight = input.ReadInt32();
            break;
          }
          case 32: {
            ProvinceCode = input.ReadInt32();
            break;
          }
          case 40: {
            CityCode = input.ReadInt32();
            break;
          }
          case 48: {
            FansColor = input.ReadInt32();
            break;
          }
          case 58: {
            Signature = input.ReadString();
            break;
          }
          case 66: {
            FansCall = input.ReadString();
            break;
          }
          case 74:
          case 72: {
            flags_.AddEntriesFrom(input, _repeated_flags_codec);
            break;
          }
          case 80: {
            Fans = input.ReadInt32();
            break;
          }
          case 88: {
            BlackRatio = input.ReadInt32();
            break;
          }
          case 96: {
            SignTime = input.ReadUInt64();
            break;
          }
          case 104: {
            HaveZeroblackReward = input.ReadInt32();
            break;
          }
          case 114: {
            achieves_.AddEntriesFrom(input, _repeated_achieves_codec);
            break;
          }
          case 122: {
            publicBenefits_.AddEntriesFrom(input, _repeated_publicBenefits_codec);
            break;
          }
          case 130: {
            popularity_.AddEntriesFrom(input, _repeated_popularity_codec);
            break;
          }
          case 138: {
            fansNotes_.AddEntriesFrom(input, _repeated_fansNotes_codec);
            break;
          }
          case 146: {
            if (clubActivity_ == null) {
              clubActivity_ = new global::Stardom.FansClubActivityInfo();
            }
            input.ReadMessage(clubActivity_);
            break;
          }
          case 154: {
            delayQueue_.AddEntriesFrom(input, _repeated_delayQueue_codec);
            break;
          }
          case 160: {
            FansCallModifyTimes = input.ReadInt32();
            break;
          }
          case 168: {
            FansColorModifyTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 群粉丝
  /// </summary>
  public sealed partial class PhoneGroupFans : pb::IMessage<PhoneGroupFans> {
    private static readonly pb::MessageParser<PhoneGroupFans> _parser = new pb::MessageParser<PhoneGroupFans>(() => new PhoneGroupFans());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PhoneGroupFans> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhoneGroupFans() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhoneGroupFans(PhoneGroupFans other) : this() {
      phoneRoleId_ = other.phoneRoleId_;
      phoneFans_ = other.phoneFans_;
      fansId_ = other.fansId_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhoneGroupFans Clone() {
      return new PhoneGroupFans(this);
    }

    /// <summary>Field number for the "phone_role_id" field.</summary>
    public const int PhoneRoleIdFieldNumber = 1;
    private int phoneRoleId_;
    /// <summary>
    /// 手机角色配表id，其实是群id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PhoneRoleId {
      get { return phoneRoleId_; }
      set {
        phoneRoleId_ = value;
      }
    }

    /// <summary>Field number for the "phone_fans" field.</summary>
    public const int PhoneFansFieldNumber = 2;
    private int phoneFans_;
    /// <summary>
    /// 核心粉丝数(与粉丝管理里的fans不是同一个)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PhoneFans {
      get { return phoneFans_; }
      set {
        phoneFans_ = value;
      }
    }

    /// <summary>Field number for the "fans_id" field.</summary>
    public const int FansIdFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_fansId_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> fansId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 新粉丝列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FansId {
      get { return fansId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PhoneGroupFans);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PhoneGroupFans other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PhoneRoleId != other.PhoneRoleId) return false;
      if (PhoneFans != other.PhoneFans) return false;
      if(!fansId_.Equals(other.fansId_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PhoneRoleId != 0) hash ^= PhoneRoleId.GetHashCode();
      if (PhoneFans != 0) hash ^= PhoneFans.GetHashCode();
      hash ^= fansId_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PhoneRoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PhoneRoleId);
      }
      if (PhoneFans != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PhoneFans);
      }
      fansId_.WriteTo(output, _repeated_fansId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PhoneRoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PhoneRoleId);
      }
      if (PhoneFans != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PhoneFans);
      }
      size += fansId_.CalculateSize(_repeated_fansId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PhoneGroupFans other) {
      if (other == null) {
        return;
      }
      if (other.PhoneRoleId != 0) {
        PhoneRoleId = other.PhoneRoleId;
      }
      if (other.PhoneFans != 0) {
        PhoneFans = other.PhoneFans;
      }
      fansId_.Add(other.fansId_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PhoneRoleId = input.ReadInt32();
            break;
          }
          case 16: {
            PhoneFans = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            fansId_.AddEntriesFrom(input, _repeated_fansId_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 聊天话题
  /// </summary>
  public sealed partial class PhoneTopic : pb::IMessage<PhoneTopic> {
    private static readonly pb::MessageParser<PhoneTopic> _parser = new pb::MessageParser<PhoneTopic>(() => new PhoneTopic());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PhoneTopic> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhoneTopic() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhoneTopic(PhoneTopic other) : this() {
      topicId_ = other.topicId_;
      chatOptionId_ = other.chatOptionId_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhoneTopic Clone() {
      return new PhoneTopic(this);
    }

    /// <summary>Field number for the "topic_id" field.</summary>
    public const int TopicIdFieldNumber = 1;
    private int topicId_;
    /// <summary>
    /// 话题id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TopicId {
      get { return topicId_; }
      set {
        topicId_ = value;
      }
    }

    /// <summary>Field number for the "chat_option_id" field.</summary>
    public const int ChatOptionIdFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_chatOptionId_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> chatOptionId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 聊天选项
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ChatOptionId {
      get { return chatOptionId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PhoneTopic);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PhoneTopic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TopicId != other.TopicId) return false;
      if(!chatOptionId_.Equals(other.chatOptionId_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TopicId != 0) hash ^= TopicId.GetHashCode();
      hash ^= chatOptionId_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TopicId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TopicId);
      }
      chatOptionId_.WriteTo(output, _repeated_chatOptionId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TopicId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TopicId);
      }
      size += chatOptionId_.CalculateSize(_repeated_chatOptionId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PhoneTopic other) {
      if (other == null) {
        return;
      }
      if (other.TopicId != 0) {
        TopicId = other.TopicId;
      }
      chatOptionId_.Add(other.chatOptionId_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TopicId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            chatOptionId_.AddEntriesFrom(input, _repeated_chatOptionId_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 聊天话题延时时间
  /// </summary>
  public sealed partial class PhoneDelay : pb::IMessage<PhoneDelay> {
    private static readonly pb::MessageParser<PhoneDelay> _parser = new pb::MessageParser<PhoneDelay>(() => new PhoneDelay());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PhoneDelay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhoneDelay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhoneDelay(PhoneDelay other) : this() {
      topicId_ = other.topicId_;
      delayTime_ = other.delayTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhoneDelay Clone() {
      return new PhoneDelay(this);
    }

    /// <summary>Field number for the "topic_id" field.</summary>
    public const int TopicIdFieldNumber = 1;
    private int topicId_;
    /// <summary>
    /// 话题id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TopicId {
      get { return topicId_; }
      set {
        topicId_ = value;
      }
    }

    /// <summary>Field number for the "delay_time" field.</summary>
    public const int DelayTimeFieldNumber = 2;
    private ulong delayTime_;
    /// <summary>
    /// 延时时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DelayTime {
      get { return delayTime_; }
      set {
        delayTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PhoneDelay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PhoneDelay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TopicId != other.TopicId) return false;
      if (DelayTime != other.DelayTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TopicId != 0) hash ^= TopicId.GetHashCode();
      if (DelayTime != 0UL) hash ^= DelayTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TopicId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TopicId);
      }
      if (DelayTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(DelayTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TopicId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TopicId);
      }
      if (DelayTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DelayTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PhoneDelay other) {
      if (other == null) {
        return;
      }
      if (other.TopicId != 0) {
        TopicId = other.TopicId;
      }
      if (other.DelayTime != 0UL) {
        DelayTime = other.DelayTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TopicId = input.ReadInt32();
            break;
          }
          case 16: {
            DelayTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 手机信息
  /// </summary>
  public sealed partial class PlayerPhoneInfo : pb::IMessage<PlayerPhoneInfo> {
    private static readonly pb::MessageParser<PlayerPhoneInfo> _parser = new pb::MessageParser<PlayerPhoneInfo>(() => new PlayerPhoneInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerPhoneInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPhoneInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPhoneInfo(PlayerPhoneInfo other) : this() {
      GroupFans = other.groupFans_ != null ? other.GroupFans.Clone() : null;
      readyTopics_ = other.readyTopics_.Clone();
      finishTopics_ = other.finishTopics_.Clone();
      rewardTopic_ = other.rewardTopic_.Clone();
      delayTopic_ = other.delayTopic_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPhoneInfo Clone() {
      return new PlayerPhoneInfo(this);
    }

    /// <summary>Field number for the "group_fans" field.</summary>
    public const int GroupFansFieldNumber = 1;
    private global::Stardom.PhoneGroupFans groupFans_;
    /// <summary>
    /// 群粉丝信息(暂时只记录后援会群聊的粉丝)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.PhoneGroupFans GroupFans {
      get { return groupFans_; }
      set {
        groupFans_ = value;
      }
    }

    /// <summary>Field number for the "ready_topics" field.</summary>
    public const int ReadyTopicsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Stardom.PhoneTopic> _repeated_readyTopics_codec
        = pb::FieldCodec.ForMessage(18, global::Stardom.PhoneTopic.Parser);
    private readonly pbc::RepeatedField<global::Stardom.PhoneTopic> readyTopics_ = new pbc::RepeatedField<global::Stardom.PhoneTopic>();
    /// <summary>
    /// 可开始的话题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.PhoneTopic> ReadyTopics {
      get { return readyTopics_; }
    }

    /// <summary>Field number for the "finish_topics" field.</summary>
    public const int FinishTopicsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Stardom.PhoneTopic> _repeated_finishTopics_codec
        = pb::FieldCodec.ForMessage(26, global::Stardom.PhoneTopic.Parser);
    private readonly pbc::RepeatedField<global::Stardom.PhoneTopic> finishTopics_ = new pbc::RepeatedField<global::Stardom.PhoneTopic>();
    /// <summary>
    /// 结束的话题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.PhoneTopic> FinishTopics {
      get { return finishTopics_; }
    }

    /// <summary>Field number for the "reward_topic" field.</summary>
    public const int RewardTopicFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_rewardTopic_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> rewardTopic_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 可领取话题 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RewardTopic {
      get { return rewardTopic_; }
    }

    /// <summary>Field number for the "delay_topic" field.</summary>
    public const int DelayTopicFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Stardom.PhoneDelay> _repeated_delayTopic_codec
        = pb::FieldCodec.ForMessage(42, global::Stardom.PhoneDelay.Parser);
    private readonly pbc::RepeatedField<global::Stardom.PhoneDelay> delayTopic_ = new pbc::RepeatedField<global::Stardom.PhoneDelay>();
    /// <summary>
    /// 延时的话题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.PhoneDelay> DelayTopic {
      get { return delayTopic_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerPhoneInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerPhoneInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GroupFans, other.GroupFans)) return false;
      if(!readyTopics_.Equals(other.readyTopics_)) return false;
      if(!finishTopics_.Equals(other.finishTopics_)) return false;
      if(!rewardTopic_.Equals(other.rewardTopic_)) return false;
      if(!delayTopic_.Equals(other.delayTopic_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (groupFans_ != null) hash ^= GroupFans.GetHashCode();
      hash ^= readyTopics_.GetHashCode();
      hash ^= finishTopics_.GetHashCode();
      hash ^= rewardTopic_.GetHashCode();
      hash ^= delayTopic_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (groupFans_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GroupFans);
      }
      readyTopics_.WriteTo(output, _repeated_readyTopics_codec);
      finishTopics_.WriteTo(output, _repeated_finishTopics_codec);
      rewardTopic_.WriteTo(output, _repeated_rewardTopic_codec);
      delayTopic_.WriteTo(output, _repeated_delayTopic_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (groupFans_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupFans);
      }
      size += readyTopics_.CalculateSize(_repeated_readyTopics_codec);
      size += finishTopics_.CalculateSize(_repeated_finishTopics_codec);
      size += rewardTopic_.CalculateSize(_repeated_rewardTopic_codec);
      size += delayTopic_.CalculateSize(_repeated_delayTopic_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerPhoneInfo other) {
      if (other == null) {
        return;
      }
      if (other.groupFans_ != null) {
        if (groupFans_ == null) {
          groupFans_ = new global::Stardom.PhoneGroupFans();
        }
        GroupFans.MergeFrom(other.GroupFans);
      }
      readyTopics_.Add(other.readyTopics_);
      finishTopics_.Add(other.finishTopics_);
      rewardTopic_.Add(other.rewardTopic_);
      delayTopic_.Add(other.delayTopic_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (groupFans_ == null) {
              groupFans_ = new global::Stardom.PhoneGroupFans();
            }
            input.ReadMessage(groupFans_);
            break;
          }
          case 18: {
            readyTopics_.AddEntriesFrom(input, _repeated_readyTopics_codec);
            break;
          }
          case 26: {
            finishTopics_.AddEntriesFrom(input, _repeated_finishTopics_codec);
            break;
          }
          case 34:
          case 32: {
            rewardTopic_.AddEntriesFrom(input, _repeated_rewardTopic_codec);
            break;
          }
          case 42: {
            delayTopic_.AddEntriesFrom(input, _repeated_delayTopic_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 微博
  /// </summary>
  public sealed partial class WeiboReplyComment : pb::IMessage<WeiboReplyComment> {
    private static readonly pb::MessageParser<WeiboReplyComment> _parser = new pb::MessageParser<WeiboReplyComment>(() => new WeiboReplyComment());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeiboReplyComment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeiboReplyComment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeiboReplyComment(WeiboReplyComment other) : this() {
      npcCommentId_ = other.npcCommentId_;
      replyId_ = other.replyId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeiboReplyComment Clone() {
      return new WeiboReplyComment(this);
    }

    /// <summary>Field number for the "npc_comment_id" field.</summary>
    public const int NpcCommentIdFieldNumber = 1;
    private int npcCommentId_;
    /// <summary>
    /// npc的评论
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NpcCommentId {
      get { return npcCommentId_; }
      set {
        npcCommentId_ = value;
      }
    }

    /// <summary>Field number for the "reply_id" field.</summary>
    public const int ReplyIdFieldNumber = 2;
    private int replyId_;
    /// <summary>
    /// 玩家回复
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyId {
      get { return replyId_; }
      set {
        replyId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeiboReplyComment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeiboReplyComment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NpcCommentId != other.NpcCommentId) return false;
      if (ReplyId != other.ReplyId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NpcCommentId != 0) hash ^= NpcCommentId.GetHashCode();
      if (ReplyId != 0) hash ^= ReplyId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NpcCommentId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NpcCommentId);
      }
      if (ReplyId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ReplyId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NpcCommentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NpcCommentId);
      }
      if (ReplyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeiboReplyComment other) {
      if (other == null) {
        return;
      }
      if (other.NpcCommentId != 0) {
        NpcCommentId = other.NpcCommentId;
      }
      if (other.ReplyId != 0) {
        ReplyId = other.ReplyId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NpcCommentId = input.ReadInt32();
            break;
          }
          case 16: {
            ReplyId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 单条微博信息
  /// </summary>
  public sealed partial class WeiboMessageInfo : pb::IMessage<WeiboMessageInfo> {
    private static readonly pb::MessageParser<WeiboMessageInfo> _parser = new pb::MessageParser<WeiboMessageInfo>(() => new WeiboMessageInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeiboMessageInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeiboMessageInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeiboMessageInfo(WeiboMessageInfo other) : this() {
      weiboUuid_ = other.weiboUuid_;
      postTime_ = other.postTime_;
      isNpcWeibo_ = other.isNpcWeibo_;
      weiboId_ = other.weiboId_;
      forwardNpcWeiboId_ = other.forwardNpcWeiboId_;
      forwardReasonId_ = other.forwardReasonId_;
      atNpcId_ = other.atNpcId_.Clone();
      replies_ = other.replies_.Clone();
      npcWeiboId_ = other.npcWeiboId_;
      isPlayerLike_ = other.isPlayerLike_;
      playerReply_ = other.playerReply_;
      replyTime_ = other.replyTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeiboMessageInfo Clone() {
      return new WeiboMessageInfo(this);
    }

    /// <summary>Field number for the "weibo_uuid" field.</summary>
    public const int WeiboUuidFieldNumber = 1;
    private ulong weiboUuid_;
    /// <summary>
    /// 微博唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong WeiboUuid {
      get { return weiboUuid_; }
      set {
        weiboUuid_ = value;
      }
    }

    /// <summary>Field number for the "post_time" field.</summary>
    public const int PostTimeFieldNumber = 2;
    private ulong postTime_;
    /// <summary>
    /// 发布时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PostTime {
      get { return postTime_; }
      set {
        postTime_ = value;
      }
    }

    /// <summary>Field number for the "is_npc_weibo" field.</summary>
    public const int IsNpcWeiboFieldNumber = 3;
    private int isNpcWeibo_;
    /// <summary>
    /// 是否是npc微博
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsNpcWeibo {
      get { return isNpcWeibo_; }
      set {
        isNpcWeibo_ = value;
      }
    }

    /// <summary>Field number for the "weibo_id" field.</summary>
    public const int WeiboIdFieldNumber = 4;
    private int weiboId_;
    /// <summary>
    /// 主角微博配置id (主角微博和npc微博配置在2张表)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeiboId {
      get { return weiboId_; }
      set {
        weiboId_ = value;
      }
    }

    /// <summary>Field number for the "forward_npc_weibo_id" field.</summary>
    public const int ForwardNpcWeiboIdFieldNumber = 5;
    private int forwardNpcWeiboId_;
    /// <summary>
    /// 转发NPC微博id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ForwardNpcWeiboId {
      get { return forwardNpcWeiboId_; }
      set {
        forwardNpcWeiboId_ = value;
      }
    }

    /// <summary>Field number for the "forward_reason_id" field.</summary>
    public const int ForwardReasonIdFieldNumber = 6;
    private int forwardReasonId_;
    /// <summary>
    /// 转发NPC微博id理由
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ForwardReasonId {
      get { return forwardReasonId_; }
      set {
        forwardReasonId_ = value;
      }
    }

    /// <summary>Field number for the "at_npc_id" field.</summary>
    public const int AtNpcIdFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_atNpcId_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> atNpcId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// at的npc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AtNpcId {
      get { return atNpcId_; }
    }

    /// <summary>Field number for the "replies" field.</summary>
    public const int RepliesFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Stardom.WeiboReplyComment> _repeated_replies_codec
        = pb::FieldCodec.ForMessage(66, global::Stardom.WeiboReplyComment.Parser);
    private readonly pbc::RepeatedField<global::Stardom.WeiboReplyComment> replies_ = new pbc::RepeatedField<global::Stardom.WeiboReplyComment>();
    /// <summary>
    /// NPC评论/玩家回复
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.WeiboReplyComment> Replies {
      get { return replies_; }
    }

    /// <summary>Field number for the "npc_weibo_id" field.</summary>
    public const int NpcWeiboIdFieldNumber = 9;
    private int npcWeiboId_;
    /// <summary>
    /// npc微博配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NpcWeiboId {
      get { return npcWeiboId_; }
      set {
        npcWeiboId_ = value;
      }
    }

    /// <summary>Field number for the "is_player_like" field.</summary>
    public const int IsPlayerLikeFieldNumber = 10;
    private int isPlayerLike_;
    /// <summary>
    /// 玩家是否点赞
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsPlayerLike {
      get { return isPlayerLike_; }
      set {
        isPlayerLike_ = value;
      }
    }

    /// <summary>Field number for the "player_reply" field.</summary>
    public const int PlayerReplyFieldNumber = 11;
    private int playerReply_;
    /// <summary>
    /// 玩家评论
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerReply {
      get { return playerReply_; }
      set {
        playerReply_ = value;
      }
    }

    /// <summary>Field number for the "reply_time" field.</summary>
    public const int ReplyTimeFieldNumber = 12;
    private ulong replyTime_;
    /// <summary>
    /// 评论时间,前端排序用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ReplyTime {
      get { return replyTime_; }
      set {
        replyTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeiboMessageInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeiboMessageInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WeiboUuid != other.WeiboUuid) return false;
      if (PostTime != other.PostTime) return false;
      if (IsNpcWeibo != other.IsNpcWeibo) return false;
      if (WeiboId != other.WeiboId) return false;
      if (ForwardNpcWeiboId != other.ForwardNpcWeiboId) return false;
      if (ForwardReasonId != other.ForwardReasonId) return false;
      if(!atNpcId_.Equals(other.atNpcId_)) return false;
      if(!replies_.Equals(other.replies_)) return false;
      if (NpcWeiboId != other.NpcWeiboId) return false;
      if (IsPlayerLike != other.IsPlayerLike) return false;
      if (PlayerReply != other.PlayerReply) return false;
      if (ReplyTime != other.ReplyTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WeiboUuid != 0UL) hash ^= WeiboUuid.GetHashCode();
      if (PostTime != 0UL) hash ^= PostTime.GetHashCode();
      if (IsNpcWeibo != 0) hash ^= IsNpcWeibo.GetHashCode();
      if (WeiboId != 0) hash ^= WeiboId.GetHashCode();
      if (ForwardNpcWeiboId != 0) hash ^= ForwardNpcWeiboId.GetHashCode();
      if (ForwardReasonId != 0) hash ^= ForwardReasonId.GetHashCode();
      hash ^= atNpcId_.GetHashCode();
      hash ^= replies_.GetHashCode();
      if (NpcWeiboId != 0) hash ^= NpcWeiboId.GetHashCode();
      if (IsPlayerLike != 0) hash ^= IsPlayerLike.GetHashCode();
      if (PlayerReply != 0) hash ^= PlayerReply.GetHashCode();
      if (ReplyTime != 0UL) hash ^= ReplyTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WeiboUuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(WeiboUuid);
      }
      if (PostTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(PostTime);
      }
      if (IsNpcWeibo != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IsNpcWeibo);
      }
      if (WeiboId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(WeiboId);
      }
      if (ForwardNpcWeiboId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ForwardNpcWeiboId);
      }
      if (ForwardReasonId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ForwardReasonId);
      }
      atNpcId_.WriteTo(output, _repeated_atNpcId_codec);
      replies_.WriteTo(output, _repeated_replies_codec);
      if (NpcWeiboId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(NpcWeiboId);
      }
      if (IsPlayerLike != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(IsPlayerLike);
      }
      if (PlayerReply != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(PlayerReply);
      }
      if (ReplyTime != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(ReplyTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WeiboUuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WeiboUuid);
      }
      if (PostTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PostTime);
      }
      if (IsNpcWeibo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsNpcWeibo);
      }
      if (WeiboId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeiboId);
      }
      if (ForwardNpcWeiboId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ForwardNpcWeiboId);
      }
      if (ForwardReasonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ForwardReasonId);
      }
      size += atNpcId_.CalculateSize(_repeated_atNpcId_codec);
      size += replies_.CalculateSize(_repeated_replies_codec);
      if (NpcWeiboId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NpcWeiboId);
      }
      if (IsPlayerLike != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsPlayerLike);
      }
      if (PlayerReply != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerReply);
      }
      if (ReplyTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ReplyTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeiboMessageInfo other) {
      if (other == null) {
        return;
      }
      if (other.WeiboUuid != 0UL) {
        WeiboUuid = other.WeiboUuid;
      }
      if (other.PostTime != 0UL) {
        PostTime = other.PostTime;
      }
      if (other.IsNpcWeibo != 0) {
        IsNpcWeibo = other.IsNpcWeibo;
      }
      if (other.WeiboId != 0) {
        WeiboId = other.WeiboId;
      }
      if (other.ForwardNpcWeiboId != 0) {
        ForwardNpcWeiboId = other.ForwardNpcWeiboId;
      }
      if (other.ForwardReasonId != 0) {
        ForwardReasonId = other.ForwardReasonId;
      }
      atNpcId_.Add(other.atNpcId_);
      replies_.Add(other.replies_);
      if (other.NpcWeiboId != 0) {
        NpcWeiboId = other.NpcWeiboId;
      }
      if (other.IsPlayerLike != 0) {
        IsPlayerLike = other.IsPlayerLike;
      }
      if (other.PlayerReply != 0) {
        PlayerReply = other.PlayerReply;
      }
      if (other.ReplyTime != 0UL) {
        ReplyTime = other.ReplyTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            WeiboUuid = input.ReadUInt64();
            break;
          }
          case 16: {
            PostTime = input.ReadUInt64();
            break;
          }
          case 24: {
            IsNpcWeibo = input.ReadInt32();
            break;
          }
          case 32: {
            WeiboId = input.ReadInt32();
            break;
          }
          case 40: {
            ForwardNpcWeiboId = input.ReadInt32();
            break;
          }
          case 48: {
            ForwardReasonId = input.ReadInt32();
            break;
          }
          case 58:
          case 56: {
            atNpcId_.AddEntriesFrom(input, _repeated_atNpcId_codec);
            break;
          }
          case 66: {
            replies_.AddEntriesFrom(input, _repeated_replies_codec);
            break;
          }
          case 72: {
            NpcWeiboId = input.ReadInt32();
            break;
          }
          case 80: {
            IsPlayerLike = input.ReadInt32();
            break;
          }
          case 88: {
            PlayerReply = input.ReadInt32();
            break;
          }
          case 96: {
            ReplyTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 微博信息
  /// </summary>
  public sealed partial class PlayerWeiboInfo : pb::IMessage<PlayerWeiboInfo> {
    private static readonly pb::MessageParser<PlayerWeiboInfo> _parser = new pb::MessageParser<PlayerWeiboInfo>(() => new PlayerWeiboInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerWeiboInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerWeiboInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerWeiboInfo(PlayerWeiboInfo other) : this() {
      followPlayer_ = other.followPlayer_.Clone();
      followedByPlayer_ = other.followedByPlayer_.Clone();
      displayNpc_ = other.displayNpc_.Clone();
      displayCancelNpc_ = other.displayCancelNpc_.Clone();
      readyWeiboId_ = other.readyWeiboId_.Clone();
      weiboMsgs_ = other.weiboMsgs_.Clone();
      fans_ = other.fans_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerWeiboInfo Clone() {
      return new PlayerWeiboInfo(this);
    }

    /// <summary>Field number for the "follow_player" field.</summary>
    public const int FollowPlayerFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_followPlayer_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> followPlayer_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 关注主角的npc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FollowPlayer {
      get { return followPlayer_; }
    }

    /// <summary>Field number for the "followed_by_player" field.</summary>
    public const int FollowedByPlayerFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_followedByPlayer_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> followedByPlayer_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 被主角关注的npc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FollowedByPlayer {
      get { return followedByPlayer_; }
    }

    /// <summary>Field number for the "display_npc" field.</summary>
    public const int DisplayNpcFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_displayNpc_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> displayNpc_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 需要展示的npc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DisplayNpc {
      get { return displayNpc_; }
    }

    /// <summary>Field number for the "display_cancel_npc" field.</summary>
    public const int DisplayCancelNpcFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_displayCancelNpc_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> displayCancelNpc_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 需要展示的主角取关npc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DisplayCancelNpc {
      get { return displayCancelNpc_; }
    }

    /// <summary>Field number for the "ready_weibo_id" field.</summary>
    public const int ReadyWeiboIdFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_readyWeiboId_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> readyWeiboId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 可发布微博id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ReadyWeiboId {
      get { return readyWeiboId_; }
    }

    /// <summary>Field number for the "weibo_msgs" field.</summary>
    public const int WeiboMsgsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Stardom.WeiboMessageInfo> _repeated_weiboMsgs_codec
        = pb::FieldCodec.ForMessage(50, global::Stardom.WeiboMessageInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.WeiboMessageInfo> weiboMsgs_ = new pbc::RepeatedField<global::Stardom.WeiboMessageInfo>();
    /// <summary>
    /// 微博消息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.WeiboMessageInfo> WeiboMsgs {
      get { return weiboMsgs_; }
    }

    /// <summary>Field number for the "fans" field.</summary>
    public const int FansFieldNumber = 7;
    private int fans_;
    /// <summary>
    /// 粉丝数(经纪管理的粉丝数)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Fans {
      get { return fans_; }
      set {
        fans_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerWeiboInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerWeiboInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!followPlayer_.Equals(other.followPlayer_)) return false;
      if(!followedByPlayer_.Equals(other.followedByPlayer_)) return false;
      if(!displayNpc_.Equals(other.displayNpc_)) return false;
      if(!displayCancelNpc_.Equals(other.displayCancelNpc_)) return false;
      if(!readyWeiboId_.Equals(other.readyWeiboId_)) return false;
      if(!weiboMsgs_.Equals(other.weiboMsgs_)) return false;
      if (Fans != other.Fans) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= followPlayer_.GetHashCode();
      hash ^= followedByPlayer_.GetHashCode();
      hash ^= displayNpc_.GetHashCode();
      hash ^= displayCancelNpc_.GetHashCode();
      hash ^= readyWeiboId_.GetHashCode();
      hash ^= weiboMsgs_.GetHashCode();
      if (Fans != 0) hash ^= Fans.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      followPlayer_.WriteTo(output, _repeated_followPlayer_codec);
      followedByPlayer_.WriteTo(output, _repeated_followedByPlayer_codec);
      displayNpc_.WriteTo(output, _repeated_displayNpc_codec);
      displayCancelNpc_.WriteTo(output, _repeated_displayCancelNpc_codec);
      readyWeiboId_.WriteTo(output, _repeated_readyWeiboId_codec);
      weiboMsgs_.WriteTo(output, _repeated_weiboMsgs_codec);
      if (Fans != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Fans);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += followPlayer_.CalculateSize(_repeated_followPlayer_codec);
      size += followedByPlayer_.CalculateSize(_repeated_followedByPlayer_codec);
      size += displayNpc_.CalculateSize(_repeated_displayNpc_codec);
      size += displayCancelNpc_.CalculateSize(_repeated_displayCancelNpc_codec);
      size += readyWeiboId_.CalculateSize(_repeated_readyWeiboId_codec);
      size += weiboMsgs_.CalculateSize(_repeated_weiboMsgs_codec);
      if (Fans != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Fans);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerWeiboInfo other) {
      if (other == null) {
        return;
      }
      followPlayer_.Add(other.followPlayer_);
      followedByPlayer_.Add(other.followedByPlayer_);
      displayNpc_.Add(other.displayNpc_);
      displayCancelNpc_.Add(other.displayCancelNpc_);
      readyWeiboId_.Add(other.readyWeiboId_);
      weiboMsgs_.Add(other.weiboMsgs_);
      if (other.Fans != 0) {
        Fans = other.Fans;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            followPlayer_.AddEntriesFrom(input, _repeated_followPlayer_codec);
            break;
          }
          case 18:
          case 16: {
            followedByPlayer_.AddEntriesFrom(input, _repeated_followedByPlayer_codec);
            break;
          }
          case 26:
          case 24: {
            displayNpc_.AddEntriesFrom(input, _repeated_displayNpc_codec);
            break;
          }
          case 34:
          case 32: {
            displayCancelNpc_.AddEntriesFrom(input, _repeated_displayCancelNpc_codec);
            break;
          }
          case 42:
          case 40: {
            readyWeiboId_.AddEntriesFrom(input, _repeated_readyWeiboId_codec);
            break;
          }
          case 50: {
            weiboMsgs_.AddEntriesFrom(input, _repeated_weiboMsgs_codec);
            break;
          }
          case 56: {
            Fans = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 新手指引
  /// </summary>
  public sealed partial class PlayerNewGuide : pb::IMessage<PlayerNewGuide> {
    private static readonly pb::MessageParser<PlayerNewGuide> _parser = new pb::MessageParser<PlayerNewGuide>(() => new PlayerNewGuide());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerNewGuide> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerNewGuide() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerNewGuide(PlayerNewGuide other) : this() {
      isSkip_ = other.isSkip_;
      newGuideIds_ = other.newGuideIds_.Clone();
      funcGuideIds_ = other.funcGuideIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerNewGuide Clone() {
      return new PlayerNewGuide(this);
    }

    /// <summary>Field number for the "is_skip" field.</summary>
    public const int IsSkipFieldNumber = 1;
    private int isSkip_;
    /// <summary>
    /// 是否跳过
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsSkip {
      get { return isSkip_; }
      set {
        isSkip_ = value;
      }
    }

    /// <summary>Field number for the "new_guide_ids" field.</summary>
    public const int NewGuideIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_newGuideIds_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> newGuideIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 新手指引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> NewGuideIds {
      get { return newGuideIds_; }
    }

    /// <summary>Field number for the "func_guide_ids" field.</summary>
    public const int FuncGuideIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_funcGuideIds_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> funcGuideIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 功能引导
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FuncGuideIds {
      get { return funcGuideIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerNewGuide);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerNewGuide other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsSkip != other.IsSkip) return false;
      if(!newGuideIds_.Equals(other.newGuideIds_)) return false;
      if(!funcGuideIds_.Equals(other.funcGuideIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsSkip != 0) hash ^= IsSkip.GetHashCode();
      hash ^= newGuideIds_.GetHashCode();
      hash ^= funcGuideIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsSkip != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsSkip);
      }
      newGuideIds_.WriteTo(output, _repeated_newGuideIds_codec);
      funcGuideIds_.WriteTo(output, _repeated_funcGuideIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsSkip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsSkip);
      }
      size += newGuideIds_.CalculateSize(_repeated_newGuideIds_codec);
      size += funcGuideIds_.CalculateSize(_repeated_funcGuideIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerNewGuide other) {
      if (other == null) {
        return;
      }
      if (other.IsSkip != 0) {
        IsSkip = other.IsSkip;
      }
      newGuideIds_.Add(other.newGuideIds_);
      funcGuideIds_.Add(other.funcGuideIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsSkip = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            newGuideIds_.AddEntriesFrom(input, _repeated_newGuideIds_codec);
            break;
          }
          case 26:
          case 24: {
            funcGuideIds_.AddEntriesFrom(input, _repeated_funcGuideIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 竞技场信息
  /// </summary>
  public sealed partial class GradeArenaInfo : pb::IMessage<GradeArenaInfo> {
    private static readonly pb::MessageParser<GradeArenaInfo> _parser = new pb::MessageParser<GradeArenaInfo>(() => new GradeArenaInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GradeArenaInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeArenaInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeArenaInfo(GradeArenaInfo other) : this() {
      rank_ = other.rank_;
      playerId_ = other.playerId_;
      level_ = other.level_;
      grade_ = other.grade_;
      sex_ = other.sex_;
      faction_ = other.faction_;
      opponentId_ = other.opponentId_;
      guildId_ = other.guildId_;
      fightPower_ = other.fightPower_;
      playerName_ = other.playerName_;
      guildName_ = other.guildName_;
      yesterdayGrade_ = other.yesterdayGrade_;
      yesterdayRank_ = other.yesterdayRank_;
      Fashion = other.fashion_ != null ? other.Fashion.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeArenaInfo Clone() {
      return new GradeArenaInfo(this);
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 1;
    private int rank_;
    /// <summary>
    /// 排行
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private ulong playerId_;
    /// <summary>
    /// uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "grade" field.</summary>
    public const int GradeFieldNumber = 4;
    private int grade_;
    /// <summary>
    /// 咖位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Grade {
      get { return grade_; }
      set {
        grade_ = value;
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 5;
    private int sex_;
    /// <summary>
    /// 性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "faction" field.</summary>
    public const int FactionFieldNumber = 7;
    private int faction_;
    /// <summary>
    /// 势力阵营
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Faction {
      get { return faction_; }
      set {
        faction_ = value;
      }
    }

    /// <summary>Field number for the "opponent_id" field.</summary>
    public const int OpponentIdFieldNumber = 8;
    private ulong opponentId_;
    /// <summary>
    /// 对家uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OpponentId {
      get { return opponentId_; }
      set {
        opponentId_ = value;
      }
    }

    /// <summary>Field number for the "guild_id" field.</summary>
    public const int GuildIdFieldNumber = 9;
    private ulong guildId_;
    /// <summary>
    /// 协会id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "fight_power" field.</summary>
    public const int FightPowerFieldNumber = 10;
    private int fightPower_;
    /// <summary>
    /// 战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FightPower {
      get { return fightPower_; }
      set {
        fightPower_ = value;
      }
    }

    /// <summary>Field number for the "player_name" field.</summary>
    public const int PlayerNameFieldNumber = 11;
    private string playerName_ = "";
    /// <summary>
    /// 名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guild_name" field.</summary>
    public const int GuildNameFieldNumber = 12;
    private string guildName_ = "";
    /// <summary>
    /// 协会名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "yesterday_grade" field.</summary>
    public const int YesterdayGradeFieldNumber = 13;
    private int yesterdayGrade_;
    /// <summary>
    /// 昨日咖位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int YesterdayGrade {
      get { return yesterdayGrade_; }
      set {
        yesterdayGrade_ = value;
      }
    }

    /// <summary>Field number for the "yesterday_rank" field.</summary>
    public const int YesterdayRankFieldNumber = 14;
    private int yesterdayRank_;
    /// <summary>
    /// 昨日排行
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int YesterdayRank {
      get { return yesterdayRank_; }
      set {
        yesterdayRank_ = value;
      }
    }

    /// <summary>Field number for the "fashion" field.</summary>
    public const int FashionFieldNumber = 15;
    private global::Stardom.FashionSchemeInfo fashion_;
    /// <summary>
    /// 时装
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.FashionSchemeInfo Fashion {
      get { return fashion_; }
      set {
        fashion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GradeArenaInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GradeArenaInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Rank != other.Rank) return false;
      if (PlayerId != other.PlayerId) return false;
      if (Level != other.Level) return false;
      if (Grade != other.Grade) return false;
      if (Sex != other.Sex) return false;
      if (Faction != other.Faction) return false;
      if (OpponentId != other.OpponentId) return false;
      if (GuildId != other.GuildId) return false;
      if (FightPower != other.FightPower) return false;
      if (PlayerName != other.PlayerName) return false;
      if (GuildName != other.GuildName) return false;
      if (YesterdayGrade != other.YesterdayGrade) return false;
      if (YesterdayRank != other.YesterdayRank) return false;
      if (!object.Equals(Fashion, other.Fashion)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Grade != 0) hash ^= Grade.GetHashCode();
      if (Sex != 0) hash ^= Sex.GetHashCode();
      if (Faction != 0) hash ^= Faction.GetHashCode();
      if (OpponentId != 0UL) hash ^= OpponentId.GetHashCode();
      if (GuildId != 0UL) hash ^= GuildId.GetHashCode();
      if (FightPower != 0) hash ^= FightPower.GetHashCode();
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (GuildName.Length != 0) hash ^= GuildName.GetHashCode();
      if (YesterdayGrade != 0) hash ^= YesterdayGrade.GetHashCode();
      if (YesterdayRank != 0) hash ^= YesterdayRank.GetHashCode();
      if (fashion_ != null) hash ^= Fashion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rank != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rank);
      }
      if (PlayerId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(PlayerId);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (Grade != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Grade);
      }
      if (Sex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Sex);
      }
      if (Faction != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Faction);
      }
      if (OpponentId != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(OpponentId);
      }
      if (GuildId != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(GuildId);
      }
      if (FightPower != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(FightPower);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(PlayerName);
      }
      if (GuildName.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(GuildName);
      }
      if (YesterdayGrade != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(YesterdayGrade);
      }
      if (YesterdayRank != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(YesterdayRank);
      }
      if (fashion_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Fashion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Grade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Grade);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (Faction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Faction);
      }
      if (OpponentId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OpponentId);
      }
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (FightPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FightPower);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GuildName);
      }
      if (YesterdayGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(YesterdayGrade);
      }
      if (YesterdayRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(YesterdayRank);
      }
      if (fashion_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fashion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GradeArenaInfo other) {
      if (other == null) {
        return;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Grade != 0) {
        Grade = other.Grade;
      }
      if (other.Sex != 0) {
        Sex = other.Sex;
      }
      if (other.Faction != 0) {
        Faction = other.Faction;
      }
      if (other.OpponentId != 0UL) {
        OpponentId = other.OpponentId;
      }
      if (other.GuildId != 0UL) {
        GuildId = other.GuildId;
      }
      if (other.FightPower != 0) {
        FightPower = other.FightPower;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      if (other.GuildName.Length != 0) {
        GuildName = other.GuildName;
      }
      if (other.YesterdayGrade != 0) {
        YesterdayGrade = other.YesterdayGrade;
      }
      if (other.YesterdayRank != 0) {
        YesterdayRank = other.YesterdayRank;
      }
      if (other.fashion_ != null) {
        if (fashion_ == null) {
          fashion_ = new global::Stardom.FashionSchemeInfo();
        }
        Fashion.MergeFrom(other.Fashion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Rank = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            Grade = input.ReadInt32();
            break;
          }
          case 40: {
            Sex = input.ReadInt32();
            break;
          }
          case 56: {
            Faction = input.ReadInt32();
            break;
          }
          case 64: {
            OpponentId = input.ReadUInt64();
            break;
          }
          case 72: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 80: {
            FightPower = input.ReadInt32();
            break;
          }
          case 90: {
            PlayerName = input.ReadString();
            break;
          }
          case 98: {
            GuildName = input.ReadString();
            break;
          }
          case 104: {
            YesterdayGrade = input.ReadInt32();
            break;
          }
          case 112: {
            YesterdayRank = input.ReadInt32();
            break;
          }
          case 122: {
            if (fashion_ == null) {
              fashion_ = new global::Stardom.FashionSchemeInfo();
            }
            input.ReadMessage(fashion_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 晋级报名信息 
  /// </summary>
  public sealed partial class GradeRegisterInfo : pb::IMessage<GradeRegisterInfo> {
    private static readonly pb::MessageParser<GradeRegisterInfo> _parser = new pb::MessageParser<GradeRegisterInfo>(() => new GradeRegisterInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GradeRegisterInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeRegisterInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeRegisterInfo(GradeRegisterInfo other) : this() {
      playerId_ = other.playerId_;
      sex_ = other.sex_;
      playerName_ = other.playerName_;
      fightPower_ = other.fightPower_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeRegisterInfo Clone() {
      return new GradeRegisterInfo(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 2;
    private int sex_;
    /// <summary>
    /// 性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "player_name" field.</summary>
    public const int PlayerNameFieldNumber = 3;
    private string playerName_ = "";
    /// <summary>
    /// 玩家名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fight_power" field.</summary>
    public const int FightPowerFieldNumber = 4;
    private int fightPower_;
    /// <summary>
    /// 战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FightPower {
      get { return fightPower_; }
      set {
        fightPower_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GradeRegisterInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GradeRegisterInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Sex != other.Sex) return false;
      if (PlayerName != other.PlayerName) return false;
      if (FightPower != other.FightPower) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (Sex != 0) hash ^= Sex.GetHashCode();
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (FightPower != 0) hash ^= FightPower.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (Sex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Sex);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PlayerName);
      }
      if (FightPower != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FightPower);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (FightPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FightPower);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GradeRegisterInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.Sex != 0) {
        Sex = other.Sex;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      if (other.FightPower != 0) {
        FightPower = other.FightPower;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 16: {
            Sex = input.ReadInt32();
            break;
          }
          case 26: {
            PlayerName = input.ReadString();
            break;
          }
          case 32: {
            FightPower = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 晋级匹配信息
  /// </summary>
  public sealed partial class GradeMatchInfo : pb::IMessage<GradeMatchInfo> {
    private static readonly pb::MessageParser<GradeMatchInfo> _parser = new pb::MessageParser<GradeMatchInfo>(() => new GradeMatchInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GradeMatchInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeMatchInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeMatchInfo(GradeMatchInfo other) : this() {
      matchIndex_ = other.matchIndex_;
      winner_ = other.winner_;
      isBye_ = other.isBye_;
      Player1 = other.player1_ != null ? other.Player1.Clone() : null;
      Player2 = other.player2_ != null ? other.Player2.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeMatchInfo Clone() {
      return new GradeMatchInfo(this);
    }

    /// <summary>Field number for the "match_index" field.</summary>
    public const int MatchIndexFieldNumber = 1;
    private int matchIndex_;
    /// <summary>
    /// 第几轮
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MatchIndex {
      get { return matchIndex_; }
      set {
        matchIndex_ = value;
      }
    }

    /// <summary>Field number for the "winner" field.</summary>
    public const int WinnerFieldNumber = 2;
    private ulong winner_;
    /// <summary>
    /// 胜利者uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Winner {
      get { return winner_; }
      set {
        winner_ = value;
      }
    }

    /// <summary>Field number for the "is_bye" field.</summary>
    public const int IsByeFieldNumber = 3;
    private int isBye_;
    /// <summary>
    /// 是否轮空
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsBye {
      get { return isBye_; }
      set {
        isBye_ = value;
      }
    }

    /// <summary>Field number for the "player1" field.</summary>
    public const int Player1FieldNumber = 4;
    private global::Stardom.GradeArenaInfo player1_;
    /// <summary>
    /// 匹配信息1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.GradeArenaInfo Player1 {
      get { return player1_; }
      set {
        player1_ = value;
      }
    }

    /// <summary>Field number for the "player2" field.</summary>
    public const int Player2FieldNumber = 5;
    private global::Stardom.GradeArenaInfo player2_;
    /// <summary>
    /// 匹配信息1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.GradeArenaInfo Player2 {
      get { return player2_; }
      set {
        player2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GradeMatchInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GradeMatchInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchIndex != other.MatchIndex) return false;
      if (Winner != other.Winner) return false;
      if (IsBye != other.IsBye) return false;
      if (!object.Equals(Player1, other.Player1)) return false;
      if (!object.Equals(Player2, other.Player2)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchIndex != 0) hash ^= MatchIndex.GetHashCode();
      if (Winner != 0UL) hash ^= Winner.GetHashCode();
      if (IsBye != 0) hash ^= IsBye.GetHashCode();
      if (player1_ != null) hash ^= Player1.GetHashCode();
      if (player2_ != null) hash ^= Player2.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MatchIndex);
      }
      if (Winner != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Winner);
      }
      if (IsBye != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IsBye);
      }
      if (player1_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Player1);
      }
      if (player2_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Player2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MatchIndex);
      }
      if (Winner != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Winner);
      }
      if (IsBye != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsBye);
      }
      if (player1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player1);
      }
      if (player2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player2);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GradeMatchInfo other) {
      if (other == null) {
        return;
      }
      if (other.MatchIndex != 0) {
        MatchIndex = other.MatchIndex;
      }
      if (other.Winner != 0UL) {
        Winner = other.Winner;
      }
      if (other.IsBye != 0) {
        IsBye = other.IsBye;
      }
      if (other.player1_ != null) {
        if (player1_ == null) {
          player1_ = new global::Stardom.GradeArenaInfo();
        }
        Player1.MergeFrom(other.Player1);
      }
      if (other.player2_ != null) {
        if (player2_ == null) {
          player2_ = new global::Stardom.GradeArenaInfo();
        }
        Player2.MergeFrom(other.Player2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MatchIndex = input.ReadInt32();
            break;
          }
          case 16: {
            Winner = input.ReadUInt64();
            break;
          }
          case 24: {
            IsBye = input.ReadInt32();
            break;
          }
          case 34: {
            if (player1_ == null) {
              player1_ = new global::Stardom.GradeArenaInfo();
            }
            input.ReadMessage(player1_);
            break;
          }
          case 42: {
            if (player2_ == null) {
              player2_ = new global::Stardom.GradeArenaInfo();
            }
            input.ReadMessage(player2_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 竞技场挑战记录
  /// </summary>
  public sealed partial class GradeArenaEvent : pb::IMessage<GradeArenaEvent> {
    private static readonly pb::MessageParser<GradeArenaEvent> _parser = new pb::MessageParser<GradeArenaEvent>(() => new GradeArenaEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GradeArenaEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeArenaEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeArenaEvent(GradeArenaEvent other) : this() {
      eventId_ = other.eventId_;
      eventTime_ = other.eventTime_;
      opponentId_ = other.opponentId_;
      params_ = other.params_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeArenaEvent Clone() {
      return new GradeArenaEvent(this);
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 1;
    private int eventId_;
    /// <summary>
    /// 事件id(GradeEventCfg)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventId {
      get { return eventId_; }
      set {
        eventId_ = value;
      }
    }

    /// <summary>Field number for the "event_time" field.</summary>
    public const int EventTimeFieldNumber = 2;
    private ulong eventTime_;
    /// <summary>
    /// 事件时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EventTime {
      get { return eventTime_; }
      set {
        eventTime_ = value;
      }
    }

    /// <summary>Field number for the "opponent_id" field.</summary>
    public const int OpponentIdFieldNumber = 3;
    private ulong opponentId_;
    /// <summary>
    /// 对手id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OpponentId {
      get { return opponentId_; }
      set {
        opponentId_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Stardom.KeyParam> _repeated_params_codec
        = pb::FieldCodec.ForMessage(34, global::Stardom.KeyParam.Parser);
    private readonly pbc::RepeatedField<global::Stardom.KeyParam> params_ = new pbc::RepeatedField<global::Stardom.KeyParam>();
    /// <summary>
    /// 事件参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.KeyParam> Params {
      get { return params_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GradeArenaEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GradeArenaEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if (EventTime != other.EventTime) return false;
      if (OpponentId != other.OpponentId) return false;
      if(!params_.Equals(other.params_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventId != 0) hash ^= EventId.GetHashCode();
      if (EventTime != 0UL) hash ^= EventTime.GetHashCode();
      if (OpponentId != 0UL) hash ^= OpponentId.GetHashCode();
      hash ^= params_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EventId);
      }
      if (EventTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(EventTime);
      }
      if (OpponentId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(OpponentId);
      }
      params_.WriteTo(output, _repeated_params_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventId);
      }
      if (EventTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EventTime);
      }
      if (OpponentId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OpponentId);
      }
      size += params_.CalculateSize(_repeated_params_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GradeArenaEvent other) {
      if (other == null) {
        return;
      }
      if (other.EventId != 0) {
        EventId = other.EventId;
      }
      if (other.EventTime != 0UL) {
        EventTime = other.EventTime;
      }
      if (other.OpponentId != 0UL) {
        OpponentId = other.OpponentId;
      }
      params_.Add(other.params_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EventId = input.ReadInt32();
            break;
          }
          case 16: {
            EventTime = input.ReadUInt64();
            break;
          }
          case 24: {
            OpponentId = input.ReadUInt64();
            break;
          }
          case 34: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 竞技场排行榜
  /// </summary>
  public sealed partial class GradeArenaCache : pb::IMessage<GradeArenaCache> {
    private static readonly pb::MessageParser<GradeArenaCache> _parser = new pb::MessageParser<GradeArenaCache>(() => new GradeArenaCache());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GradeArenaCache> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeArenaCache() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeArenaCache(GradeArenaCache other) : this() {
      grade_ = other.grade_;
      rankPlayers_ = other.rankPlayers_.Clone();
      yesterdayRankPlayers_ = other.yesterdayRankPlayers_.Clone();
      registerPlayers_ = other.registerPlayers_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeArenaCache Clone() {
      return new GradeArenaCache(this);
    }

    /// <summary>Field number for the "grade" field.</summary>
    public const int GradeFieldNumber = 1;
    private int grade_;
    /// <summary>
    /// 竞技场缓存数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Grade {
      get { return grade_; }
      set {
        grade_ = value;
      }
    }

    /// <summary>Field number for the "rank_players" field.</summary>
    public const int RankPlayersFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_rankPlayers_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> rankPlayers_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// 竞技场排行榜
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> RankPlayers {
      get { return rankPlayers_; }
    }

    /// <summary>Field number for the "yesterday_rank_players" field.</summary>
    public const int YesterdayRankPlayersFieldNumber = 3;
    private static readonly pb::FieldCodec<ulong> _repeated_yesterdayRankPlayers_codec
        = pb::FieldCodec.ForUInt64(26);
    private readonly pbc::RepeatedField<ulong> yesterdayRankPlayers_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// 竞技场昨日排行榜
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> YesterdayRankPlayers {
      get { return yesterdayRankPlayers_; }
    }

    /// <summary>Field number for the "register_players" field.</summary>
    public const int RegisterPlayersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Stardom.GradeRegisterInfo> _repeated_registerPlayers_codec
        = pb::FieldCodec.ForMessage(34, global::Stardom.GradeRegisterInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.GradeRegisterInfo> registerPlayers_ = new pbc::RepeatedField<global::Stardom.GradeRegisterInfo>();
    /// <summary>
    /// 竞技场报名玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.GradeRegisterInfo> RegisterPlayers {
      get { return registerPlayers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GradeArenaCache);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GradeArenaCache other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Grade != other.Grade) return false;
      if(!rankPlayers_.Equals(other.rankPlayers_)) return false;
      if(!yesterdayRankPlayers_.Equals(other.yesterdayRankPlayers_)) return false;
      if(!registerPlayers_.Equals(other.registerPlayers_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Grade != 0) hash ^= Grade.GetHashCode();
      hash ^= rankPlayers_.GetHashCode();
      hash ^= yesterdayRankPlayers_.GetHashCode();
      hash ^= registerPlayers_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Grade != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Grade);
      }
      rankPlayers_.WriteTo(output, _repeated_rankPlayers_codec);
      yesterdayRankPlayers_.WriteTo(output, _repeated_yesterdayRankPlayers_codec);
      registerPlayers_.WriteTo(output, _repeated_registerPlayers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Grade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Grade);
      }
      size += rankPlayers_.CalculateSize(_repeated_rankPlayers_codec);
      size += yesterdayRankPlayers_.CalculateSize(_repeated_yesterdayRankPlayers_codec);
      size += registerPlayers_.CalculateSize(_repeated_registerPlayers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GradeArenaCache other) {
      if (other == null) {
        return;
      }
      if (other.Grade != 0) {
        Grade = other.Grade;
      }
      rankPlayers_.Add(other.rankPlayers_);
      yesterdayRankPlayers_.Add(other.yesterdayRankPlayers_);
      registerPlayers_.Add(other.registerPlayers_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Grade = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            rankPlayers_.AddEntriesFrom(input, _repeated_rankPlayers_codec);
            break;
          }
          case 26:
          case 24: {
            yesterdayRankPlayers_.AddEntriesFrom(input, _repeated_yesterdayRankPlayers_codec);
            break;
          }
          case 34: {
            registerPlayers_.AddEntriesFrom(input, _repeated_registerPlayers_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 初始化角色信息
  /// </summary>
  public sealed partial class InitFighterInfo : pb::IMessage<InitFighterInfo> {
    private static readonly pb::MessageParser<InitFighterInfo> _parser = new pb::MessageParser<InitFighterInfo>(() => new InitFighterInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitFighterInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitFighterInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitFighterInfo(InitFighterInfo other) : this() {
      wid_ = other.wid_;
      pos_ = other.pos_;
      cardId_ = other.cardId_;
      name_ = other.name_;
      isMonster_ = other.isMonster_;
      level_ = other.level_;
      baseSkillId_ = other.baseSkillId_;
      ultimateSkillId_ = other.ultimateSkillId_;
      passiveSkillId_ = other.passiveSkillId_;
      hp_ = other.hp_;
      maxHp_ = other.maxHp_;
      attack_ = other.attack_;
      speed_ = other.speed_;
      defence_ = other.defence_;
      hit_ = other.hit_;
      dodge_ = other.dodge_;
      critical_ = other.critical_;
      toughness_ = other.toughness_;
      stateHit_ = other.stateHit_;
      stateResist_ = other.stateResist_;
      rage_ = other.rage_;
      hitRage_ = other.hitRage_;
      atkRage_ = other.atkRage_;
      maxRage_ = other.maxRage_;
      shieldHp_ = other.shieldHp_;
      fightPower_ = other.fightPower_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitFighterInfo Clone() {
      return new InitFighterInfo(this);
    }

    /// <summary>Field number for the "wid" field.</summary>
    public const int WidFieldNumber = 1;
    private int wid_;
    /// <summary>
    /// 临时编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Wid {
      get { return wid_; }
      set {
        wid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private int pos_;
    /// <summary>
    /// 站位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 3;
    private int cardId_;
    /// <summary>
    /// 卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    /// <summary>
    /// 名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_monster" field.</summary>
    public const int IsMonsterFieldNumber = 5;
    private int isMonster_;
    /// <summary>
    /// 是否是怪物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsMonster {
      get { return isMonster_; }
      set {
        isMonster_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 6;
    private int level_;
    /// <summary>
    /// 角色等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "base_skill_id" field.</summary>
    public const int BaseSkillIdFieldNumber = 7;
    private int baseSkillId_;
    /// <summary>
    /// 基础技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BaseSkillId {
      get { return baseSkillId_; }
      set {
        baseSkillId_ = value;
      }
    }

    /// <summary>Field number for the "ultimate_skill_id" field.</summary>
    public const int UltimateSkillIdFieldNumber = 8;
    private int ultimateSkillId_;
    /// <summary>
    /// 终极技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UltimateSkillId {
      get { return ultimateSkillId_; }
      set {
        ultimateSkillId_ = value;
      }
    }

    /// <summary>Field number for the "passive_skill_id" field.</summary>
    public const int PassiveSkillIdFieldNumber = 9;
    private int passiveSkillId_;
    /// <summary>
    /// 被动技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PassiveSkillId {
      get { return passiveSkillId_; }
      set {
        passiveSkillId_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 10;
    private int hp_;
    /// <summary>
    /// 血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "max_hp" field.</summary>
    public const int MaxHpFieldNumber = 11;
    private int maxHp_;
    /// <summary>
    /// 血量上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    /// <summary>Field number for the "attack" field.</summary>
    public const int AttackFieldNumber = 12;
    private int attack_;
    /// <summary>
    /// 攻击
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Attack {
      get { return attack_; }
      set {
        attack_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 13;
    private int speed_;
    /// <summary>
    /// 速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "defence" field.</summary>
    public const int DefenceFieldNumber = 14;
    private int defence_;
    /// <summary>
    /// 防御
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Defence {
      get { return defence_; }
      set {
        defence_ = value;
      }
    }

    /// <summary>Field number for the "hit" field.</summary>
    public const int HitFieldNumber = 15;
    private int hit_;
    /// <summary>
    /// 命中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hit {
      get { return hit_; }
      set {
        hit_ = value;
      }
    }

    /// <summary>Field number for the "dodge" field.</summary>
    public const int DodgeFieldNumber = 16;
    private int dodge_;
    /// <summary>
    /// 闪避
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dodge {
      get { return dodge_; }
      set {
        dodge_ = value;
      }
    }

    /// <summary>Field number for the "critical" field.</summary>
    public const int CriticalFieldNumber = 17;
    private int critical_;
    /// <summary>
    /// 暴击
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Critical {
      get { return critical_; }
      set {
        critical_ = value;
      }
    }

    /// <summary>Field number for the "toughness" field.</summary>
    public const int ToughnessFieldNumber = 18;
    private int toughness_;
    /// <summary>
    /// 韧性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Toughness {
      get { return toughness_; }
      set {
        toughness_ = value;
      }
    }

    /// <summary>Field number for the "state_hit" field.</summary>
    public const int StateHitFieldNumber = 19;
    private int stateHit_;
    /// <summary>
    /// 状态命中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StateHit {
      get { return stateHit_; }
      set {
        stateHit_ = value;
      }
    }

    /// <summary>Field number for the "state_resist" field.</summary>
    public const int StateResistFieldNumber = 20;
    private int stateResist_;
    /// <summary>
    /// 状态抵抗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StateResist {
      get { return stateResist_; }
      set {
        stateResist_ = value;
      }
    }

    /// <summary>Field number for the "rage" field.</summary>
    public const int RageFieldNumber = 21;
    private int rage_;
    /// <summary>
    /// 怒气
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rage {
      get { return rage_; }
      set {
        rage_ = value;
      }
    }

    /// <summary>Field number for the "hit_rage" field.</summary>
    public const int HitRageFieldNumber = 22;
    private int hitRage_;
    /// <summary>
    /// 受击怒气
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitRage {
      get { return hitRage_; }
      set {
        hitRage_ = value;
      }
    }

    /// <summary>Field number for the "atk_rage" field.</summary>
    public const int AtkRageFieldNumber = 23;
    private int atkRage_;
    /// <summary>
    /// 攻击怒气
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AtkRage {
      get { return atkRage_; }
      set {
        atkRage_ = value;
      }
    }

    /// <summary>Field number for the "max_rage" field.</summary>
    public const int MaxRageFieldNumber = 24;
    private int maxRage_;
    /// <summary>
    /// 最大怒气
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxRage {
      get { return maxRage_; }
      set {
        maxRage_ = value;
      }
    }

    /// <summary>Field number for the "shield_hp" field.</summary>
    public const int ShieldHpFieldNumber = 25;
    private int shieldHp_;
    /// <summary>
    /// 护盾值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShieldHp {
      get { return shieldHp_; }
      set {
        shieldHp_ = value;
      }
    }

    /// <summary>Field number for the "fight_power" field.</summary>
    public const int FightPowerFieldNumber = 26;
    private int fightPower_;
    /// <summary>
    /// 战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FightPower {
      get { return fightPower_; }
      set {
        fightPower_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitFighterInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitFighterInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Wid != other.Wid) return false;
      if (Pos != other.Pos) return false;
      if (CardId != other.CardId) return false;
      if (Name != other.Name) return false;
      if (IsMonster != other.IsMonster) return false;
      if (Level != other.Level) return false;
      if (BaseSkillId != other.BaseSkillId) return false;
      if (UltimateSkillId != other.UltimateSkillId) return false;
      if (PassiveSkillId != other.PassiveSkillId) return false;
      if (Hp != other.Hp) return false;
      if (MaxHp != other.MaxHp) return false;
      if (Attack != other.Attack) return false;
      if (Speed != other.Speed) return false;
      if (Defence != other.Defence) return false;
      if (Hit != other.Hit) return false;
      if (Dodge != other.Dodge) return false;
      if (Critical != other.Critical) return false;
      if (Toughness != other.Toughness) return false;
      if (StateHit != other.StateHit) return false;
      if (StateResist != other.StateResist) return false;
      if (Rage != other.Rage) return false;
      if (HitRage != other.HitRage) return false;
      if (AtkRage != other.AtkRage) return false;
      if (MaxRage != other.MaxRage) return false;
      if (ShieldHp != other.ShieldHp) return false;
      if (FightPower != other.FightPower) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Wid != 0) hash ^= Wid.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (CardId != 0) hash ^= CardId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (IsMonster != 0) hash ^= IsMonster.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (BaseSkillId != 0) hash ^= BaseSkillId.GetHashCode();
      if (UltimateSkillId != 0) hash ^= UltimateSkillId.GetHashCode();
      if (PassiveSkillId != 0) hash ^= PassiveSkillId.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (MaxHp != 0) hash ^= MaxHp.GetHashCode();
      if (Attack != 0) hash ^= Attack.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (Defence != 0) hash ^= Defence.GetHashCode();
      if (Hit != 0) hash ^= Hit.GetHashCode();
      if (Dodge != 0) hash ^= Dodge.GetHashCode();
      if (Critical != 0) hash ^= Critical.GetHashCode();
      if (Toughness != 0) hash ^= Toughness.GetHashCode();
      if (StateHit != 0) hash ^= StateHit.GetHashCode();
      if (StateResist != 0) hash ^= StateResist.GetHashCode();
      if (Rage != 0) hash ^= Rage.GetHashCode();
      if (HitRage != 0) hash ^= HitRage.GetHashCode();
      if (AtkRage != 0) hash ^= AtkRage.GetHashCode();
      if (MaxRage != 0) hash ^= MaxRage.GetHashCode();
      if (ShieldHp != 0) hash ^= ShieldHp.GetHashCode();
      if (FightPower != 0) hash ^= FightPower.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Wid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Wid);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pos);
      }
      if (CardId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CardId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (IsMonster != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(IsMonster);
      }
      if (Level != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Level);
      }
      if (BaseSkillId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(BaseSkillId);
      }
      if (UltimateSkillId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(UltimateSkillId);
      }
      if (PassiveSkillId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(PassiveSkillId);
      }
      if (Hp != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Hp);
      }
      if (MaxHp != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MaxHp);
      }
      if (Attack != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Attack);
      }
      if (Speed != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Speed);
      }
      if (Defence != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Defence);
      }
      if (Hit != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Hit);
      }
      if (Dodge != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Dodge);
      }
      if (Critical != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Critical);
      }
      if (Toughness != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Toughness);
      }
      if (StateHit != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(StateHit);
      }
      if (StateResist != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(StateResist);
      }
      if (Rage != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(Rage);
      }
      if (HitRage != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(HitRage);
      }
      if (AtkRage != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(AtkRage);
      }
      if (MaxRage != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(MaxRage);
      }
      if (ShieldHp != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(ShieldHp);
      }
      if (FightPower != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(FightPower);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Wid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Wid);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (IsMonster != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsMonster);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (BaseSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaseSkillId);
      }
      if (UltimateSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UltimateSkillId);
      }
      if (PassiveSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PassiveSkillId);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (MaxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHp);
      }
      if (Attack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attack);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (Defence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Defence);
      }
      if (Hit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hit);
      }
      if (Dodge != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Dodge);
      }
      if (Critical != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Critical);
      }
      if (Toughness != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Toughness);
      }
      if (StateHit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StateHit);
      }
      if (StateResist != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StateResist);
      }
      if (Rage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Rage);
      }
      if (HitRage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HitRage);
      }
      if (AtkRage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AtkRage);
      }
      if (MaxRage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxRage);
      }
      if (ShieldHp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShieldHp);
      }
      if (FightPower != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FightPower);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitFighterInfo other) {
      if (other == null) {
        return;
      }
      if (other.Wid != 0) {
        Wid = other.Wid;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.IsMonster != 0) {
        IsMonster = other.IsMonster;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.BaseSkillId != 0) {
        BaseSkillId = other.BaseSkillId;
      }
      if (other.UltimateSkillId != 0) {
        UltimateSkillId = other.UltimateSkillId;
      }
      if (other.PassiveSkillId != 0) {
        PassiveSkillId = other.PassiveSkillId;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.MaxHp != 0) {
        MaxHp = other.MaxHp;
      }
      if (other.Attack != 0) {
        Attack = other.Attack;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.Defence != 0) {
        Defence = other.Defence;
      }
      if (other.Hit != 0) {
        Hit = other.Hit;
      }
      if (other.Dodge != 0) {
        Dodge = other.Dodge;
      }
      if (other.Critical != 0) {
        Critical = other.Critical;
      }
      if (other.Toughness != 0) {
        Toughness = other.Toughness;
      }
      if (other.StateHit != 0) {
        StateHit = other.StateHit;
      }
      if (other.StateResist != 0) {
        StateResist = other.StateResist;
      }
      if (other.Rage != 0) {
        Rage = other.Rage;
      }
      if (other.HitRage != 0) {
        HitRage = other.HitRage;
      }
      if (other.AtkRage != 0) {
        AtkRage = other.AtkRage;
      }
      if (other.MaxRage != 0) {
        MaxRage = other.MaxRage;
      }
      if (other.ShieldHp != 0) {
        ShieldHp = other.ShieldHp;
      }
      if (other.FightPower != 0) {
        FightPower = other.FightPower;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Wid = input.ReadInt32();
            break;
          }
          case 16: {
            Pos = input.ReadInt32();
            break;
          }
          case 24: {
            CardId = input.ReadInt32();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 40: {
            IsMonster = input.ReadInt32();
            break;
          }
          case 48: {
            Level = input.ReadInt32();
            break;
          }
          case 56: {
            BaseSkillId = input.ReadInt32();
            break;
          }
          case 64: {
            UltimateSkillId = input.ReadInt32();
            break;
          }
          case 72: {
            PassiveSkillId = input.ReadInt32();
            break;
          }
          case 80: {
            Hp = input.ReadInt32();
            break;
          }
          case 88: {
            MaxHp = input.ReadInt32();
            break;
          }
          case 96: {
            Attack = input.ReadInt32();
            break;
          }
          case 104: {
            Speed = input.ReadInt32();
            break;
          }
          case 112: {
            Defence = input.ReadInt32();
            break;
          }
          case 120: {
            Hit = input.ReadInt32();
            break;
          }
          case 128: {
            Dodge = input.ReadInt32();
            break;
          }
          case 136: {
            Critical = input.ReadInt32();
            break;
          }
          case 144: {
            Toughness = input.ReadInt32();
            break;
          }
          case 152: {
            StateHit = input.ReadInt32();
            break;
          }
          case 160: {
            StateResist = input.ReadInt32();
            break;
          }
          case 168: {
            Rage = input.ReadInt32();
            break;
          }
          case 176: {
            HitRage = input.ReadInt32();
            break;
          }
          case 184: {
            AtkRage = input.ReadInt32();
            break;
          }
          case 192: {
            MaxRage = input.ReadInt32();
            break;
          }
          case 200: {
            ShieldHp = input.ReadInt32();
            break;
          }
          case 208: {
            FightPower = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 角色信息
  /// </summary>
  public sealed partial class WarFighterInfo : pb::IMessage<WarFighterInfo> {
    private static readonly pb::MessageParser<WarFighterInfo> _parser = new pb::MessageParser<WarFighterInfo>(() => new WarFighterInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WarFighterInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarFighterInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarFighterInfo(WarFighterInfo other) : this() {
      wid_ = other.wid_;
      name_ = other.name_;
      camp_ = other.camp_;
      isMonster_ = other.isMonster_;
      pos_ = other.pos_;
      cardId_ = other.cardId_;
      level_ = other.level_;
      baseSkillId_ = other.baseSkillId_;
      ultimateSkillId_ = other.ultimateSkillId_;
      passiveSkillId_ = other.passiveSkillId_;
      hp_ = other.hp_;
      maxHp_ = other.maxHp_;
      rage_ = other.rage_;
      maxRage_ = other.maxRage_;
      Fashion = other.fashion_ != null ? other.Fashion.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarFighterInfo Clone() {
      return new WarFighterInfo(this);
    }

    /// <summary>Field number for the "wid" field.</summary>
    public const int WidFieldNumber = 1;
    private int wid_;
    /// <summary>
    /// 临时编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Wid {
      get { return wid_; }
      set {
        wid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 主角名称，非主角不赋值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "camp" field.</summary>
    public const int CampFieldNumber = 3;
    private int camp_;
    /// <summary>
    /// 阵营 1蓝2红
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Camp {
      get { return camp_; }
      set {
        camp_ = value;
      }
    }

    /// <summary>Field number for the "is_monster" field.</summary>
    public const int IsMonsterFieldNumber = 4;
    private int isMonster_;
    /// <summary>
    /// 是否是怪物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsMonster {
      get { return isMonster_; }
      set {
        isMonster_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 5;
    private int pos_;
    /// <summary>
    /// 站位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 6;
    private int cardId_;
    /// <summary>
    /// 卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 7;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "base_skill_id" field.</summary>
    public const int BaseSkillIdFieldNumber = 8;
    private int baseSkillId_;
    /// <summary>
    /// 基础技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BaseSkillId {
      get { return baseSkillId_; }
      set {
        baseSkillId_ = value;
      }
    }

    /// <summary>Field number for the "ultimate_skill_id" field.</summary>
    public const int UltimateSkillIdFieldNumber = 9;
    private int ultimateSkillId_;
    /// <summary>
    /// 终极技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UltimateSkillId {
      get { return ultimateSkillId_; }
      set {
        ultimateSkillId_ = value;
      }
    }

    /// <summary>Field number for the "passive_skill_id" field.</summary>
    public const int PassiveSkillIdFieldNumber = 10;
    private int passiveSkillId_;
    /// <summary>
    /// 被动技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PassiveSkillId {
      get { return passiveSkillId_; }
      set {
        passiveSkillId_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 11;
    private int hp_;
    /// <summary>
    /// 血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "max_hp" field.</summary>
    public const int MaxHpFieldNumber = 12;
    private int maxHp_;
    /// <summary>
    /// 血量上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    /// <summary>Field number for the "rage" field.</summary>
    public const int RageFieldNumber = 13;
    private int rage_;
    /// <summary>
    /// 怒气
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rage {
      get { return rage_; }
      set {
        rage_ = value;
      }
    }

    /// <summary>Field number for the "max_rage" field.</summary>
    public const int MaxRageFieldNumber = 14;
    private int maxRage_;
    /// <summary>
    /// 怒气上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxRage {
      get { return maxRage_; }
      set {
        maxRage_ = value;
      }
    }

    /// <summary>Field number for the "fashion" field.</summary>
    public const int FashionFieldNumber = 15;
    private global::Stardom.FashionSchemeInfo fashion_;
    /// <summary>
    /// 时装
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.FashionSchemeInfo Fashion {
      get { return fashion_; }
      set {
        fashion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WarFighterInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WarFighterInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Wid != other.Wid) return false;
      if (Name != other.Name) return false;
      if (Camp != other.Camp) return false;
      if (IsMonster != other.IsMonster) return false;
      if (Pos != other.Pos) return false;
      if (CardId != other.CardId) return false;
      if (Level != other.Level) return false;
      if (BaseSkillId != other.BaseSkillId) return false;
      if (UltimateSkillId != other.UltimateSkillId) return false;
      if (PassiveSkillId != other.PassiveSkillId) return false;
      if (Hp != other.Hp) return false;
      if (MaxHp != other.MaxHp) return false;
      if (Rage != other.Rage) return false;
      if (MaxRage != other.MaxRage) return false;
      if (!object.Equals(Fashion, other.Fashion)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Wid != 0) hash ^= Wid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Camp != 0) hash ^= Camp.GetHashCode();
      if (IsMonster != 0) hash ^= IsMonster.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (CardId != 0) hash ^= CardId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (BaseSkillId != 0) hash ^= BaseSkillId.GetHashCode();
      if (UltimateSkillId != 0) hash ^= UltimateSkillId.GetHashCode();
      if (PassiveSkillId != 0) hash ^= PassiveSkillId.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (MaxHp != 0) hash ^= MaxHp.GetHashCode();
      if (Rage != 0) hash ^= Rage.GetHashCode();
      if (MaxRage != 0) hash ^= MaxRage.GetHashCode();
      if (fashion_ != null) hash ^= Fashion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Wid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Wid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Camp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Camp);
      }
      if (IsMonster != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(IsMonster);
      }
      if (Pos != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Pos);
      }
      if (CardId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CardId);
      }
      if (Level != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Level);
      }
      if (BaseSkillId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(BaseSkillId);
      }
      if (UltimateSkillId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(UltimateSkillId);
      }
      if (PassiveSkillId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(PassiveSkillId);
      }
      if (Hp != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Hp);
      }
      if (MaxHp != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(MaxHp);
      }
      if (Rage != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Rage);
      }
      if (MaxRage != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(MaxRage);
      }
      if (fashion_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Fashion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Wid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Wid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Camp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Camp);
      }
      if (IsMonster != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsMonster);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (BaseSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaseSkillId);
      }
      if (UltimateSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UltimateSkillId);
      }
      if (PassiveSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PassiveSkillId);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (MaxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHp);
      }
      if (Rage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rage);
      }
      if (MaxRage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxRage);
      }
      if (fashion_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fashion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WarFighterInfo other) {
      if (other == null) {
        return;
      }
      if (other.Wid != 0) {
        Wid = other.Wid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Camp != 0) {
        Camp = other.Camp;
      }
      if (other.IsMonster != 0) {
        IsMonster = other.IsMonster;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.BaseSkillId != 0) {
        BaseSkillId = other.BaseSkillId;
      }
      if (other.UltimateSkillId != 0) {
        UltimateSkillId = other.UltimateSkillId;
      }
      if (other.PassiveSkillId != 0) {
        PassiveSkillId = other.PassiveSkillId;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.MaxHp != 0) {
        MaxHp = other.MaxHp;
      }
      if (other.Rage != 0) {
        Rage = other.Rage;
      }
      if (other.MaxRage != 0) {
        MaxRage = other.MaxRage;
      }
      if (other.fashion_ != null) {
        if (fashion_ == null) {
          fashion_ = new global::Stardom.FashionSchemeInfo();
        }
        Fashion.MergeFrom(other.Fashion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Wid = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Camp = input.ReadInt32();
            break;
          }
          case 32: {
            IsMonster = input.ReadInt32();
            break;
          }
          case 40: {
            Pos = input.ReadInt32();
            break;
          }
          case 48: {
            CardId = input.ReadInt32();
            break;
          }
          case 56: {
            Level = input.ReadInt32();
            break;
          }
          case 64: {
            BaseSkillId = input.ReadInt32();
            break;
          }
          case 72: {
            UltimateSkillId = input.ReadInt32();
            break;
          }
          case 80: {
            PassiveSkillId = input.ReadInt32();
            break;
          }
          case 88: {
            Hp = input.ReadInt32();
            break;
          }
          case 96: {
            MaxHp = input.ReadInt32();
            break;
          }
          case 104: {
            Rage = input.ReadInt32();
            break;
          }
          case 112: {
            MaxRage = input.ReadInt32();
            break;
          }
          case 122: {
            if (fashion_ == null) {
              fashion_ = new global::Stardom.FashionSchemeInfo();
            }
            input.ReadMessage(fashion_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 阵营信息
  /// </summary>
  public sealed partial class WarCampInfo : pb::IMessage<WarCampInfo> {
    private static readonly pb::MessageParser<WarCampInfo> _parser = new pb::MessageParser<WarCampInfo>(() => new WarCampInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WarCampInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarCampInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarCampInfo(WarCampInfo other) : this() {
      camp_ = other.camp_;
      stars_ = other.stars_;
      qte_ = other.qte_;
      activeStatus_ = other.activeStatus_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarCampInfo Clone() {
      return new WarCampInfo(this);
    }

    /// <summary>Field number for the "camp" field.</summary>
    public const int CampFieldNumber = 1;
    private int camp_;
    /// <summary>
    /// 阵营 1蓝2红
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Camp {
      get { return camp_; }
      set {
        camp_ = value;
      }
    }

    /// <summary>Field number for the "stars" field.</summary>
    public const int StarsFieldNumber = 2;
    private int stars_;
    /// <summary>
    /// 应援值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stars {
      get { return stars_; }
      set {
        stars_ = value;
      }
    }

    /// <summary>Field number for the "qte" field.</summary>
    public const int QteFieldNumber = 3;
    private int qte_;
    /// <summary>
    /// qte
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Qte {
      get { return qte_; }
      set {
        qte_ = value;
      }
    }

    /// <summary>Field number for the "active_status" field.</summary>
    public const int ActiveStatusFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Stardom.ActiveSkillStatus> _repeated_activeStatus_codec
        = pb::FieldCodec.ForMessage(34, global::Stardom.ActiveSkillStatus.Parser);
    private readonly pbc::RepeatedField<global::Stardom.ActiveSkillStatus> activeStatus_ = new pbc::RepeatedField<global::Stardom.ActiveSkillStatus>();
    /// <summary>
    /// 主动技能信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.ActiveSkillStatus> ActiveStatus {
      get { return activeStatus_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WarCampInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WarCampInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Camp != other.Camp) return false;
      if (Stars != other.Stars) return false;
      if (Qte != other.Qte) return false;
      if(!activeStatus_.Equals(other.activeStatus_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Camp != 0) hash ^= Camp.GetHashCode();
      if (Stars != 0) hash ^= Stars.GetHashCode();
      if (Qte != 0) hash ^= Qte.GetHashCode();
      hash ^= activeStatus_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Camp != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Camp);
      }
      if (Stars != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Stars);
      }
      if (Qte != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Qte);
      }
      activeStatus_.WriteTo(output, _repeated_activeStatus_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Camp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Camp);
      }
      if (Stars != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stars);
      }
      if (Qte != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Qte);
      }
      size += activeStatus_.CalculateSize(_repeated_activeStatus_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WarCampInfo other) {
      if (other == null) {
        return;
      }
      if (other.Camp != 0) {
        Camp = other.Camp;
      }
      if (other.Stars != 0) {
        Stars = other.Stars;
      }
      if (other.Qte != 0) {
        Qte = other.Qte;
      }
      activeStatus_.Add(other.activeStatus_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Camp = input.ReadInt32();
            break;
          }
          case 16: {
            Stars = input.ReadInt32();
            break;
          }
          case 24: {
            Qte = input.ReadInt32();
            break;
          }
          case 34: {
            activeStatus_.AddEntriesFrom(input, _repeated_activeStatus_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战斗基础信息, 用于战斗初始化（单场战斗加载由该协议开始）
  /// </summary>
  public sealed partial class WarBaseInfo : pb::IMessage<WarBaseInfo> {
    private static readonly pb::MessageParser<WarBaseInfo> _parser = new pb::MessageParser<WarBaseInfo>(() => new WarBaseInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WarBaseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarBaseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarBaseInfo(WarBaseInfo other) : this() {
      warUuid_ = other.warUuid_;
      fighters_ = other.fighters_.Clone();
      campInfo_ = other.campInfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarBaseInfo Clone() {
      return new WarBaseInfo(this);
    }

    /// <summary>Field number for the "war_uuid" field.</summary>
    public const int WarUuidFieldNumber = 1;
    private ulong warUuid_;
    /// <summary>
    /// 战斗id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong WarUuid {
      get { return warUuid_; }
      set {
        warUuid_ = value;
      }
    }

    /// <summary>Field number for the "fighters" field.</summary>
    public const int FightersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Stardom.WarFighterInfo> _repeated_fighters_codec
        = pb::FieldCodec.ForMessage(26, global::Stardom.WarFighterInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.WarFighterInfo> fighters_ = new pbc::RepeatedField<global::Stardom.WarFighterInfo>();
    /// <summary>
    /// 战斗角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.WarFighterInfo> Fighters {
      get { return fighters_; }
    }

    /// <summary>Field number for the "camp_info" field.</summary>
    public const int CampInfoFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Stardom.WarCampInfo> _repeated_campInfo_codec
        = pb::FieldCodec.ForMessage(34, global::Stardom.WarCampInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.WarCampInfo> campInfo_ = new pbc::RepeatedField<global::Stardom.WarCampInfo>();
    /// <summary>
    /// 主动技能/应援值等单边信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.WarCampInfo> CampInfo {
      get { return campInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WarBaseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WarBaseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WarUuid != other.WarUuid) return false;
      if(!fighters_.Equals(other.fighters_)) return false;
      if(!campInfo_.Equals(other.campInfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WarUuid != 0UL) hash ^= WarUuid.GetHashCode();
      hash ^= fighters_.GetHashCode();
      hash ^= campInfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WarUuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(WarUuid);
      }
      fighters_.WriteTo(output, _repeated_fighters_codec);
      campInfo_.WriteTo(output, _repeated_campInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WarUuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WarUuid);
      }
      size += fighters_.CalculateSize(_repeated_fighters_codec);
      size += campInfo_.CalculateSize(_repeated_campInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WarBaseInfo other) {
      if (other == null) {
        return;
      }
      if (other.WarUuid != 0UL) {
        WarUuid = other.WarUuid;
      }
      fighters_.Add(other.fighters_);
      campInfo_.Add(other.campInfo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            WarUuid = input.ReadUInt64();
            break;
          }
          case 26: {
            fighters_.AddEntriesFrom(input, _repeated_fighters_codec);
            break;
          }
          case 34: {
            campInfo_.AddEntriesFrom(input, _repeated_campInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战斗信息
  /// </summary>
  public sealed partial class WarInfo : pb::IMessage<WarInfo> {
    private static readonly pb::MessageParser<WarInfo> _parser = new pb::MessageParser<WarInfo>(() => new WarInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WarInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarInfo(WarInfo other) : this() {
      blueUuid_ = other.blueUuid_;
      redUuid_ = other.redUuid_;
      isManual_ = other.isManual_;
      BaseInfo = other.baseInfo_ != null ? other.BaseInfo.Clone() : null;
      orders_ = other.orders_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarInfo Clone() {
      return new WarInfo(this);
    }

    /// <summary>Field number for the "blue_uuid" field.</summary>
    public const int BlueUuidFieldNumber = 1;
    private ulong blueUuid_;
    /// <summary>
    /// 蓝方
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BlueUuid {
      get { return blueUuid_; }
      set {
        blueUuid_ = value;
      }
    }

    /// <summary>Field number for the "red_uuid" field.</summary>
    public const int RedUuidFieldNumber = 2;
    private ulong redUuid_;
    /// <summary>
    /// 红方
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RedUuid {
      get { return redUuid_; }
      set {
        redUuid_ = value;
      }
    }

    /// <summary>Field number for the "is_manual" field.</summary>
    public const int IsManualFieldNumber = 3;
    private int isManual_;
    /// <summary>
    /// 是否手动操作(0只播放，1前端可控制节奏)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsManual {
      get { return isManual_; }
      set {
        isManual_ = value;
      }
    }

    /// <summary>Field number for the "base_info" field.</summary>
    public const int BaseInfoFieldNumber = 4;
    private global::Stardom.WarBaseInfo baseInfo_;
    /// <summary>
    /// 基础信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.WarBaseInfo BaseInfo {
      get { return baseInfo_; }
      set {
        baseInfo_ = value;
      }
    }

    /// <summary>Field number for the "orders" field.</summary>
    public const int OrdersFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Stardom.OrderInfo> _repeated_orders_codec
        = pb::FieldCodec.ForMessage(42, global::Stardom.OrderInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.OrderInfo> orders_ = new pbc::RepeatedField<global::Stardom.OrderInfo>();
    /// <summary>
    /// 战斗指令集
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.OrderInfo> Orders {
      get { return orders_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WarInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WarInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlueUuid != other.BlueUuid) return false;
      if (RedUuid != other.RedUuid) return false;
      if (IsManual != other.IsManual) return false;
      if (!object.Equals(BaseInfo, other.BaseInfo)) return false;
      if(!orders_.Equals(other.orders_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlueUuid != 0UL) hash ^= BlueUuid.GetHashCode();
      if (RedUuid != 0UL) hash ^= RedUuid.GetHashCode();
      if (IsManual != 0) hash ^= IsManual.GetHashCode();
      if (baseInfo_ != null) hash ^= BaseInfo.GetHashCode();
      hash ^= orders_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlueUuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BlueUuid);
      }
      if (RedUuid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RedUuid);
      }
      if (IsManual != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IsManual);
      }
      if (baseInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BaseInfo);
      }
      orders_.WriteTo(output, _repeated_orders_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlueUuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BlueUuid);
      }
      if (RedUuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RedUuid);
      }
      if (IsManual != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsManual);
      }
      if (baseInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseInfo);
      }
      size += orders_.CalculateSize(_repeated_orders_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WarInfo other) {
      if (other == null) {
        return;
      }
      if (other.BlueUuid != 0UL) {
        BlueUuid = other.BlueUuid;
      }
      if (other.RedUuid != 0UL) {
        RedUuid = other.RedUuid;
      }
      if (other.IsManual != 0) {
        IsManual = other.IsManual;
      }
      if (other.baseInfo_ != null) {
        if (baseInfo_ == null) {
          baseInfo_ = new global::Stardom.WarBaseInfo();
        }
        BaseInfo.MergeFrom(other.BaseInfo);
      }
      orders_.Add(other.orders_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BlueUuid = input.ReadUInt64();
            break;
          }
          case 16: {
            RedUuid = input.ReadUInt64();
            break;
          }
          case 24: {
            IsManual = input.ReadInt32();
            break;
          }
          case 34: {
            if (baseInfo_ == null) {
              baseInfo_ = new global::Stardom.WarBaseInfo();
            }
            input.ReadMessage(baseInfo_);
            break;
          }
          case 42: {
            orders_.AddEntriesFrom(input, _repeated_orders_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战斗指令
  /// </summary>
  public sealed partial class OrderInfo : pb::IMessage<OrderInfo> {
    private static readonly pb::MessageParser<OrderInfo> _parser = new pb::MessageParser<OrderInfo>(() => new OrderInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderInfo(OrderInfo other) : this() {
      orderType_ = other.orderType_;
      BattleBegin = other.battleBegin_ != null ? other.BattleBegin.Clone() : null;
      RoundBegin = other.roundBegin_ != null ? other.RoundBegin.Clone() : null;
      SkillAction = other.skillAction_ != null ? other.SkillAction.Clone() : null;
      ActiveAction = other.activeAction_ != null ? other.ActiveAction.Clone() : null;
      RoundEnd = other.roundEnd_ != null ? other.RoundEnd.Clone() : null;
      BattleEnd = other.battleEnd_ != null ? other.BattleEnd.Clone() : null;
      shows_ = other.shows_.Clone();
      status_ = other.status_.Clone();
      campInfo_ = other.campInfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderInfo Clone() {
      return new OrderInfo(this);
    }

    /// <summary>Field number for the "order_type" field.</summary>
    public const int OrderTypeFieldNumber = 1;
    private int orderType_;
    /// <summary>
    /// 指令类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderType {
      get { return orderType_; }
      set {
        orderType_ = value;
      }
    }

    /// <summary>Field number for the "battle_begin" field.</summary>
    public const int BattleBeginFieldNumber = 2;
    private global::Stardom.WarBattleBegin battleBegin_;
    /// <summary>
    /// 战斗开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.WarBattleBegin BattleBegin {
      get { return battleBegin_; }
      set {
        battleBegin_ = value;
      }
    }

    /// <summary>Field number for the "round_begin" field.</summary>
    public const int RoundBeginFieldNumber = 3;
    private global::Stardom.WarRoundBegin roundBegin_;
    /// <summary>
    /// 回合开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.WarRoundBegin RoundBegin {
      get { return roundBegin_; }
      set {
        roundBegin_ = value;
      }
    }

    /// <summary>Field number for the "skill_action" field.</summary>
    public const int SkillActionFieldNumber = 4;
    private global::Stardom.WarSkillAction skillAction_;
    /// <summary>
    /// 释放技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.WarSkillAction SkillAction {
      get { return skillAction_; }
      set {
        skillAction_ = value;
      }
    }

    /// <summary>Field number for the "active_action" field.</summary>
    public const int ActiveActionFieldNumber = 5;
    private global::Stardom.WarActiveAction activeAction_;
    /// <summary>
    /// 主动技能信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.WarActiveAction ActiveAction {
      get { return activeAction_; }
      set {
        activeAction_ = value;
      }
    }

    /// <summary>Field number for the "round_end" field.</summary>
    public const int RoundEndFieldNumber = 6;
    private global::Stardom.WarRoundEnd roundEnd_;
    /// <summary>
    /// 回合结束
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.WarRoundEnd RoundEnd {
      get { return roundEnd_; }
      set {
        roundEnd_ = value;
      }
    }

    /// <summary>Field number for the "battle_end" field.</summary>
    public const int BattleEndFieldNumber = 7;
    private global::Stardom.WarBattleEnd battleEnd_;
    /// <summary>
    /// 战斗结束
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.WarBattleEnd BattleEnd {
      get { return battleEnd_; }
      set {
        battleEnd_ = value;
      }
    }

    /// <summary>Field number for the "shows" field.</summary>
    public const int ShowsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Stardom.WarDamageShow> _repeated_shows_codec
        = pb::FieldCodec.ForMessage(66, global::Stardom.WarDamageShow.Parser);
    private readonly pbc::RepeatedField<global::Stardom.WarDamageShow> shows_ = new pbc::RepeatedField<global::Stardom.WarDamageShow>();
    /// <summary>
    /// 伤害展示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.WarDamageShow> Shows {
      get { return shows_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Stardom.WarFighterStatus> _repeated_status_codec
        = pb::FieldCodec.ForMessage(74, global::Stardom.WarFighterStatus.Parser);
    private readonly pbc::RepeatedField<global::Stardom.WarFighterStatus> status_ = new pbc::RepeatedField<global::Stardom.WarFighterStatus>();
    /// <summary>
    /// 角色状态更新
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.WarFighterStatus> Status {
      get { return status_; }
    }

    /// <summary>Field number for the "camp_info" field.</summary>
    public const int CampInfoFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Stardom.WarCampInfo> _repeated_campInfo_codec
        = pb::FieldCodec.ForMessage(82, global::Stardom.WarCampInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.WarCampInfo> campInfo_ = new pbc::RepeatedField<global::Stardom.WarCampInfo>();
    /// <summary>
    /// 更新双方阵营信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.WarCampInfo> CampInfo {
      get { return campInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderType != other.OrderType) return false;
      if (!object.Equals(BattleBegin, other.BattleBegin)) return false;
      if (!object.Equals(RoundBegin, other.RoundBegin)) return false;
      if (!object.Equals(SkillAction, other.SkillAction)) return false;
      if (!object.Equals(ActiveAction, other.ActiveAction)) return false;
      if (!object.Equals(RoundEnd, other.RoundEnd)) return false;
      if (!object.Equals(BattleEnd, other.BattleEnd)) return false;
      if(!shows_.Equals(other.shows_)) return false;
      if(!status_.Equals(other.status_)) return false;
      if(!campInfo_.Equals(other.campInfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OrderType != 0) hash ^= OrderType.GetHashCode();
      if (battleBegin_ != null) hash ^= BattleBegin.GetHashCode();
      if (roundBegin_ != null) hash ^= RoundBegin.GetHashCode();
      if (skillAction_ != null) hash ^= SkillAction.GetHashCode();
      if (activeAction_ != null) hash ^= ActiveAction.GetHashCode();
      if (roundEnd_ != null) hash ^= RoundEnd.GetHashCode();
      if (battleEnd_ != null) hash ^= BattleEnd.GetHashCode();
      hash ^= shows_.GetHashCode();
      hash ^= status_.GetHashCode();
      hash ^= campInfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OrderType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OrderType);
      }
      if (battleBegin_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BattleBegin);
      }
      if (roundBegin_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RoundBegin);
      }
      if (skillAction_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SkillAction);
      }
      if (activeAction_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ActiveAction);
      }
      if (roundEnd_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(RoundEnd);
      }
      if (battleEnd_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BattleEnd);
      }
      shows_.WriteTo(output, _repeated_shows_codec);
      status_.WriteTo(output, _repeated_status_codec);
      campInfo_.WriteTo(output, _repeated_campInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OrderType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderType);
      }
      if (battleBegin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattleBegin);
      }
      if (roundBegin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoundBegin);
      }
      if (skillAction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SkillAction);
      }
      if (activeAction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActiveAction);
      }
      if (roundEnd_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoundEnd);
      }
      if (battleEnd_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattleEnd);
      }
      size += shows_.CalculateSize(_repeated_shows_codec);
      size += status_.CalculateSize(_repeated_status_codec);
      size += campInfo_.CalculateSize(_repeated_campInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderInfo other) {
      if (other == null) {
        return;
      }
      if (other.OrderType != 0) {
        OrderType = other.OrderType;
      }
      if (other.battleBegin_ != null) {
        if (battleBegin_ == null) {
          battleBegin_ = new global::Stardom.WarBattleBegin();
        }
        BattleBegin.MergeFrom(other.BattleBegin);
      }
      if (other.roundBegin_ != null) {
        if (roundBegin_ == null) {
          roundBegin_ = new global::Stardom.WarRoundBegin();
        }
        RoundBegin.MergeFrom(other.RoundBegin);
      }
      if (other.skillAction_ != null) {
        if (skillAction_ == null) {
          skillAction_ = new global::Stardom.WarSkillAction();
        }
        SkillAction.MergeFrom(other.SkillAction);
      }
      if (other.activeAction_ != null) {
        if (activeAction_ == null) {
          activeAction_ = new global::Stardom.WarActiveAction();
        }
        ActiveAction.MergeFrom(other.ActiveAction);
      }
      if (other.roundEnd_ != null) {
        if (roundEnd_ == null) {
          roundEnd_ = new global::Stardom.WarRoundEnd();
        }
        RoundEnd.MergeFrom(other.RoundEnd);
      }
      if (other.battleEnd_ != null) {
        if (battleEnd_ == null) {
          battleEnd_ = new global::Stardom.WarBattleEnd();
        }
        BattleEnd.MergeFrom(other.BattleEnd);
      }
      shows_.Add(other.shows_);
      status_.Add(other.status_);
      campInfo_.Add(other.campInfo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OrderType = input.ReadInt32();
            break;
          }
          case 18: {
            if (battleBegin_ == null) {
              battleBegin_ = new global::Stardom.WarBattleBegin();
            }
            input.ReadMessage(battleBegin_);
            break;
          }
          case 26: {
            if (roundBegin_ == null) {
              roundBegin_ = new global::Stardom.WarRoundBegin();
            }
            input.ReadMessage(roundBegin_);
            break;
          }
          case 34: {
            if (skillAction_ == null) {
              skillAction_ = new global::Stardom.WarSkillAction();
            }
            input.ReadMessage(skillAction_);
            break;
          }
          case 42: {
            if (activeAction_ == null) {
              activeAction_ = new global::Stardom.WarActiveAction();
            }
            input.ReadMessage(activeAction_);
            break;
          }
          case 50: {
            if (roundEnd_ == null) {
              roundEnd_ = new global::Stardom.WarRoundEnd();
            }
            input.ReadMessage(roundEnd_);
            break;
          }
          case 58: {
            if (battleEnd_ == null) {
              battleEnd_ = new global::Stardom.WarBattleEnd();
            }
            input.ReadMessage(battleEnd_);
            break;
          }
          case 66: {
            shows_.AddEntriesFrom(input, _repeated_shows_codec);
            break;
          }
          case 74: {
            status_.AddEntriesFrom(input, _repeated_status_codec);
            break;
          }
          case 82: {
            campInfo_.AddEntriesFrom(input, _repeated_campInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ActiveSkillStatus : pb::IMessage<ActiveSkillStatus> {
    private static readonly pb::MessageParser<ActiveSkillStatus> _parser = new pb::MessageParser<ActiveSkillStatus>(() => new ActiveSkillStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActiveSkillStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveSkillStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveSkillStatus(ActiveSkillStatus other) : this() {
      activeSkillId_ = other.activeSkillId_;
      activeSkillCd_ = other.activeSkillCd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveSkillStatus Clone() {
      return new ActiveSkillStatus(this);
    }

    /// <summary>Field number for the "active_skill_id" field.</summary>
    public const int ActiveSkillIdFieldNumber = 1;
    private int activeSkillId_;
    /// <summary>
    /// 主动技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveSkillId {
      get { return activeSkillId_; }
      set {
        activeSkillId_ = value;
      }
    }

    /// <summary>Field number for the "active_skill_cd" field.</summary>
    public const int ActiveSkillCdFieldNumber = 2;
    private int activeSkillCd_;
    /// <summary>
    /// 主动技能CD
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveSkillCd {
      get { return activeSkillCd_; }
      set {
        activeSkillCd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActiveSkillStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActiveSkillStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActiveSkillId != other.ActiveSkillId) return false;
      if (ActiveSkillCd != other.ActiveSkillCd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActiveSkillId != 0) hash ^= ActiveSkillId.GetHashCode();
      if (ActiveSkillCd != 0) hash ^= ActiveSkillCd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActiveSkillId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActiveSkillId);
      }
      if (ActiveSkillCd != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActiveSkillCd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActiveSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveSkillId);
      }
      if (ActiveSkillCd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveSkillCd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActiveSkillStatus other) {
      if (other == null) {
        return;
      }
      if (other.ActiveSkillId != 0) {
        ActiveSkillId = other.ActiveSkillId;
      }
      if (other.ActiveSkillCd != 0) {
        ActiveSkillCd = other.ActiveSkillCd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActiveSkillId = input.ReadInt32();
            break;
          }
          case 16: {
            ActiveSkillCd = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// OT_BATTLE_BEGIN
  /// </summary>
  public sealed partial class WarBattleBegin : pb::IMessage<WarBattleBegin> {
    private static readonly pb::MessageParser<WarBattleBegin> _parser = new pb::MessageParser<WarBattleBegin>(() => new WarBattleBegin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WarBattleBegin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[97]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarBattleBegin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarBattleBegin(WarBattleBegin other) : this() {
      battleIndex_ = other.battleIndex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarBattleBegin Clone() {
      return new WarBattleBegin(this);
    }

    /// <summary>Field number for the "battle_index" field.</summary>
    public const int BattleIndexFieldNumber = 1;
    private int battleIndex_;
    /// <summary>
    /// 战斗场数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleIndex {
      get { return battleIndex_; }
      set {
        battleIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WarBattleBegin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WarBattleBegin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattleIndex != other.BattleIndex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BattleIndex != 0) hash ^= BattleIndex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BattleIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WarBattleBegin other) {
      if (other == null) {
        return;
      }
      if (other.BattleIndex != 0) {
        BattleIndex = other.BattleIndex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// OT_BATTLE_END
  /// </summary>
  public sealed partial class WarBattleEnd : pb::IMessage<WarBattleEnd> {
    private static readonly pb::MessageParser<WarBattleEnd> _parser = new pb::MessageParser<WarBattleEnd>(() => new WarBattleEnd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WarBattleEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[98]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarBattleEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarBattleEnd(WarBattleEnd other) : this() {
      battleIndex_ = other.battleIndex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarBattleEnd Clone() {
      return new WarBattleEnd(this);
    }

    /// <summary>Field number for the "battle_index" field.</summary>
    public const int BattleIndexFieldNumber = 1;
    private int battleIndex_;
    /// <summary>
    /// 战斗场数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleIndex {
      get { return battleIndex_; }
      set {
        battleIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WarBattleEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WarBattleEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattleIndex != other.BattleIndex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BattleIndex != 0) hash ^= BattleIndex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BattleIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WarBattleEnd other) {
      if (other == null) {
        return;
      }
      if (other.BattleIndex != 0) {
        BattleIndex = other.BattleIndex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// OT_SKILL_ACTION
  /// </summary>
  public sealed partial class WarSkillAction : pb::IMessage<WarSkillAction> {
    private static readonly pb::MessageParser<WarSkillAction> _parser = new pb::MessageParser<WarSkillAction>(() => new WarSkillAction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WarSkillAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[99]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarSkillAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarSkillAction(WarSkillAction other) : this() {
      skillId_ = other.skillId_;
      actor_ = other.actor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarSkillAction Clone() {
      return new WarSkillAction(this);
    }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private int skillId_;
    /// <summary>
    /// 卡牌技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "actor" field.</summary>
    public const int ActorFieldNumber = 2;
    private int actor_;
    /// <summary>
    /// 行动wid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Actor {
      get { return actor_; }
      set {
        actor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WarSkillAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WarSkillAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkillId != other.SkillId) return false;
      if (Actor != other.Actor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SkillId != 0) hash ^= SkillId.GetHashCode();
      if (Actor != 0) hash ^= Actor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkillId);
      }
      if (Actor != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Actor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (Actor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Actor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WarSkillAction other) {
      if (other == null) {
        return;
      }
      if (other.SkillId != 0) {
        SkillId = other.SkillId;
      }
      if (other.Actor != 0) {
        Actor = other.Actor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillId = input.ReadInt32();
            break;
          }
          case 16: {
            Actor = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// OT_ACTIVE_ACTION
  /// </summary>
  public sealed partial class WarActiveAction : pb::IMessage<WarActiveAction> {
    private static readonly pb::MessageParser<WarActiveAction> _parser = new pb::MessageParser<WarActiveAction>(() => new WarActiveAction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WarActiveAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[100]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarActiveAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarActiveAction(WarActiveAction other) : this() {
      camp_ = other.camp_;
      activeSkillId_ = other.activeSkillId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarActiveAction Clone() {
      return new WarActiveAction(this);
    }

    /// <summary>Field number for the "camp" field.</summary>
    public const int CampFieldNumber = 1;
    private int camp_;
    /// <summary>
    /// 释放阵营
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Camp {
      get { return camp_; }
      set {
        camp_ = value;
      }
    }

    /// <summary>Field number for the "active_skill_id" field.</summary>
    public const int ActiveSkillIdFieldNumber = 2;
    private int activeSkillId_;
    /// <summary>
    /// 主动技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveSkillId {
      get { return activeSkillId_; }
      set {
        activeSkillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WarActiveAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WarActiveAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Camp != other.Camp) return false;
      if (ActiveSkillId != other.ActiveSkillId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Camp != 0) hash ^= Camp.GetHashCode();
      if (ActiveSkillId != 0) hash ^= ActiveSkillId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Camp != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Camp);
      }
      if (ActiveSkillId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActiveSkillId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Camp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Camp);
      }
      if (ActiveSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveSkillId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WarActiveAction other) {
      if (other == null) {
        return;
      }
      if (other.Camp != 0) {
        Camp = other.Camp;
      }
      if (other.ActiveSkillId != 0) {
        ActiveSkillId = other.ActiveSkillId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Camp = input.ReadInt32();
            break;
          }
          case 16: {
            ActiveSkillId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// OT_ROUND_BEGIN
  /// </summary>
  public sealed partial class WarRoundBegin : pb::IMessage<WarRoundBegin> {
    private static readonly pb::MessageParser<WarRoundBegin> _parser = new pb::MessageParser<WarRoundBegin>(() => new WarRoundBegin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WarRoundBegin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[101]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarRoundBegin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarRoundBegin(WarRoundBegin other) : this() {
      roundIndex_ = other.roundIndex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarRoundBegin Clone() {
      return new WarRoundBegin(this);
    }

    /// <summary>Field number for the "round_index" field.</summary>
    public const int RoundIndexFieldNumber = 1;
    private int roundIndex_;
    /// <summary>
    /// 回合数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundIndex {
      get { return roundIndex_; }
      set {
        roundIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WarRoundBegin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WarRoundBegin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoundIndex != other.RoundIndex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoundIndex != 0) hash ^= RoundIndex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoundIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoundIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoundIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WarRoundBegin other) {
      if (other == null) {
        return;
      }
      if (other.RoundIndex != 0) {
        RoundIndex = other.RoundIndex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoundIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// OT_ROUND_END
  /// </summary>
  public sealed partial class WarRoundEnd : pb::IMessage<WarRoundEnd> {
    private static readonly pb::MessageParser<WarRoundEnd> _parser = new pb::MessageParser<WarRoundEnd>(() => new WarRoundEnd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WarRoundEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[102]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarRoundEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarRoundEnd(WarRoundEnd other) : this() {
      roundIndex_ = other.roundIndex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarRoundEnd Clone() {
      return new WarRoundEnd(this);
    }

    /// <summary>Field number for the "round_index" field.</summary>
    public const int RoundIndexFieldNumber = 1;
    private int roundIndex_;
    /// <summary>
    /// 回合数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundIndex {
      get { return roundIndex_; }
      set {
        roundIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WarRoundEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WarRoundEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoundIndex != other.RoundIndex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoundIndex != 0) hash ^= RoundIndex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoundIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoundIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoundIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WarRoundEnd other) {
      if (other == null) {
        return;
      }
      if (other.RoundIndex != 0) {
        RoundIndex = other.RoundIndex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoundIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 角色新状态
  /// </summary>
  public sealed partial class WarFighterStatus : pb::IMessage<WarFighterStatus> {
    private static readonly pb::MessageParser<WarFighterStatus> _parser = new pb::MessageParser<WarFighterStatus>(() => new WarFighterStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WarFighterStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[103]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarFighterStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarFighterStatus(WarFighterStatus other) : this() {
      who_ = other.who_;
      hp_ = other.hp_;
      rage_ = other.rage_;
      buffList_ = other.buffList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarFighterStatus Clone() {
      return new WarFighterStatus(this);
    }

    /// <summary>Field number for the "who" field.</summary>
    public const int WhoFieldNumber = 1;
    private int who_;
    /// <summary>
    /// 谁
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Who {
      get { return who_; }
      set {
        who_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 2;
    private int hp_;
    /// <summary>
    /// 当前hp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "rage" field.</summary>
    public const int RageFieldNumber = 3;
    private int rage_;
    /// <summary>
    /// 角色怒气
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rage {
      get { return rage_; }
      set {
        rage_ = value;
      }
    }

    /// <summary>Field number for the "buff_list" field.</summary>
    public const int BuffListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Stardom.WarBuffStatus> _repeated_buffList_codec
        = pb::FieldCodec.ForMessage(34, global::Stardom.WarBuffStatus.Parser);
    private readonly pbc::RepeatedField<global::Stardom.WarBuffStatus> buffList_ = new pbc::RepeatedField<global::Stardom.WarBuffStatus>();
    /// <summary>
    /// 当前拥有的buff列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.WarBuffStatus> BuffList {
      get { return buffList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WarFighterStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WarFighterStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Who != other.Who) return false;
      if (Hp != other.Hp) return false;
      if (Rage != other.Rage) return false;
      if(!buffList_.Equals(other.buffList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Who != 0) hash ^= Who.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (Rage != 0) hash ^= Rage.GetHashCode();
      hash ^= buffList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Who != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Who);
      }
      if (Hp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Hp);
      }
      if (Rage != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Rage);
      }
      buffList_.WriteTo(output, _repeated_buffList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Who != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Who);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (Rage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rage);
      }
      size += buffList_.CalculateSize(_repeated_buffList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WarFighterStatus other) {
      if (other == null) {
        return;
      }
      if (other.Who != 0) {
        Who = other.Who;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.Rage != 0) {
        Rage = other.Rage;
      }
      buffList_.Add(other.buffList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Who = input.ReadInt32();
            break;
          }
          case 16: {
            Hp = input.ReadInt32();
            break;
          }
          case 24: {
            Rage = input.ReadInt32();
            break;
          }
          case 34: {
            buffList_.AddEntriesFrom(input, _repeated_buffList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// buff信息
  /// </summary>
  public sealed partial class WarBuffStatus : pb::IMessage<WarBuffStatus> {
    private static readonly pb::MessageParser<WarBuffStatus> _parser = new pb::MessageParser<WarBuffStatus>(() => new WarBuffStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WarBuffStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[104]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarBuffStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarBuffStatus(WarBuffStatus other) : this() {
      buffId_ = other.buffId_;
      round_ = other.round_;
      layers_ = other.layers_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarBuffStatus Clone() {
      return new WarBuffStatus(this);
    }

    /// <summary>Field number for the "buff_id" field.</summary>
    public const int BuffIdFieldNumber = 1;
    private int buffId_;
    /// <summary>
    /// buffid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuffId {
      get { return buffId_; }
      set {
        buffId_ = value;
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 2;
    private int round_;
    /// <summary>
    /// 剩余回合数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "layers" field.</summary>
    public const int LayersFieldNumber = 3;
    private int layers_;
    /// <summary>
    /// 层数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Layers {
      get { return layers_; }
      set {
        layers_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WarBuffStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WarBuffStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BuffId != other.BuffId) return false;
      if (Round != other.Round) return false;
      if (Layers != other.Layers) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BuffId != 0) hash ^= BuffId.GetHashCode();
      if (Round != 0) hash ^= Round.GetHashCode();
      if (Layers != 0) hash ^= Layers.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BuffId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BuffId);
      }
      if (Round != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Round);
      }
      if (Layers != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Layers);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BuffId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffId);
      }
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
      }
      if (Layers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Layers);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WarBuffStatus other) {
      if (other == null) {
        return;
      }
      if (other.BuffId != 0) {
        BuffId = other.BuffId;
      }
      if (other.Round != 0) {
        Round = other.Round;
      }
      if (other.Layers != 0) {
        Layers = other.Layers;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BuffId = input.ReadInt32();
            break;
          }
          case 16: {
            Round = input.ReadInt32();
            break;
          }
          case 24: {
            Layers = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 伤害展示
  /// </summary>
  public sealed partial class WarDamageShow : pb::IMessage<WarDamageShow> {
    private static readonly pb::MessageParser<WarDamageShow> _parser = new pb::MessageParser<WarDamageShow>(() => new WarDamageShow());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WarDamageShow> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[105]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarDamageShow() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarDamageShow(WarDamageShow other) : this() {
      source_ = other.source_;
      id_ = other.id_;
      attacker_ = other.attacker_;
      target_ = other.target_;
      showType_ = other.showType_;
      val_ = other.val_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarDamageShow Clone() {
      return new WarDamageShow(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private int source_;
    /// <summary>
    /// 来源（buff，被动，主动可填充可不填充，暂不填充）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    /// <summary>
    /// id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "attacker" field.</summary>
    public const int AttackerFieldNumber = 3;
    private int attacker_;
    /// <summary>
    /// 攻击者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Attacker {
      get { return attacker_; }
      set {
        attacker_ = value;
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 4;
    private int target_;
    /// <summary>
    /// 受击者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    /// <summary>Field number for the "show_type" field.</summary>
    public const int ShowTypeFieldNumber = 5;
    private int showType_;
    /// <summary>
    /// 展示类型（命中，暴击，闪避，免疫，治疗，无敌）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShowType {
      get { return showType_; }
      set {
        showType_ = value;
      }
    }

    /// <summary>Field number for the "val" field.</summary>
    public const int ValFieldNumber = 6;
    private int val_;
    /// <summary>
    /// 数值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Val {
      get { return val_; }
      set {
        val_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WarDamageShow);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WarDamageShow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Source != other.Source) return false;
      if (Id != other.Id) return false;
      if (Attacker != other.Attacker) return false;
      if (Target != other.Target) return false;
      if (ShowType != other.ShowType) return false;
      if (Val != other.Val) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Source != 0) hash ^= Source.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Attacker != 0) hash ^= Attacker.GetHashCode();
      if (Target != 0) hash ^= Target.GetHashCode();
      if (ShowType != 0) hash ^= ShowType.GetHashCode();
      if (Val != 0) hash ^= Val.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Source != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Source);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (Attacker != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Attacker);
      }
      if (Target != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Target);
      }
      if (ShowType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ShowType);
      }
      if (Val != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Val);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Source != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Source);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Attacker != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attacker);
      }
      if (Target != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Target);
      }
      if (ShowType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShowType);
      }
      if (Val != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Val);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WarDamageShow other) {
      if (other == null) {
        return;
      }
      if (other.Source != 0) {
        Source = other.Source;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Attacker != 0) {
        Attacker = other.Attacker;
      }
      if (other.Target != 0) {
        Target = other.Target;
      }
      if (other.ShowType != 0) {
        ShowType = other.ShowType;
      }
      if (other.Val != 0) {
        Val = other.Val;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Source = input.ReadInt32();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 24: {
            Attacker = input.ReadInt32();
            break;
          }
          case 32: {
            Target = input.ReadInt32();
            break;
          }
          case 40: {
            ShowType = input.ReadInt32();
            break;
          }
          case 48: {
            Val = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 模拟战斗统计信息项
  /// </summary>
  public sealed partial class TestWarStatisticInfo : pb::IMessage<TestWarStatisticInfo> {
    private static readonly pb::MessageParser<TestWarStatisticInfo> _parser = new pb::MessageParser<TestWarStatisticInfo>(() => new TestWarStatisticInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestWarStatisticInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[106]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestWarStatisticInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestWarStatisticInfo(TestWarStatisticInfo other) : this() {
      simulateId_ = other.simulateId_;
      activeSkillId_ = other.activeSkillId_;
      damage_ = other.damage_;
      hurt_ = other.hurt_;
      heal_ = other.heal_;
      normalAttackTimes_ = other.normalAttackTimes_;
      ultimateSkillTimes_ = other.ultimateSkillTimes_;
      isBlueTeam_ = other.isBlueTeam_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestWarStatisticInfo Clone() {
      return new TestWarStatisticInfo(this);
    }

    /// <summary>Field number for the "simulate_id" field.</summary>
    public const int SimulateIdFieldNumber = 1;
    private int simulateId_;
    /// <summary>
    /// 模拟id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SimulateId {
      get { return simulateId_; }
      set {
        simulateId_ = value;
      }
    }

    /// <summary>Field number for the "active_skill_id" field.</summary>
    public const int ActiveSkillIdFieldNumber = 2;
    private int activeSkillId_;
    /// <summary>
    /// 应援技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveSkillId {
      get { return activeSkillId_; }
      set {
        activeSkillId_ = value;
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 3;
    private ulong damage_;
    /// <summary>
    /// 伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "hurt" field.</summary>
    public const int HurtFieldNumber = 4;
    private ulong hurt_;
    /// <summary>
    /// 所受伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Hurt {
      get { return hurt_; }
      set {
        hurt_ = value;
      }
    }

    /// <summary>Field number for the "heal" field.</summary>
    public const int HealFieldNumber = 5;
    private ulong heal_;
    /// <summary>
    /// 治疗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Heal {
      get { return heal_; }
      set {
        heal_ = value;
      }
    }

    /// <summary>Field number for the "normal_attack_times" field.</summary>
    public const int NormalAttackTimesFieldNumber = 6;
    private ulong normalAttackTimes_;
    /// <summary>
    /// 普攻次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NormalAttackTimes {
      get { return normalAttackTimes_; }
      set {
        normalAttackTimes_ = value;
      }
    }

    /// <summary>Field number for the "ultimate_skill_times" field.</summary>
    public const int UltimateSkillTimesFieldNumber = 7;
    private ulong ultimateSkillTimes_;
    /// <summary>
    /// 大招次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UltimateSkillTimes {
      get { return ultimateSkillTimes_; }
      set {
        ultimateSkillTimes_ = value;
      }
    }

    /// <summary>Field number for the "is_blue_team" field.</summary>
    public const int IsBlueTeamFieldNumber = 8;
    private int isBlueTeam_;
    /// <summary>
    /// 是否是蓝队
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsBlueTeam {
      get { return isBlueTeam_; }
      set {
        isBlueTeam_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestWarStatisticInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestWarStatisticInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SimulateId != other.SimulateId) return false;
      if (ActiveSkillId != other.ActiveSkillId) return false;
      if (Damage != other.Damage) return false;
      if (Hurt != other.Hurt) return false;
      if (Heal != other.Heal) return false;
      if (NormalAttackTimes != other.NormalAttackTimes) return false;
      if (UltimateSkillTimes != other.UltimateSkillTimes) return false;
      if (IsBlueTeam != other.IsBlueTeam) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SimulateId != 0) hash ^= SimulateId.GetHashCode();
      if (ActiveSkillId != 0) hash ^= ActiveSkillId.GetHashCode();
      if (Damage != 0UL) hash ^= Damage.GetHashCode();
      if (Hurt != 0UL) hash ^= Hurt.GetHashCode();
      if (Heal != 0UL) hash ^= Heal.GetHashCode();
      if (NormalAttackTimes != 0UL) hash ^= NormalAttackTimes.GetHashCode();
      if (UltimateSkillTimes != 0UL) hash ^= UltimateSkillTimes.GetHashCode();
      if (IsBlueTeam != 0) hash ^= IsBlueTeam.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SimulateId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SimulateId);
      }
      if (ActiveSkillId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActiveSkillId);
      }
      if (Damage != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Damage);
      }
      if (Hurt != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Hurt);
      }
      if (Heal != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Heal);
      }
      if (NormalAttackTimes != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(NormalAttackTimes);
      }
      if (UltimateSkillTimes != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(UltimateSkillTimes);
      }
      if (IsBlueTeam != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(IsBlueTeam);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SimulateId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SimulateId);
      }
      if (ActiveSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveSkillId);
      }
      if (Damage != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Damage);
      }
      if (Hurt != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Hurt);
      }
      if (Heal != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Heal);
      }
      if (NormalAttackTimes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NormalAttackTimes);
      }
      if (UltimateSkillTimes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UltimateSkillTimes);
      }
      if (IsBlueTeam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsBlueTeam);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestWarStatisticInfo other) {
      if (other == null) {
        return;
      }
      if (other.SimulateId != 0) {
        SimulateId = other.SimulateId;
      }
      if (other.ActiveSkillId != 0) {
        ActiveSkillId = other.ActiveSkillId;
      }
      if (other.Damage != 0UL) {
        Damage = other.Damage;
      }
      if (other.Hurt != 0UL) {
        Hurt = other.Hurt;
      }
      if (other.Heal != 0UL) {
        Heal = other.Heal;
      }
      if (other.NormalAttackTimes != 0UL) {
        NormalAttackTimes = other.NormalAttackTimes;
      }
      if (other.UltimateSkillTimes != 0UL) {
        UltimateSkillTimes = other.UltimateSkillTimes;
      }
      if (other.IsBlueTeam != 0) {
        IsBlueTeam = other.IsBlueTeam;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SimulateId = input.ReadInt32();
            break;
          }
          case 16: {
            ActiveSkillId = input.ReadInt32();
            break;
          }
          case 24: {
            Damage = input.ReadUInt64();
            break;
          }
          case 32: {
            Hurt = input.ReadUInt64();
            break;
          }
          case 40: {
            Heal = input.ReadUInt64();
            break;
          }
          case 48: {
            NormalAttackTimes = input.ReadUInt64();
            break;
          }
          case 56: {
            UltimateSkillTimes = input.ReadUInt64();
            break;
          }
          case 64: {
            IsBlueTeam = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 模拟战斗统计信息
  /// </summary>
  public sealed partial class TestWarInfo : pb::IMessage<TestWarInfo> {
    private static readonly pb::MessageParser<TestWarInfo> _parser = new pb::MessageParser<TestWarInfo>(() => new TestWarInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestWarInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[107]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestWarInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestWarInfo(TestWarInfo other) : this() {
      info_ = other.info_.Clone();
      blueDamage_ = other.blueDamage_;
      redDamage_ = other.redDamage_;
      blueHurt_ = other.blueHurt_;
      redHurt_ = other.redHurt_;
      blueHeal_ = other.blueHeal_;
      redHeal_ = other.redHeal_;
      isBlueWinRound_ = other.isBlueWinRound_;
      allRound_ = other.allRound_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestWarInfo Clone() {
      return new TestWarInfo(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Stardom.TestWarStatisticInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(10, global::Stardom.TestWarStatisticInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.TestWarStatisticInfo> info_ = new pbc::RepeatedField<global::Stardom.TestWarStatisticInfo>();
    /// <summary>
    /// 统计信息项
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.TestWarStatisticInfo> Info {
      get { return info_; }
    }

    /// <summary>Field number for the "blue_damage" field.</summary>
    public const int BlueDamageFieldNumber = 2;
    private ulong blueDamage_;
    /// <summary>
    /// 蓝队总伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BlueDamage {
      get { return blueDamage_; }
      set {
        blueDamage_ = value;
      }
    }

    /// <summary>Field number for the "red_damage" field.</summary>
    public const int RedDamageFieldNumber = 3;
    private ulong redDamage_;
    /// <summary>
    /// 红队总伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RedDamage {
      get { return redDamage_; }
      set {
        redDamage_ = value;
      }
    }

    /// <summary>Field number for the "blue_hurt" field.</summary>
    public const int BlueHurtFieldNumber = 4;
    private ulong blueHurt_;
    /// <summary>
    /// 蓝队总承受伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BlueHurt {
      get { return blueHurt_; }
      set {
        blueHurt_ = value;
      }
    }

    /// <summary>Field number for the "red_hurt" field.</summary>
    public const int RedHurtFieldNumber = 5;
    private ulong redHurt_;
    /// <summary>
    /// 红队总承受伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RedHurt {
      get { return redHurt_; }
      set {
        redHurt_ = value;
      }
    }

    /// <summary>Field number for the "blue_heal" field.</summary>
    public const int BlueHealFieldNumber = 6;
    private ulong blueHeal_;
    /// <summary>
    /// 蓝队总治疗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BlueHeal {
      get { return blueHeal_; }
      set {
        blueHeal_ = value;
      }
    }

    /// <summary>Field number for the "red_heal" field.</summary>
    public const int RedHealFieldNumber = 7;
    private ulong redHeal_;
    /// <summary>
    /// 红队总治疗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RedHeal {
      get { return redHeal_; }
      set {
        redHeal_ = value;
      }
    }

    /// <summary>Field number for the "is_blue_win_round" field.</summary>
    public const int IsBlueWinRoundFieldNumber = 8;
    private int isBlueWinRound_;
    /// <summary>
    /// 该场蓝队胜利
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsBlueWinRound {
      get { return isBlueWinRound_; }
      set {
        isBlueWinRound_ = value;
      }
    }

    /// <summary>Field number for the "all_round" field.</summary>
    public const int AllRoundFieldNumber = 9;
    private int allRound_;
    /// <summary>
    /// 总回合数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AllRound {
      get { return allRound_; }
      set {
        allRound_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestWarInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestWarInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!info_.Equals(other.info_)) return false;
      if (BlueDamage != other.BlueDamage) return false;
      if (RedDamage != other.RedDamage) return false;
      if (BlueHurt != other.BlueHurt) return false;
      if (RedHurt != other.RedHurt) return false;
      if (BlueHeal != other.BlueHeal) return false;
      if (RedHeal != other.RedHeal) return false;
      if (IsBlueWinRound != other.IsBlueWinRound) return false;
      if (AllRound != other.AllRound) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= info_.GetHashCode();
      if (BlueDamage != 0UL) hash ^= BlueDamage.GetHashCode();
      if (RedDamage != 0UL) hash ^= RedDamage.GetHashCode();
      if (BlueHurt != 0UL) hash ^= BlueHurt.GetHashCode();
      if (RedHurt != 0UL) hash ^= RedHurt.GetHashCode();
      if (BlueHeal != 0UL) hash ^= BlueHeal.GetHashCode();
      if (RedHeal != 0UL) hash ^= RedHeal.GetHashCode();
      if (IsBlueWinRound != 0) hash ^= IsBlueWinRound.GetHashCode();
      if (AllRound != 0) hash ^= AllRound.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      info_.WriteTo(output, _repeated_info_codec);
      if (BlueDamage != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(BlueDamage);
      }
      if (RedDamage != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RedDamage);
      }
      if (BlueHurt != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(BlueHurt);
      }
      if (RedHurt != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(RedHurt);
      }
      if (BlueHeal != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(BlueHeal);
      }
      if (RedHeal != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(RedHeal);
      }
      if (IsBlueWinRound != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(IsBlueWinRound);
      }
      if (AllRound != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(AllRound);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += info_.CalculateSize(_repeated_info_codec);
      if (BlueDamage != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BlueDamage);
      }
      if (RedDamage != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RedDamage);
      }
      if (BlueHurt != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BlueHurt);
      }
      if (RedHurt != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RedHurt);
      }
      if (BlueHeal != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BlueHeal);
      }
      if (RedHeal != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RedHeal);
      }
      if (IsBlueWinRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsBlueWinRound);
      }
      if (AllRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AllRound);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestWarInfo other) {
      if (other == null) {
        return;
      }
      info_.Add(other.info_);
      if (other.BlueDamage != 0UL) {
        BlueDamage = other.BlueDamage;
      }
      if (other.RedDamage != 0UL) {
        RedDamage = other.RedDamage;
      }
      if (other.BlueHurt != 0UL) {
        BlueHurt = other.BlueHurt;
      }
      if (other.RedHurt != 0UL) {
        RedHurt = other.RedHurt;
      }
      if (other.BlueHeal != 0UL) {
        BlueHeal = other.BlueHeal;
      }
      if (other.RedHeal != 0UL) {
        RedHeal = other.RedHeal;
      }
      if (other.IsBlueWinRound != 0) {
        IsBlueWinRound = other.IsBlueWinRound;
      }
      if (other.AllRound != 0) {
        AllRound = other.AllRound;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
          case 16: {
            BlueDamage = input.ReadUInt64();
            break;
          }
          case 24: {
            RedDamage = input.ReadUInt64();
            break;
          }
          case 32: {
            BlueHurt = input.ReadUInt64();
            break;
          }
          case 40: {
            RedHurt = input.ReadUInt64();
            break;
          }
          case 48: {
            BlueHeal = input.ReadUInt64();
            break;
          }
          case 56: {
            RedHeal = input.ReadUInt64();
            break;
          }
          case 64: {
            IsBlueWinRound = input.ReadInt32();
            break;
          }
          case 72: {
            AllRound = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 随从信息
  /// </summary>
  public sealed partial class AreaEntityRetinueInfo : pb::IMessage<AreaEntityRetinueInfo> {
    private static readonly pb::MessageParser<AreaEntityRetinueInfo> _parser = new pb::MessageParser<AreaEntityRetinueInfo>(() => new AreaEntityRetinueInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AreaEntityRetinueInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[108]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AreaEntityRetinueInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AreaEntityRetinueInfo(AreaEntityRetinueInfo other) : this() {
      retinueCardUuid_ = other.retinueCardUuid_;
      retinueSkin_ = other.retinueSkin_;
      retinueName_ = other.retinueName_;
      lastChangeTs_ = other.lastChangeTs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AreaEntityRetinueInfo Clone() {
      return new AreaEntityRetinueInfo(this);
    }

    /// <summary>Field number for the "retinue_card_uuid" field.</summary>
    public const int RetinueCardUuidFieldNumber = 1;
    private ulong retinueCardUuid_;
    /// <summary>
    /// 随从uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RetinueCardUuid {
      get { return retinueCardUuid_; }
      set {
        retinueCardUuid_ = value;
      }
    }

    /// <summary>Field number for the "retinue_skin" field.</summary>
    public const int RetinueSkinFieldNumber = 2;
    private int retinueSkin_;
    /// <summary>
    /// 随从皮肤
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RetinueSkin {
      get { return retinueSkin_; }
      set {
        retinueSkin_ = value;
      }
    }

    /// <summary>Field number for the "retinue_name" field.</summary>
    public const int RetinueNameFieldNumber = 3;
    private string retinueName_ = "";
    /// <summary>
    /// 随从名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RetinueName {
      get { return retinueName_; }
      set {
        retinueName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_change_ts" field.</summary>
    public const int LastChangeTsFieldNumber = 4;
    private ulong lastChangeTs_;
    /// <summary>
    /// 最后一次更换随从时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LastChangeTs {
      get { return lastChangeTs_; }
      set {
        lastChangeTs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AreaEntityRetinueInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AreaEntityRetinueInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RetinueCardUuid != other.RetinueCardUuid) return false;
      if (RetinueSkin != other.RetinueSkin) return false;
      if (RetinueName != other.RetinueName) return false;
      if (LastChangeTs != other.LastChangeTs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RetinueCardUuid != 0UL) hash ^= RetinueCardUuid.GetHashCode();
      if (RetinueSkin != 0) hash ^= RetinueSkin.GetHashCode();
      if (RetinueName.Length != 0) hash ^= RetinueName.GetHashCode();
      if (LastChangeTs != 0UL) hash ^= LastChangeTs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RetinueCardUuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RetinueCardUuid);
      }
      if (RetinueSkin != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RetinueSkin);
      }
      if (RetinueName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RetinueName);
      }
      if (LastChangeTs != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(LastChangeTs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RetinueCardUuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RetinueCardUuid);
      }
      if (RetinueSkin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RetinueSkin);
      }
      if (RetinueName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RetinueName);
      }
      if (LastChangeTs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LastChangeTs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AreaEntityRetinueInfo other) {
      if (other == null) {
        return;
      }
      if (other.RetinueCardUuid != 0UL) {
        RetinueCardUuid = other.RetinueCardUuid;
      }
      if (other.RetinueSkin != 0) {
        RetinueSkin = other.RetinueSkin;
      }
      if (other.RetinueName.Length != 0) {
        RetinueName = other.RetinueName;
      }
      if (other.LastChangeTs != 0UL) {
        LastChangeTs = other.LastChangeTs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RetinueCardUuid = input.ReadUInt64();
            break;
          }
          case 16: {
            RetinueSkin = input.ReadInt32();
            break;
          }
          case 26: {
            RetinueName = input.ReadString();
            break;
          }
          case 32: {
            LastChangeTs = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 随从信息
  /// </summary>
  public sealed partial class AreaEntityInfo : pb::IMessage<AreaEntityInfo> {
    private static readonly pb::MessageParser<AreaEntityInfo> _parser = new pb::MessageParser<AreaEntityInfo>(() => new AreaEntityInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AreaEntityInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[109]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AreaEntityInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AreaEntityInfo(AreaEntityInfo other) : this() {
      entityId_ = other.entityId_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      mainCardId_ = other.mainCardId_;
      name_ = other.name_;
      nickname_ = other.nickname_;
      FashionInfo = other.fashionInfo_ != null ? other.FashionInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AreaEntityInfo Clone() {
      return new AreaEntityInfo(this);
    }

    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private ulong entityId_;
    /// <summary>
    /// 角色唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "pos_x" field.</summary>
    public const int PosXFieldNumber = 2;
    private int posX_;
    /// <summary>
    /// 坐标x
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "pos_y" field.</summary>
    public const int PosYFieldNumber = 3;
    private int posY_;
    /// <summary>
    /// 坐标y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "main_card_id" field.</summary>
    public const int MainCardIdFieldNumber = 4;
    private int mainCardId_;
    /// <summary>
    /// 主角卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MainCardId {
      get { return mainCardId_; }
      set {
        mainCardId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    /// <summary>
    /// 主角名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 6;
    private string nickname_ = "";
    /// <summary>
    /// 主角昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fashion_info" field.</summary>
    public const int FashionInfoFieldNumber = 7;
    private global::Stardom.FashionSchemeInfo fashionInfo_;
    /// <summary>
    /// 时装信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.FashionSchemeInfo FashionInfo {
      get { return fashionInfo_; }
      set {
        fashionInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AreaEntityInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AreaEntityInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (PosX != other.PosX) return false;
      if (PosY != other.PosY) return false;
      if (MainCardId != other.MainCardId) return false;
      if (Name != other.Name) return false;
      if (Nickname != other.Nickname) return false;
      if (!object.Equals(FashionInfo, other.FashionInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EntityId != 0UL) hash ^= EntityId.GetHashCode();
      if (PosX != 0) hash ^= PosX.GetHashCode();
      if (PosY != 0) hash ^= PosY.GetHashCode();
      if (MainCardId != 0) hash ^= MainCardId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (fashionInfo_ != null) hash ^= FashionInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(EntityId);
      }
      if (PosX != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PosX);
      }
      if (PosY != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PosY);
      }
      if (MainCardId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MainCardId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Nickname);
      }
      if (fashionInfo_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(FashionInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EntityId);
      }
      if (PosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosX);
      }
      if (PosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosY);
      }
      if (MainCardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MainCardId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (fashionInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FashionInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AreaEntityInfo other) {
      if (other == null) {
        return;
      }
      if (other.EntityId != 0UL) {
        EntityId = other.EntityId;
      }
      if (other.PosX != 0) {
        PosX = other.PosX;
      }
      if (other.PosY != 0) {
        PosY = other.PosY;
      }
      if (other.MainCardId != 0) {
        MainCardId = other.MainCardId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.fashionInfo_ != null) {
        if (fashionInfo_ == null) {
          fashionInfo_ = new global::Stardom.FashionSchemeInfo();
        }
        FashionInfo.MergeFrom(other.FashionInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EntityId = input.ReadUInt64();
            break;
          }
          case 16: {
            PosX = input.ReadInt32();
            break;
          }
          case 24: {
            PosY = input.ReadInt32();
            break;
          }
          case 32: {
            MainCardId = input.ReadInt32();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 50: {
            Nickname = input.ReadString();
            break;
          }
          case 58: {
            if (fashionInfo_ == null) {
              fashionInfo_ = new global::Stardom.FashionSchemeInfo();
            }
            input.ReadMessage(fashionInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 公共显示参数
  /// </summary>
  public sealed partial class KeyParam : pb::IMessage<KeyParam> {
    private static readonly pb::MessageParser<KeyParam> _parser = new pb::MessageParser<KeyParam>(() => new KeyParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[110]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyParam(KeyParam other) : this() {
      key_ = other.key_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyParam Clone() {
      return new KeyParam(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    /// <summary>
    /// 键
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    /// <summary>
    /// 值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyParam other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 公共显示数值键值对
  /// </summary>
  public sealed partial class KeyParamInt : pb::IMessage<KeyParamInt> {
    private static readonly pb::MessageParser<KeyParamInt> _parser = new pb::MessageParser<KeyParamInt>(() => new KeyParamInt());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyParamInt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[111]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyParamInt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyParamInt(KeyParamInt other) : this() {
      key_ = other.key_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyParamInt Clone() {
      return new KeyParamInt(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private int key_;
    /// <summary>
    /// 键
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    /// <summary>
    /// 值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyParamInt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyParamInt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0) hash ^= Key.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Key);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyParamInt other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Key = input.ReadInt32();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 邮件内容
  /// </summary>
  public sealed partial class MailInfo : pb::IMessage<MailInfo> {
    private static readonly pb::MessageParser<MailInfo> _parser = new pb::MessageParser<MailInfo>(() => new MailInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MailInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[112]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailInfo(MailInfo other) : this() {
      mailId_ = other.mailId_;
      type_ = other.type_;
      templateId_ = other.templateId_;
      sender_ = other.sender_;
      title_ = other.title_;
      content_ = other.content_;
      isRead_ = other.isRead_;
      isRecv_ = other.isRecv_;
      expiration_ = other.expiration_;
      createTime_ = other.createTime_;
      itemList_ = other.itemList_.Clone();
      mailParams_ = other.mailParams_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailInfo Clone() {
      return new MailInfo(this);
    }

    /// <summary>Field number for the "mail_id" field.</summary>
    public const int MailIdFieldNumber = 1;
    private ulong mailId_;
    /// <summary>
    /// 邮件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MailId {
      get { return mailId_; }
      set {
        mailId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    /// 邮件类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "template_id" field.</summary>
    public const int TemplateIdFieldNumber = 3;
    private int templateId_;
    /// <summary>
    /// 模板id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TemplateId {
      get { return templateId_; }
      set {
        templateId_ = value;
      }
    }

    /// <summary>Field number for the "sender" field.</summary>
    public const int SenderFieldNumber = 5;
    private string sender_ = "";
    /// <summary>
    /// 发送者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sender {
      get { return sender_; }
      set {
        sender_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 4;
    private string title_ = "";
    /// <summary>
    /// 标题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 6;
    private string content_ = "";
    /// <summary>
    /// 内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_read" field.</summary>
    public const int IsReadFieldNumber = 7;
    private int isRead_;
    /// <summary>
    /// 是否已读
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsRead {
      get { return isRead_; }
      set {
        isRead_ = value;
      }
    }

    /// <summary>Field number for the "is_recv" field.</summary>
    public const int IsRecvFieldNumber = 8;
    private int isRecv_;
    /// <summary>
    /// 是否已接受
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsRecv {
      get { return isRecv_; }
      set {
        isRecv_ = value;
      }
    }

    /// <summary>Field number for the "expiration" field.</summary>
    public const int ExpirationFieldNumber = 9;
    private ulong expiration_;
    /// <summary>
    /// 过期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Expiration {
      get { return expiration_; }
      set {
        expiration_ = value;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 10;
    private ulong createTime_;
    /// <summary>
    /// 创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "item_list" field.</summary>
    public const int ItemListFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Stardom.ItemBaseInfo> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(90, global::Stardom.ItemBaseInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.ItemBaseInfo> itemList_ = new pbc::RepeatedField<global::Stardom.ItemBaseInfo>();
    /// <summary>
    /// 邮件附件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.ItemBaseInfo> ItemList {
      get { return itemList_; }
    }

    /// <summary>Field number for the "mail_params" field.</summary>
    public const int MailParamsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Stardom.KeyParam> _repeated_mailParams_codec
        = pb::FieldCodec.ForMessage(98, global::Stardom.KeyParam.Parser);
    private readonly pbc::RepeatedField<global::Stardom.KeyParam> mailParams_ = new pbc::RepeatedField<global::Stardom.KeyParam>();
    /// <summary>
    /// 邮件参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.KeyParam> MailParams {
      get { return mailParams_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MailInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MailInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MailId != other.MailId) return false;
      if (Type != other.Type) return false;
      if (TemplateId != other.TemplateId) return false;
      if (Sender != other.Sender) return false;
      if (Title != other.Title) return false;
      if (Content != other.Content) return false;
      if (IsRead != other.IsRead) return false;
      if (IsRecv != other.IsRecv) return false;
      if (Expiration != other.Expiration) return false;
      if (CreateTime != other.CreateTime) return false;
      if(!itemList_.Equals(other.itemList_)) return false;
      if(!mailParams_.Equals(other.mailParams_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MailId != 0UL) hash ^= MailId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (TemplateId != 0) hash ^= TemplateId.GetHashCode();
      if (Sender.Length != 0) hash ^= Sender.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (IsRead != 0) hash ^= IsRead.GetHashCode();
      if (IsRecv != 0) hash ^= IsRecv.GetHashCode();
      if (Expiration != 0UL) hash ^= Expiration.GetHashCode();
      if (CreateTime != 0UL) hash ^= CreateTime.GetHashCode();
      hash ^= itemList_.GetHashCode();
      hash ^= mailParams_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MailId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MailId);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (TemplateId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TemplateId);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Title);
      }
      if (Sender.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Sender);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Content);
      }
      if (IsRead != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(IsRead);
      }
      if (IsRecv != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(IsRecv);
      }
      if (Expiration != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(Expiration);
      }
      if (CreateTime != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(CreateTime);
      }
      itemList_.WriteTo(output, _repeated_itemList_codec);
      mailParams_.WriteTo(output, _repeated_mailParams_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MailId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MailId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (TemplateId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TemplateId);
      }
      if (Sender.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sender);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (IsRead != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsRead);
      }
      if (IsRecv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsRecv);
      }
      if (Expiration != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Expiration);
      }
      if (CreateTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreateTime);
      }
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      size += mailParams_.CalculateSize(_repeated_mailParams_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MailInfo other) {
      if (other == null) {
        return;
      }
      if (other.MailId != 0UL) {
        MailId = other.MailId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.TemplateId != 0) {
        TemplateId = other.TemplateId;
      }
      if (other.Sender.Length != 0) {
        Sender = other.Sender;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.IsRead != 0) {
        IsRead = other.IsRead;
      }
      if (other.IsRecv != 0) {
        IsRecv = other.IsRecv;
      }
      if (other.Expiration != 0UL) {
        Expiration = other.Expiration;
      }
      if (other.CreateTime != 0UL) {
        CreateTime = other.CreateTime;
      }
      itemList_.Add(other.itemList_);
      mailParams_.Add(other.mailParams_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MailId = input.ReadUInt64();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            TemplateId = input.ReadInt32();
            break;
          }
          case 34: {
            Title = input.ReadString();
            break;
          }
          case 42: {
            Sender = input.ReadString();
            break;
          }
          case 50: {
            Content = input.ReadString();
            break;
          }
          case 56: {
            IsRead = input.ReadInt32();
            break;
          }
          case 64: {
            IsRecv = input.ReadInt32();
            break;
          }
          case 72: {
            Expiration = input.ReadUInt64();
            break;
          }
          case 80: {
            CreateTime = input.ReadUInt64();
            break;
          }
          case 90: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
          case 98: {
            mailParams_.AddEntriesFrom(input, _repeated_mailParams_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 全局邮件 
  /// </summary>
  public sealed partial class GlobalMailInfo : pb::IMessage<GlobalMailInfo> {
    private static readonly pb::MessageParser<GlobalMailInfo> _parser = new pb::MessageParser<GlobalMailInfo>(() => new GlobalMailInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GlobalMailInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[113]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalMailInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalMailInfo(GlobalMailInfo other) : this() {
      mailId_ = other.mailId_;
      templateId_ = other.templateId_;
      sender_ = other.sender_;
      title_ = other.title_;
      content_ = other.content_;
      minLevel_ = other.minLevel_;
      maxLevel_ = other.maxLevel_;
      minPay_ = other.minPay_;
      maxPay_ = other.maxPay_;
      minRegTime_ = other.minRegTime_;
      maxRegTime_ = other.maxRegTime_;
      endTime_ = other.endTime_;
      createTime_ = other.createTime_;
      itemList_ = other.itemList_.Clone();
      mailParams_ = other.mailParams_.Clone();
      lastLogintime_ = other.lastLogintime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalMailInfo Clone() {
      return new GlobalMailInfo(this);
    }

    /// <summary>Field number for the "mail_id" field.</summary>
    public const int MailIdFieldNumber = 1;
    private ulong mailId_;
    /// <summary>
    /// 邮件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MailId {
      get { return mailId_; }
      set {
        mailId_ = value;
      }
    }

    /// <summary>Field number for the "template_id" field.</summary>
    public const int TemplateIdFieldNumber = 2;
    private int templateId_;
    /// <summary>
    /// 模板id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TemplateId {
      get { return templateId_; }
      set {
        templateId_ = value;
      }
    }

    /// <summary>Field number for the "sender" field.</summary>
    public const int SenderFieldNumber = 3;
    private string sender_ = "";
    /// <summary>
    /// 发送者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sender {
      get { return sender_; }
      set {
        sender_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 4;
    private string title_ = "";
    /// <summary>
    /// 标题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 5;
    private string content_ = "";
    /// <summary>
    /// 内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "min_level" field.</summary>
    public const int MinLevelFieldNumber = 6;
    private int minLevel_;
    /// <summary>
    /// 最小等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinLevel {
      get { return minLevel_; }
      set {
        minLevel_ = value;
      }
    }

    /// <summary>Field number for the "max_level" field.</summary>
    public const int MaxLevelFieldNumber = 7;
    private int maxLevel_;
    /// <summary>
    /// 最大等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxLevel {
      get { return maxLevel_; }
      set {
        maxLevel_ = value;
      }
    }

    /// <summary>Field number for the "min_pay" field.</summary>
    public const int MinPayFieldNumber = 8;
    private int minPay_;
    /// <summary>
    /// 最小付费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinPay {
      get { return minPay_; }
      set {
        minPay_ = value;
      }
    }

    /// <summary>Field number for the "max_pay" field.</summary>
    public const int MaxPayFieldNumber = 9;
    private int maxPay_;
    /// <summary>
    /// 最大付费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxPay {
      get { return maxPay_; }
      set {
        maxPay_ = value;
      }
    }

    /// <summary>Field number for the "min_reg_time" field.</summary>
    public const int MinRegTimeFieldNumber = 10;
    private ulong minRegTime_;
    /// <summary>
    /// 最小注册时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MinRegTime {
      get { return minRegTime_; }
      set {
        minRegTime_ = value;
      }
    }

    /// <summary>Field number for the "max_reg_time" field.</summary>
    public const int MaxRegTimeFieldNumber = 11;
    private ulong maxRegTime_;
    /// <summary>
    /// 最大注册时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MaxRegTime {
      get { return maxRegTime_; }
      set {
        maxRegTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 12;
    private ulong endTime_;
    /// <summary>
    /// 邮件有效期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 13;
    private ulong createTime_;
    /// <summary>
    /// 邮件创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "item_list" field.</summary>
    public const int ItemListFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Stardom.ItemBaseInfo> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(114, global::Stardom.ItemBaseInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.ItemBaseInfo> itemList_ = new pbc::RepeatedField<global::Stardom.ItemBaseInfo>();
    /// <summary>
    /// 邮件附件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.ItemBaseInfo> ItemList {
      get { return itemList_; }
    }

    /// <summary>Field number for the "mail_params" field.</summary>
    public const int MailParamsFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Stardom.KeyParam> _repeated_mailParams_codec
        = pb::FieldCodec.ForMessage(122, global::Stardom.KeyParam.Parser);
    private readonly pbc::RepeatedField<global::Stardom.KeyParam> mailParams_ = new pbc::RepeatedField<global::Stardom.KeyParam>();
    /// <summary>
    /// 邮件参数  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.KeyParam> MailParams {
      get { return mailParams_; }
    }

    /// <summary>Field number for the "last_logintime" field.</summary>
    public const int LastLogintimeFieldNumber = 16;
    private ulong lastLogintime_;
    /// <summary>
    /// 登录日期起点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LastLogintime {
      get { return lastLogintime_; }
      set {
        lastLogintime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GlobalMailInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GlobalMailInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MailId != other.MailId) return false;
      if (TemplateId != other.TemplateId) return false;
      if (Sender != other.Sender) return false;
      if (Title != other.Title) return false;
      if (Content != other.Content) return false;
      if (MinLevel != other.MinLevel) return false;
      if (MaxLevel != other.MaxLevel) return false;
      if (MinPay != other.MinPay) return false;
      if (MaxPay != other.MaxPay) return false;
      if (MinRegTime != other.MinRegTime) return false;
      if (MaxRegTime != other.MaxRegTime) return false;
      if (EndTime != other.EndTime) return false;
      if (CreateTime != other.CreateTime) return false;
      if(!itemList_.Equals(other.itemList_)) return false;
      if(!mailParams_.Equals(other.mailParams_)) return false;
      if (LastLogintime != other.LastLogintime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MailId != 0UL) hash ^= MailId.GetHashCode();
      if (TemplateId != 0) hash ^= TemplateId.GetHashCode();
      if (Sender.Length != 0) hash ^= Sender.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (MinLevel != 0) hash ^= MinLevel.GetHashCode();
      if (MaxLevel != 0) hash ^= MaxLevel.GetHashCode();
      if (MinPay != 0) hash ^= MinPay.GetHashCode();
      if (MaxPay != 0) hash ^= MaxPay.GetHashCode();
      if (MinRegTime != 0UL) hash ^= MinRegTime.GetHashCode();
      if (MaxRegTime != 0UL) hash ^= MaxRegTime.GetHashCode();
      if (EndTime != 0UL) hash ^= EndTime.GetHashCode();
      if (CreateTime != 0UL) hash ^= CreateTime.GetHashCode();
      hash ^= itemList_.GetHashCode();
      hash ^= mailParams_.GetHashCode();
      if (LastLogintime != 0UL) hash ^= LastLogintime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MailId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MailId);
      }
      if (TemplateId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TemplateId);
      }
      if (Sender.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Sender);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Title);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Content);
      }
      if (MinLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MinLevel);
      }
      if (MaxLevel != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MaxLevel);
      }
      if (MinPay != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MinPay);
      }
      if (MaxPay != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MaxPay);
      }
      if (MinRegTime != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(MinRegTime);
      }
      if (MaxRegTime != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(MaxRegTime);
      }
      if (EndTime != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(EndTime);
      }
      if (CreateTime != 0UL) {
        output.WriteRawTag(104);
        output.WriteUInt64(CreateTime);
      }
      itemList_.WriteTo(output, _repeated_itemList_codec);
      mailParams_.WriteTo(output, _repeated_mailParams_codec);
      if (LastLogintime != 0UL) {
        output.WriteRawTag(128, 1);
        output.WriteUInt64(LastLogintime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MailId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MailId);
      }
      if (TemplateId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TemplateId);
      }
      if (Sender.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sender);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (MinLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinLevel);
      }
      if (MaxLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxLevel);
      }
      if (MinPay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinPay);
      }
      if (MaxPay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPay);
      }
      if (MinRegTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MinRegTime);
      }
      if (MaxRegTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxRegTime);
      }
      if (EndTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndTime);
      }
      if (CreateTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreateTime);
      }
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      size += mailParams_.CalculateSize(_repeated_mailParams_codec);
      if (LastLogintime != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(LastLogintime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GlobalMailInfo other) {
      if (other == null) {
        return;
      }
      if (other.MailId != 0UL) {
        MailId = other.MailId;
      }
      if (other.TemplateId != 0) {
        TemplateId = other.TemplateId;
      }
      if (other.Sender.Length != 0) {
        Sender = other.Sender;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.MinLevel != 0) {
        MinLevel = other.MinLevel;
      }
      if (other.MaxLevel != 0) {
        MaxLevel = other.MaxLevel;
      }
      if (other.MinPay != 0) {
        MinPay = other.MinPay;
      }
      if (other.MaxPay != 0) {
        MaxPay = other.MaxPay;
      }
      if (other.MinRegTime != 0UL) {
        MinRegTime = other.MinRegTime;
      }
      if (other.MaxRegTime != 0UL) {
        MaxRegTime = other.MaxRegTime;
      }
      if (other.EndTime != 0UL) {
        EndTime = other.EndTime;
      }
      if (other.CreateTime != 0UL) {
        CreateTime = other.CreateTime;
      }
      itemList_.Add(other.itemList_);
      mailParams_.Add(other.mailParams_);
      if (other.LastLogintime != 0UL) {
        LastLogintime = other.LastLogintime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MailId = input.ReadUInt64();
            break;
          }
          case 16: {
            TemplateId = input.ReadInt32();
            break;
          }
          case 26: {
            Sender = input.ReadString();
            break;
          }
          case 34: {
            Title = input.ReadString();
            break;
          }
          case 42: {
            Content = input.ReadString();
            break;
          }
          case 48: {
            MinLevel = input.ReadInt32();
            break;
          }
          case 56: {
            MaxLevel = input.ReadInt32();
            break;
          }
          case 64: {
            MinPay = input.ReadInt32();
            break;
          }
          case 72: {
            MaxPay = input.ReadInt32();
            break;
          }
          case 80: {
            MinRegTime = input.ReadUInt64();
            break;
          }
          case 88: {
            MaxRegTime = input.ReadUInt64();
            break;
          }
          case 96: {
            EndTime = input.ReadUInt64();
            break;
          }
          case 104: {
            CreateTime = input.ReadUInt64();
            break;
          }
          case 114: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
          case 122: {
            mailParams_.AddEntriesFrom(input, _repeated_mailParams_codec);
            break;
          }
          case 128: {
            LastLogintime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 个人排行数据
  /// </summary>
  public sealed partial class PersonRankInfo : pb::IMessage<PersonRankInfo> {
    private static readonly pb::MessageParser<PersonRankInfo> _parser = new pb::MessageParser<PersonRankInfo>(() => new PersonRankInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PersonRankInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[114]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersonRankInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersonRankInfo(PersonRankInfo other) : this() {
      rank_ = other.rank_;
      playerId_ = other.playerId_;
      name_ = other.name_;
      faction_ = other.faction_;
      guildName_ = other.guildName_;
      sex_ = other.sex_;
      fightPower_ = other.fightPower_;
      level_ = other.level_;
      kawei_ = other.kawei_;
      popularity_ = other.popularity_;
      yesterdayPopularity_ = other.yesterdayPopularity_;
      fansNum_ = other.fansNum_;
      exp_ = other.exp_;
      headId_ = other.headId_;
      fansTag_ = other.fansTag_.Clone();
      fansMotto_ = other.fansMotto_;
      courseFaqRecord_ = other.courseFaqRecord_;
      fansTagStr_ = other.fansTagStr_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersonRankInfo Clone() {
      return new PersonRankInfo(this);
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 1;
    private int rank_;
    /// <summary>
    /// 排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private ulong playerId_;
    /// <summary>
    /// 角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// 名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "faction" field.</summary>
    public const int FactionFieldNumber = 4;
    private int faction_;
    /// <summary>
    /// 势力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Faction {
      get { return faction_; }
      set {
        faction_ = value;
      }
    }

    /// <summary>Field number for the "guild_name" field.</summary>
    public const int GuildNameFieldNumber = 5;
    private string guildName_ = "";
    /// <summary>
    /// 帮派名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 6;
    private int sex_;
    /// <summary>
    /// 性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "fight_power" field.</summary>
    public const int FightPowerFieldNumber = 7;
    private int fightPower_;
    /// <summary>
    /// 战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FightPower {
      get { return fightPower_; }
      set {
        fightPower_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 8;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "kawei" field.</summary>
    public const int KaweiFieldNumber = 9;
    private int kawei_;
    /// <summary>
    /// 咖位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Kawei {
      get { return kawei_; }
      set {
        kawei_ = value;
      }
    }

    /// <summary>Field number for the "popularity" field.</summary>
    public const int PopularityFieldNumber = 10;
    private int popularity_;
    /// <summary>
    /// 人气
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Popularity {
      get { return popularity_; }
      set {
        popularity_ = value;
      }
    }

    /// <summary>Field number for the "yesterday_popularity" field.</summary>
    public const int YesterdayPopularityFieldNumber = 11;
    private int yesterdayPopularity_;
    /// <summary>
    /// 昨日人气
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int YesterdayPopularity {
      get { return yesterdayPopularity_; }
      set {
        yesterdayPopularity_ = value;
      }
    }

    /// <summary>Field number for the "fans_num" field.</summary>
    public const int FansNumFieldNumber = 12;
    private int fansNum_;
    /// <summary>
    /// 粉丝数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FansNum {
      get { return fansNum_; }
      set {
        fansNum_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 13;
    private int exp_;
    /// <summary>
    /// 经验值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "head_id" field.</summary>
    public const int HeadIdFieldNumber = 14;
    private int headId_;
    /// <summary>
    /// 头像id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadId {
      get { return headId_; }
      set {
        headId_ = value;
      }
    }

    /// <summary>Field number for the "fans_tag" field.</summary>
    public const int FansTagFieldNumber = 15;
    private static readonly pb::FieldCodec<int> _repeated_fansTag_codec
        = pb::FieldCodec.ForInt32(122);
    private readonly pbc::RepeatedField<int> fansTag_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 粉丝标签
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FansTag {
      get { return fansTag_; }
    }

    /// <summary>Field number for the "fans_motto" field.</summary>
    public const int FansMottoFieldNumber = 16;
    private string fansMotto_ = "";
    /// <summary>
    /// 粉丝个人签名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FansMotto {
      get { return fansMotto_; }
      set {
        fansMotto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "course_faq_record" field.</summary>
    public const int CourseFaqRecordFieldNumber = 17;
    private int courseFaqRecord_;
    /// <summary>
    /// 答题竞速榜
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CourseFaqRecord {
      get { return courseFaqRecord_; }
      set {
        courseFaqRecord_ = value;
      }
    }

    /// <summary>Field number for the "fans_tag_str" field.</summary>
    public const int FansTagStrFieldNumber = 18;
    private string fansTagStr_ = "";
    /// <summary>
    /// 粉丝标签字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FansTagStr {
      get { return fansTagStr_; }
      set {
        fansTagStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PersonRankInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PersonRankInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Rank != other.Rank) return false;
      if (PlayerId != other.PlayerId) return false;
      if (Name != other.Name) return false;
      if (Faction != other.Faction) return false;
      if (GuildName != other.GuildName) return false;
      if (Sex != other.Sex) return false;
      if (FightPower != other.FightPower) return false;
      if (Level != other.Level) return false;
      if (Kawei != other.Kawei) return false;
      if (Popularity != other.Popularity) return false;
      if (YesterdayPopularity != other.YesterdayPopularity) return false;
      if (FansNum != other.FansNum) return false;
      if (Exp != other.Exp) return false;
      if (HeadId != other.HeadId) return false;
      if(!fansTag_.Equals(other.fansTag_)) return false;
      if (FansMotto != other.FansMotto) return false;
      if (CourseFaqRecord != other.CourseFaqRecord) return false;
      if (FansTagStr != other.FansTagStr) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Faction != 0) hash ^= Faction.GetHashCode();
      if (GuildName.Length != 0) hash ^= GuildName.GetHashCode();
      if (Sex != 0) hash ^= Sex.GetHashCode();
      if (FightPower != 0) hash ^= FightPower.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Kawei != 0) hash ^= Kawei.GetHashCode();
      if (Popularity != 0) hash ^= Popularity.GetHashCode();
      if (YesterdayPopularity != 0) hash ^= YesterdayPopularity.GetHashCode();
      if (FansNum != 0) hash ^= FansNum.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (HeadId != 0) hash ^= HeadId.GetHashCode();
      hash ^= fansTag_.GetHashCode();
      if (FansMotto.Length != 0) hash ^= FansMotto.GetHashCode();
      if (CourseFaqRecord != 0) hash ^= CourseFaqRecord.GetHashCode();
      if (FansTagStr.Length != 0) hash ^= FansTagStr.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rank != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rank);
      }
      if (PlayerId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(PlayerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Faction != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Faction);
      }
      if (GuildName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(GuildName);
      }
      if (Sex != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Sex);
      }
      if (FightPower != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FightPower);
      }
      if (Level != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Level);
      }
      if (Kawei != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Kawei);
      }
      if (Popularity != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Popularity);
      }
      if (YesterdayPopularity != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(YesterdayPopularity);
      }
      if (FansNum != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(FansNum);
      }
      if (Exp != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Exp);
      }
      if (HeadId != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(HeadId);
      }
      fansTag_.WriteTo(output, _repeated_fansTag_codec);
      if (FansMotto.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(FansMotto);
      }
      if (CourseFaqRecord != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(CourseFaqRecord);
      }
      if (FansTagStr.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(FansTagStr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Faction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Faction);
      }
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GuildName);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (FightPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FightPower);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Kawei != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Kawei);
      }
      if (Popularity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Popularity);
      }
      if (YesterdayPopularity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(YesterdayPopularity);
      }
      if (FansNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FansNum);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (HeadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadId);
      }
      size += fansTag_.CalculateSize(_repeated_fansTag_codec);
      if (FansMotto.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FansMotto);
      }
      if (CourseFaqRecord != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CourseFaqRecord);
      }
      if (FansTagStr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FansTagStr);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PersonRankInfo other) {
      if (other == null) {
        return;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Faction != 0) {
        Faction = other.Faction;
      }
      if (other.GuildName.Length != 0) {
        GuildName = other.GuildName;
      }
      if (other.Sex != 0) {
        Sex = other.Sex;
      }
      if (other.FightPower != 0) {
        FightPower = other.FightPower;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Kawei != 0) {
        Kawei = other.Kawei;
      }
      if (other.Popularity != 0) {
        Popularity = other.Popularity;
      }
      if (other.YesterdayPopularity != 0) {
        YesterdayPopularity = other.YesterdayPopularity;
      }
      if (other.FansNum != 0) {
        FansNum = other.FansNum;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.HeadId != 0) {
        HeadId = other.HeadId;
      }
      fansTag_.Add(other.fansTag_);
      if (other.FansMotto.Length != 0) {
        FansMotto = other.FansMotto;
      }
      if (other.CourseFaqRecord != 0) {
        CourseFaqRecord = other.CourseFaqRecord;
      }
      if (other.FansTagStr.Length != 0) {
        FansTagStr = other.FansTagStr;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Rank = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Faction = input.ReadInt32();
            break;
          }
          case 42: {
            GuildName = input.ReadString();
            break;
          }
          case 48: {
            Sex = input.ReadInt32();
            break;
          }
          case 56: {
            FightPower = input.ReadInt32();
            break;
          }
          case 64: {
            Level = input.ReadInt32();
            break;
          }
          case 72: {
            Kawei = input.ReadInt32();
            break;
          }
          case 80: {
            Popularity = input.ReadInt32();
            break;
          }
          case 88: {
            YesterdayPopularity = input.ReadInt32();
            break;
          }
          case 96: {
            FansNum = input.ReadInt32();
            break;
          }
          case 104: {
            Exp = input.ReadInt32();
            break;
          }
          case 112: {
            HeadId = input.ReadInt32();
            break;
          }
          case 122:
          case 120: {
            fansTag_.AddEntriesFrom(input, _repeated_fansTag_codec);
            break;
          }
          case 130: {
            FansMotto = input.ReadString();
            break;
          }
          case 136: {
            CourseFaqRecord = input.ReadInt32();
            break;
          }
          case 146: {
            FansTagStr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 公会排行数据
  /// </summary>
  public sealed partial class GuildRankInfo : pb::IMessage<GuildRankInfo> {
    private static readonly pb::MessageParser<GuildRankInfo> _parser = new pb::MessageParser<GuildRankInfo>(() => new GuildRankInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildRankInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[115]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildRankInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildRankInfo(GuildRankInfo other) : this() {
      rank_ = other.rank_;
      faction_ = other.faction_;
      guildId_ = other.guildId_;
      guildName_ = other.guildName_;
      guildLevel_ = other.guildLevel_;
      guildNumber_ = other.guildNumber_;
      guildLeaderName_ = other.guildLeaderName_;
      guildTenet_ = other.guildTenet_;
      impact_ = other.impact_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildRankInfo Clone() {
      return new GuildRankInfo(this);
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 1;
    private int rank_;
    /// <summary>
    /// 排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "faction" field.</summary>
    public const int FactionFieldNumber = 2;
    private int faction_;
    /// <summary>
    /// 势力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Faction {
      get { return faction_; }
      set {
        faction_ = value;
      }
    }

    /// <summary>Field number for the "guild_id" field.</summary>
    public const int GuildIdFieldNumber = 3;
    private ulong guildId_;
    /// <summary>
    /// 协会id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "guild_name" field.</summary>
    public const int GuildNameFieldNumber = 4;
    private string guildName_ = "";
    /// <summary>
    /// 名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guild_level" field.</summary>
    public const int GuildLevelFieldNumber = 5;
    private int guildLevel_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildLevel {
      get { return guildLevel_; }
      set {
        guildLevel_ = value;
      }
    }

    /// <summary>Field number for the "guild_number" field.</summary>
    public const int GuildNumberFieldNumber = 6;
    private int guildNumber_;
    /// <summary>
    /// 人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildNumber {
      get { return guildNumber_; }
      set {
        guildNumber_ = value;
      }
    }

    /// <summary>Field number for the "guild_leader_name" field.</summary>
    public const int GuildLeaderNameFieldNumber = 7;
    private string guildLeaderName_ = "";
    /// <summary>
    /// 协会名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GuildLeaderName {
      get { return guildLeaderName_; }
      set {
        guildLeaderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guild_tenet" field.</summary>
    public const int GuildTenetFieldNumber = 8;
    private string guildTenet_ = "";
    /// <summary>
    /// 协会宗旨
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GuildTenet {
      get { return guildTenet_; }
      set {
        guildTenet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "impact" field.</summary>
    public const int ImpactFieldNumber = 10;
    private int impact_;
    /// <summary>
    /// 影响力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Impact {
      get { return impact_; }
      set {
        impact_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuildRankInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuildRankInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Rank != other.Rank) return false;
      if (Faction != other.Faction) return false;
      if (GuildId != other.GuildId) return false;
      if (GuildName != other.GuildName) return false;
      if (GuildLevel != other.GuildLevel) return false;
      if (GuildNumber != other.GuildNumber) return false;
      if (GuildLeaderName != other.GuildLeaderName) return false;
      if (GuildTenet != other.GuildTenet) return false;
      if (Impact != other.Impact) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (Faction != 0) hash ^= Faction.GetHashCode();
      if (GuildId != 0UL) hash ^= GuildId.GetHashCode();
      if (GuildName.Length != 0) hash ^= GuildName.GetHashCode();
      if (GuildLevel != 0) hash ^= GuildLevel.GetHashCode();
      if (GuildNumber != 0) hash ^= GuildNumber.GetHashCode();
      if (GuildLeaderName.Length != 0) hash ^= GuildLeaderName.GetHashCode();
      if (GuildTenet.Length != 0) hash ^= GuildTenet.GetHashCode();
      if (Impact != 0) hash ^= Impact.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rank != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rank);
      }
      if (Faction != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Faction);
      }
      if (GuildId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(GuildId);
      }
      if (GuildName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(GuildName);
      }
      if (GuildLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GuildLevel);
      }
      if (GuildNumber != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(GuildNumber);
      }
      if (GuildLeaderName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(GuildLeaderName);
      }
      if (GuildTenet.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(GuildTenet);
      }
      if (Impact != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Impact);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (Faction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Faction);
      }
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GuildName);
      }
      if (GuildLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildLevel);
      }
      if (GuildNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildNumber);
      }
      if (GuildLeaderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GuildLeaderName);
      }
      if (GuildTenet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GuildTenet);
      }
      if (Impact != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Impact);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuildRankInfo other) {
      if (other == null) {
        return;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.Faction != 0) {
        Faction = other.Faction;
      }
      if (other.GuildId != 0UL) {
        GuildId = other.GuildId;
      }
      if (other.GuildName.Length != 0) {
        GuildName = other.GuildName;
      }
      if (other.GuildLevel != 0) {
        GuildLevel = other.GuildLevel;
      }
      if (other.GuildNumber != 0) {
        GuildNumber = other.GuildNumber;
      }
      if (other.GuildLeaderName.Length != 0) {
        GuildLeaderName = other.GuildLeaderName;
      }
      if (other.GuildTenet.Length != 0) {
        GuildTenet = other.GuildTenet;
      }
      if (other.Impact != 0) {
        Impact = other.Impact;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Rank = input.ReadInt32();
            break;
          }
          case 16: {
            Faction = input.ReadInt32();
            break;
          }
          case 24: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 34: {
            GuildName = input.ReadString();
            break;
          }
          case 40: {
            GuildLevel = input.ReadInt32();
            break;
          }
          case 48: {
            GuildNumber = input.ReadInt32();
            break;
          }
          case 58: {
            GuildLeaderName = input.ReadString();
            break;
          }
          case 66: {
            GuildTenet = input.ReadString();
            break;
          }
          case 80: {
            Impact = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 通用结算信息
  /// </summary>
  public sealed partial class StageResult : pb::IMessage<StageResult> {
    private static readonly pb::MessageParser<StageResult> _parser = new pb::MessageParser<StageResult>(() => new StageResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StageResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[116]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StageResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StageResult(StageResult other) : this() {
      warResult_ = other.warResult_;
      WarInfo = other.warInfo_ != null ? other.WarInfo.Clone() : null;
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StageResult Clone() {
      return new StageResult(this);
    }

    /// <summary>Field number for the "war_result" field.</summary>
    public const int WarResultFieldNumber = 1;
    private int warResult_;
    /// <summary>
    /// 胜利1，失败2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WarResult {
      get { return warResult_; }
      set {
        warResult_ = value;
      }
    }

    /// <summary>Field number for the "war_info" field.</summary>
    public const int WarInfoFieldNumber = 2;
    private global::Stardom.WarInfo warInfo_;
    /// <summary>
    /// 战斗指令
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.WarInfo WarInfo {
      get { return warInfo_; }
      set {
        warInfo_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Stardom.ItemBaseInfo> _repeated_items_codec
        = pb::FieldCodec.ForMessage(26, global::Stardom.ItemBaseInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.ItemBaseInfo> items_ = new pbc::RepeatedField<global::Stardom.ItemBaseInfo>();
    /// <summary>
    /// 道具列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.ItemBaseInfo> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StageResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StageResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WarResult != other.WarResult) return false;
      if (!object.Equals(WarInfo, other.WarInfo)) return false;
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WarResult != 0) hash ^= WarResult.GetHashCode();
      if (warInfo_ != null) hash ^= WarInfo.GetHashCode();
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WarResult != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WarResult);
      }
      if (warInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(WarInfo);
      }
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WarResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WarResult);
      }
      if (warInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WarInfo);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StageResult other) {
      if (other == null) {
        return;
      }
      if (other.WarResult != 0) {
        WarResult = other.WarResult;
      }
      if (other.warInfo_ != null) {
        if (warInfo_ == null) {
          warInfo_ = new global::Stardom.WarInfo();
        }
        WarInfo.MergeFrom(other.WarInfo);
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            WarResult = input.ReadInt32();
            break;
          }
          case 18: {
            if (warInfo_ == null) {
              warInfo_ = new global::Stardom.WarInfo();
            }
            input.ReadMessage(warInfo_);
            break;
          }
          case 26: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 任务信息
  /// </summary>
  public sealed partial class TaskInfo : pb::IMessage<TaskInfo> {
    private static readonly pb::MessageParser<TaskInfo> _parser = new pb::MessageParser<TaskInfo>(() => new TaskInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[117]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskInfo(TaskInfo other) : this() {
      taskId_ = other.taskId_;
      taskStatus_ = other.taskStatus_;
      taskCount_ = other.taskCount_;
      taskNeed_ = other.taskNeed_;
      taskCount2_ = other.taskCount2_;
      taskNeed2_ = other.taskNeed2_;
      taskAcceptTs_ = other.taskAcceptTs_;
      taskDeadlineTs_ = other.taskDeadlineTs_;
      taskCount3_ = other.taskCount3_;
      taskNeed3_ = other.taskNeed3_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskInfo Clone() {
      return new TaskInfo(this);
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private int taskId_;
    /// <summary>
    /// 任务ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "task_status" field.</summary>
    public const int TaskStatusFieldNumber = 2;
    private int taskStatus_;
    /// <summary>
    /// 任务状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskStatus {
      get { return taskStatus_; }
      set {
        taskStatus_ = value;
      }
    }

    /// <summary>Field number for the "task_count" field.</summary>
    public const int TaskCountFieldNumber = 3;
    private int taskCount_;
    /// <summary>
    /// 累计次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskCount {
      get { return taskCount_; }
      set {
        taskCount_ = value;
      }
    }

    /// <summary>Field number for the "task_need" field.</summary>
    public const int TaskNeedFieldNumber = 4;
    private int taskNeed_;
    /// <summary>
    /// 需要次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskNeed {
      get { return taskNeed_; }
      set {
        taskNeed_ = value;
      }
    }

    /// <summary>Field number for the "task_count2" field.</summary>
    public const int TaskCount2FieldNumber = 5;
    private int taskCount2_;
    /// <summary>
    /// 累计次数2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskCount2 {
      get { return taskCount2_; }
      set {
        taskCount2_ = value;
      }
    }

    /// <summary>Field number for the "task_need2" field.</summary>
    public const int TaskNeed2FieldNumber = 6;
    private int taskNeed2_;
    /// <summary>
    /// 需要次数2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskNeed2 {
      get { return taskNeed2_; }
      set {
        taskNeed2_ = value;
      }
    }

    /// <summary>Field number for the "task_accept_ts" field.</summary>
    public const int TaskAcceptTsFieldNumber = 7;
    private ulong taskAcceptTs_;
    /// <summary>
    /// 接受任务时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TaskAcceptTs {
      get { return taskAcceptTs_; }
      set {
        taskAcceptTs_ = value;
      }
    }

    /// <summary>Field number for the "task_deadline_ts" field.</summary>
    public const int TaskDeadlineTsFieldNumber = 8;
    private ulong taskDeadlineTs_;
    /// <summary>
    /// 任务结束时间戳，0为永久任务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TaskDeadlineTs {
      get { return taskDeadlineTs_; }
      set {
        taskDeadlineTs_ = value;
      }
    }

    /// <summary>Field number for the "task_count3" field.</summary>
    public const int TaskCount3FieldNumber = 9;
    private int taskCount3_;
    /// <summary>
    /// 累计次数3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskCount3 {
      get { return taskCount3_; }
      set {
        taskCount3_ = value;
      }
    }

    /// <summary>Field number for the "task_need3" field.</summary>
    public const int TaskNeed3FieldNumber = 10;
    private int taskNeed3_;
    /// <summary>
    /// 需要次数3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskNeed3 {
      get { return taskNeed3_; }
      set {
        taskNeed3_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (TaskStatus != other.TaskStatus) return false;
      if (TaskCount != other.TaskCount) return false;
      if (TaskNeed != other.TaskNeed) return false;
      if (TaskCount2 != other.TaskCount2) return false;
      if (TaskNeed2 != other.TaskNeed2) return false;
      if (TaskAcceptTs != other.TaskAcceptTs) return false;
      if (TaskDeadlineTs != other.TaskDeadlineTs) return false;
      if (TaskCount3 != other.TaskCount3) return false;
      if (TaskNeed3 != other.TaskNeed3) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId != 0) hash ^= TaskId.GetHashCode();
      if (TaskStatus != 0) hash ^= TaskStatus.GetHashCode();
      if (TaskCount != 0) hash ^= TaskCount.GetHashCode();
      if (TaskNeed != 0) hash ^= TaskNeed.GetHashCode();
      if (TaskCount2 != 0) hash ^= TaskCount2.GetHashCode();
      if (TaskNeed2 != 0) hash ^= TaskNeed2.GetHashCode();
      if (TaskAcceptTs != 0UL) hash ^= TaskAcceptTs.GetHashCode();
      if (TaskDeadlineTs != 0UL) hash ^= TaskDeadlineTs.GetHashCode();
      if (TaskCount3 != 0) hash ^= TaskCount3.GetHashCode();
      if (TaskNeed3 != 0) hash ^= TaskNeed3.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskId);
      }
      if (TaskStatus != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TaskStatus);
      }
      if (TaskCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TaskCount);
      }
      if (TaskNeed != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TaskNeed);
      }
      if (TaskCount2 != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TaskCount2);
      }
      if (TaskNeed2 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TaskNeed2);
      }
      if (TaskAcceptTs != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(TaskAcceptTs);
      }
      if (TaskDeadlineTs != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(TaskDeadlineTs);
      }
      if (TaskCount3 != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(TaskCount3);
      }
      if (TaskNeed3 != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(TaskNeed3);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      if (TaskStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskStatus);
      }
      if (TaskCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskCount);
      }
      if (TaskNeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskNeed);
      }
      if (TaskCount2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskCount2);
      }
      if (TaskNeed2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskNeed2);
      }
      if (TaskAcceptTs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TaskAcceptTs);
      }
      if (TaskDeadlineTs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TaskDeadlineTs);
      }
      if (TaskCount3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskCount3);
      }
      if (TaskNeed3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskNeed3);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskInfo other) {
      if (other == null) {
        return;
      }
      if (other.TaskId != 0) {
        TaskId = other.TaskId;
      }
      if (other.TaskStatus != 0) {
        TaskStatus = other.TaskStatus;
      }
      if (other.TaskCount != 0) {
        TaskCount = other.TaskCount;
      }
      if (other.TaskNeed != 0) {
        TaskNeed = other.TaskNeed;
      }
      if (other.TaskCount2 != 0) {
        TaskCount2 = other.TaskCount2;
      }
      if (other.TaskNeed2 != 0) {
        TaskNeed2 = other.TaskNeed2;
      }
      if (other.TaskAcceptTs != 0UL) {
        TaskAcceptTs = other.TaskAcceptTs;
      }
      if (other.TaskDeadlineTs != 0UL) {
        TaskDeadlineTs = other.TaskDeadlineTs;
      }
      if (other.TaskCount3 != 0) {
        TaskCount3 = other.TaskCount3;
      }
      if (other.TaskNeed3 != 0) {
        TaskNeed3 = other.TaskNeed3;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadInt32();
            break;
          }
          case 16: {
            TaskStatus = input.ReadInt32();
            break;
          }
          case 24: {
            TaskCount = input.ReadInt32();
            break;
          }
          case 32: {
            TaskNeed = input.ReadInt32();
            break;
          }
          case 40: {
            TaskCount2 = input.ReadInt32();
            break;
          }
          case 48: {
            TaskNeed2 = input.ReadInt32();
            break;
          }
          case 56: {
            TaskAcceptTs = input.ReadUInt64();
            break;
          }
          case 64: {
            TaskDeadlineTs = input.ReadUInt64();
            break;
          }
          case 72: {
            TaskCount3 = input.ReadInt32();
            break;
          }
          case 80: {
            TaskNeed3 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 日常任务活跃度领取状态结构
  /// </summary>
  public sealed partial class DailyTaskReward : pb::IMessage<DailyTaskReward> {
    private static readonly pb::MessageParser<DailyTaskReward> _parser = new pb::MessageParser<DailyTaskReward>(() => new DailyTaskReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DailyTaskReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[118]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyTaskReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyTaskReward(DailyTaskReward other) : this() {
      cfgId_ = other.cfgId_;
      liveness_ = other.liveness_;
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyTaskReward Clone() {
      return new DailyTaskReward(this);
    }

    /// <summary>Field number for the "cfg_id" field.</summary>
    public const int CfgIdFieldNumber = 1;
    private int cfgId_;
    /// <summary>
    /// 对应配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CfgId {
      get { return cfgId_; }
      set {
        cfgId_ = value;
      }
    }

    /// <summary>Field number for the "liveness" field.</summary>
    public const int LivenessFieldNumber = 2;
    private int liveness_;
    /// <summary>
    /// 对应活跃度值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Liveness {
      get { return liveness_; }
      set {
        liveness_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private int status_;
    /// <summary>
    /// 领取状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DailyTaskReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DailyTaskReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CfgId != other.CfgId) return false;
      if (Liveness != other.Liveness) return false;
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CfgId != 0) hash ^= CfgId.GetHashCode();
      if (Liveness != 0) hash ^= Liveness.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CfgId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CfgId);
      }
      if (Liveness != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Liveness);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CfgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CfgId);
      }
      if (Liveness != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Liveness);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DailyTaskReward other) {
      if (other == null) {
        return;
      }
      if (other.CfgId != 0) {
        CfgId = other.CfgId;
      }
      if (other.Liveness != 0) {
        Liveness = other.Liveness;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CfgId = input.ReadInt32();
            break;
          }
          case 16: {
            Liveness = input.ReadInt32();
            break;
          }
          case 24: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 剧情
  /// </summary>
  public sealed partial class PlotSelected : pb::IMessage<PlotSelected> {
    private static readonly pb::MessageParser<PlotSelected> _parser = new pb::MessageParser<PlotSelected>(() => new PlotSelected());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlotSelected> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[119]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlotSelected() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlotSelected(PlotSelected other) : this() {
      plotId_ = other.plotId_;
      plotSelect_ = other.plotSelect_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlotSelected Clone() {
      return new PlotSelected(this);
    }

    /// <summary>Field number for the "plot_id" field.</summary>
    public const int PlotIdFieldNumber = 1;
    private int plotId_;
    /// <summary>
    /// 剧情id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlotId {
      get { return plotId_; }
      set {
        plotId_ = value;
      }
    }

    /// <summary>Field number for the "plot_select" field.</summary>
    public const int PlotSelectFieldNumber = 2;
    private int plotSelect_;
    /// <summary>
    /// 剧情选择
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlotSelect {
      get { return plotSelect_; }
      set {
        plotSelect_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlotSelected);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlotSelected other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlotId != other.PlotId) return false;
      if (PlotSelect != other.PlotSelect) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlotId != 0) hash ^= PlotId.GetHashCode();
      if (PlotSelect != 0) hash ^= PlotSelect.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlotId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlotId);
      }
      if (PlotSelect != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlotSelect);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlotId);
      }
      if (PlotSelect != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlotSelect);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlotSelected other) {
      if (other == null) {
        return;
      }
      if (other.PlotId != 0) {
        PlotId = other.PlotId;
      }
      if (other.PlotSelect != 0) {
        PlotSelect = other.PlotSelect;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlotId = input.ReadInt32();
            break;
          }
          case 16: {
            PlotSelect = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 商店
  /// </summary>
  public sealed partial class ShopItemInfo : pb::IMessage<ShopItemInfo> {
    private static readonly pb::MessageParser<ShopItemInfo> _parser = new pb::MessageParser<ShopItemInfo>(() => new ShopItemInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShopItemInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[120]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopItemInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopItemInfo(ShopItemInfo other) : this() {
      productId_ = other.productId_;
      diffId_ = other.diffId_;
      itemBuyedTimes_ = other.itemBuyedTimes_;
      itemBuyedLimit_ = other.itemBuyedLimit_;
      itemLevelLimit_ = other.itemLevelLimit_;
      itemGuildLevelLimit_ = other.itemGuildLevelLimit_;
      itemAddedTime_ = other.itemAddedTime_;
      itemHistoryGradeLimit_ = other.itemHistoryGradeLimit_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopItemInfo Clone() {
      return new ShopItemInfo(this);
    }

    /// <summary>Field number for the "product_id" field.</summary>
    public const int ProductIdFieldNumber = 1;
    private int productId_;
    /// <summary>
    /// 商品物品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProductId {
      get { return productId_; }
      set {
        productId_ = value;
      }
    }

    /// <summary>Field number for the "diff_id" field.</summary>
    public const int DiffIdFieldNumber = 2;
    private int diffId_;
    /// <summary>
    /// 碎片物品区别id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DiffId {
      get { return diffId_; }
      set {
        diffId_ = value;
      }
    }

    /// <summary>Field number for the "item_buyed_times" field.</summary>
    public const int ItemBuyedTimesFieldNumber = 3;
    private int itemBuyedTimes_;
    /// <summary>
    /// 物品已购买次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemBuyedTimes {
      get { return itemBuyedTimes_; }
      set {
        itemBuyedTimes_ = value;
      }
    }

    /// <summary>Field number for the "item_buyed_limit" field.</summary>
    public const int ItemBuyedLimitFieldNumber = 4;
    private int itemBuyedLimit_;
    /// <summary>
    /// 客户端用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemBuyedLimit {
      get { return itemBuyedLimit_; }
      set {
        itemBuyedLimit_ = value;
      }
    }

    /// <summary>Field number for the "item_level_limit" field.</summary>
    public const int ItemLevelLimitFieldNumber = 5;
    private int itemLevelLimit_;
    /// <summary>
    /// 物品限购等级,0不限等级,非0限制等级购买
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemLevelLimit {
      get { return itemLevelLimit_; }
      set {
        itemLevelLimit_ = value;
      }
    }

    /// <summary>Field number for the "item_guild_level_limit" field.</summary>
    public const int ItemGuildLevelLimitFieldNumber = 6;
    private int itemGuildLevelLimit_;
    /// <summary>
    /// 协会等级限购等级,0不限等级,非0限制等级购买
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemGuildLevelLimit {
      get { return itemGuildLevelLimit_; }
      set {
        itemGuildLevelLimit_ = value;
      }
    }

    /// <summary>Field number for the "item_added_time" field.</summary>
    public const int ItemAddedTimeFieldNumber = 7;
    private ulong itemAddedTime_;
    /// <summary>
    /// 商品上架时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ItemAddedTime {
      get { return itemAddedTime_; }
      set {
        itemAddedTime_ = value;
      }
    }

    /// <summary>Field number for the "item_history_grade_limit" field.</summary>
    public const int ItemHistoryGradeLimitFieldNumber = 8;
    private int itemHistoryGradeLimit_;
    /// <summary>
    /// 历史最高咖位限制,0不限等级,非0限制历史咖位购买
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemHistoryGradeLimit {
      get { return itemHistoryGradeLimit_; }
      set {
        itemHistoryGradeLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShopItemInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShopItemInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProductId != other.ProductId) return false;
      if (DiffId != other.DiffId) return false;
      if (ItemBuyedTimes != other.ItemBuyedTimes) return false;
      if (ItemBuyedLimit != other.ItemBuyedLimit) return false;
      if (ItemLevelLimit != other.ItemLevelLimit) return false;
      if (ItemGuildLevelLimit != other.ItemGuildLevelLimit) return false;
      if (ItemAddedTime != other.ItemAddedTime) return false;
      if (ItemHistoryGradeLimit != other.ItemHistoryGradeLimit) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProductId != 0) hash ^= ProductId.GetHashCode();
      if (DiffId != 0) hash ^= DiffId.GetHashCode();
      if (ItemBuyedTimes != 0) hash ^= ItemBuyedTimes.GetHashCode();
      if (ItemBuyedLimit != 0) hash ^= ItemBuyedLimit.GetHashCode();
      if (ItemLevelLimit != 0) hash ^= ItemLevelLimit.GetHashCode();
      if (ItemGuildLevelLimit != 0) hash ^= ItemGuildLevelLimit.GetHashCode();
      if (ItemAddedTime != 0UL) hash ^= ItemAddedTime.GetHashCode();
      if (ItemHistoryGradeLimit != 0) hash ^= ItemHistoryGradeLimit.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProductId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ProductId);
      }
      if (DiffId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DiffId);
      }
      if (ItemBuyedTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ItemBuyedTimes);
      }
      if (ItemBuyedLimit != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ItemBuyedLimit);
      }
      if (ItemLevelLimit != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ItemLevelLimit);
      }
      if (ItemGuildLevelLimit != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ItemGuildLevelLimit);
      }
      if (ItemAddedTime != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(ItemAddedTime);
      }
      if (ItemHistoryGradeLimit != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ItemHistoryGradeLimit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProductId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProductId);
      }
      if (DiffId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DiffId);
      }
      if (ItemBuyedTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemBuyedTimes);
      }
      if (ItemBuyedLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemBuyedLimit);
      }
      if (ItemLevelLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemLevelLimit);
      }
      if (ItemGuildLevelLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemGuildLevelLimit);
      }
      if (ItemAddedTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemAddedTime);
      }
      if (ItemHistoryGradeLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemHistoryGradeLimit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShopItemInfo other) {
      if (other == null) {
        return;
      }
      if (other.ProductId != 0) {
        ProductId = other.ProductId;
      }
      if (other.DiffId != 0) {
        DiffId = other.DiffId;
      }
      if (other.ItemBuyedTimes != 0) {
        ItemBuyedTimes = other.ItemBuyedTimes;
      }
      if (other.ItemBuyedLimit != 0) {
        ItemBuyedLimit = other.ItemBuyedLimit;
      }
      if (other.ItemLevelLimit != 0) {
        ItemLevelLimit = other.ItemLevelLimit;
      }
      if (other.ItemGuildLevelLimit != 0) {
        ItemGuildLevelLimit = other.ItemGuildLevelLimit;
      }
      if (other.ItemAddedTime != 0UL) {
        ItemAddedTime = other.ItemAddedTime;
      }
      if (other.ItemHistoryGradeLimit != 0) {
        ItemHistoryGradeLimit = other.ItemHistoryGradeLimit;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ProductId = input.ReadInt32();
            break;
          }
          case 16: {
            DiffId = input.ReadInt32();
            break;
          }
          case 24: {
            ItemBuyedTimes = input.ReadInt32();
            break;
          }
          case 32: {
            ItemBuyedLimit = input.ReadInt32();
            break;
          }
          case 40: {
            ItemLevelLimit = input.ReadInt32();
            break;
          }
          case 48: {
            ItemGuildLevelLimit = input.ReadInt32();
            break;
          }
          case 56: {
            ItemAddedTime = input.ReadUInt64();
            break;
          }
          case 64: {
            ItemHistoryGradeLimit = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 出售物品信息
  /// </summary>
  public sealed partial class ShopSelItemsInfo : pb::IMessage<ShopSelItemsInfo> {
    private static readonly pb::MessageParser<ShopSelItemsInfo> _parser = new pb::MessageParser<ShopSelItemsInfo>(() => new ShopSelItemsInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShopSelItemsInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[121]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopSelItemsInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopSelItemsInfo(ShopSelItemsInfo other) : this() {
      itemType_ = other.itemType_;
      itemId_ = other.itemId_;
      itemNum_ = other.itemNum_;
      guid_ = other.guid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopSelItemsInfo Clone() {
      return new ShopSelItemsInfo(this);
    }

    /// <summary>Field number for the "item_type" field.</summary>
    public const int ItemTypeFieldNumber = 1;
    private int itemType_;
    /// <summary>
    /// 道具类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemType {
      get { return itemType_; }
      set {
        itemType_ = value;
      }
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private int itemId_;
    /// <summary>
    /// 道具id  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "item_num" field.</summary>
    public const int ItemNumFieldNumber = 3;
    private int itemNum_;
    /// <summary>
    /// 数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemNum {
      get { return itemNum_; }
      set {
        itemNum_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 4;
    private ulong guid_;
    /// <summary>
    /// guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShopSelItemsInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShopSelItemsInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemType != other.ItemType) return false;
      if (ItemId != other.ItemId) return false;
      if (ItemNum != other.ItemNum) return false;
      if (Guid != other.Guid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemType != 0) hash ^= ItemType.GetHashCode();
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (ItemNum != 0) hash ^= ItemNum.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemType);
      }
      if (ItemId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemId);
      }
      if (ItemNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ItemNum);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Guid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemType);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (ItemNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemNum);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShopSelItemsInfo other) {
      if (other == null) {
        return;
      }
      if (other.ItemType != 0) {
        ItemType = other.ItemType;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.ItemNum != 0) {
        ItemNum = other.ItemNum;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemType = input.ReadInt32();
            break;
          }
          case 16: {
            ItemId = input.ReadInt32();
            break;
          }
          case 24: {
            ItemNum = input.ReadInt32();
            break;
          }
          case 32: {
            Guid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 聊天玩家信息
  /// </summary>
  public sealed partial class ChatEntity : pb::IMessage<ChatEntity> {
    private static readonly pb::MessageParser<ChatEntity> _parser = new pb::MessageParser<ChatEntity>(() => new ChatEntity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatEntity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[122]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatEntity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatEntity(ChatEntity other) : this() {
      playerId_ = other.playerId_;
      name_ = other.name_;
      level_ = other.level_;
      cardId_ = other.cardId_;
      vip_ = other.vip_;
      kawei_ = other.kawei_;
      faction_ = other.faction_;
      guildId_ = other.guildId_;
      guildPosition_ = other.guildPosition_;
      headId_ = other.headId_;
      teamId_ = other.teamId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatEntity Clone() {
      return new ChatEntity(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 玩家名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    /// 玩家等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 4;
    private int cardId_;
    /// <summary>
    /// 主角cardid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "vip" field.</summary>
    public const int VipFieldNumber = 5;
    private int vip_;
    /// <summary>
    /// 玩家vip等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Vip {
      get { return vip_; }
      set {
        vip_ = value;
      }
    }

    /// <summary>Field number for the "kawei" field.</summary>
    public const int KaweiFieldNumber = 6;
    private int kawei_;
    /// <summary>
    /// 咖位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Kawei {
      get { return kawei_; }
      set {
        kawei_ = value;
      }
    }

    /// <summary>Field number for the "faction" field.</summary>
    public const int FactionFieldNumber = 7;
    private int faction_;
    /// <summary>
    /// 阵营
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Faction {
      get { return faction_; }
      set {
        faction_ = value;
      }
    }

    /// <summary>Field number for the "guild_id" field.</summary>
    public const int GuildIdFieldNumber = 8;
    private ulong guildId_;
    /// <summary>
    /// 玩家协会id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "guild_position" field.</summary>
    public const int GuildPositionFieldNumber = 9;
    private int guildPosition_;
    /// <summary>
    /// 玩家协会职位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildPosition {
      get { return guildPosition_; }
      set {
        guildPosition_ = value;
      }
    }

    /// <summary>Field number for the "head_id" field.</summary>
    public const int HeadIdFieldNumber = 10;
    private int headId_;
    /// <summary>
    /// 头像id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadId {
      get { return headId_; }
      set {
        headId_ = value;
      }
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 11;
    private ulong teamId_;
    /// <summary>
    /// 队伍id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatEntity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatEntity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Name != other.Name) return false;
      if (Level != other.Level) return false;
      if (CardId != other.CardId) return false;
      if (Vip != other.Vip) return false;
      if (Kawei != other.Kawei) return false;
      if (Faction != other.Faction) return false;
      if (GuildId != other.GuildId) return false;
      if (GuildPosition != other.GuildPosition) return false;
      if (HeadId != other.HeadId) return false;
      if (TeamId != other.TeamId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (CardId != 0) hash ^= CardId.GetHashCode();
      if (Vip != 0) hash ^= Vip.GetHashCode();
      if (Kawei != 0) hash ^= Kawei.GetHashCode();
      if (Faction != 0) hash ^= Faction.GetHashCode();
      if (GuildId != 0UL) hash ^= GuildId.GetHashCode();
      if (GuildPosition != 0) hash ^= GuildPosition.GetHashCode();
      if (HeadId != 0) hash ^= HeadId.GetHashCode();
      if (TeamId != 0UL) hash ^= TeamId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (CardId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CardId);
      }
      if (Vip != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Vip);
      }
      if (Kawei != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Kawei);
      }
      if (Faction != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Faction);
      }
      if (GuildId != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(GuildId);
      }
      if (GuildPosition != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(GuildPosition);
      }
      if (HeadId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(HeadId);
      }
      if (TeamId != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(TeamId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (Vip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vip);
      }
      if (Kawei != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Kawei);
      }
      if (Faction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Faction);
      }
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (GuildPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildPosition);
      }
      if (HeadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadId);
      }
      if (TeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatEntity other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      if (other.Vip != 0) {
        Vip = other.Vip;
      }
      if (other.Kawei != 0) {
        Kawei = other.Kawei;
      }
      if (other.Faction != 0) {
        Faction = other.Faction;
      }
      if (other.GuildId != 0UL) {
        GuildId = other.GuildId;
      }
      if (other.GuildPosition != 0) {
        GuildPosition = other.GuildPosition;
      }
      if (other.HeadId != 0) {
        HeadId = other.HeadId;
      }
      if (other.TeamId != 0UL) {
        TeamId = other.TeamId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            CardId = input.ReadInt32();
            break;
          }
          case 40: {
            Vip = input.ReadInt32();
            break;
          }
          case 48: {
            Kawei = input.ReadInt32();
            break;
          }
          case 56: {
            Faction = input.ReadInt32();
            break;
          }
          case 64: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 72: {
            GuildPosition = input.ReadInt32();
            break;
          }
          case 80: {
            HeadId = input.ReadInt32();
            break;
          }
          case 88: {
            TeamId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 收藏品信息
  /// </summary>
  public sealed partial class PlayBarTreasure : pb::IMessage<PlayBarTreasure> {
    private static readonly pb::MessageParser<PlayBarTreasure> _parser = new pb::MessageParser<PlayBarTreasure>(() => new PlayBarTreasure());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayBarTreasure> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[123]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayBarTreasure() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayBarTreasure(PlayBarTreasure other) : this() {
      treasureId_ = other.treasureId_;
      treasureStatus_ = other.treasureStatus_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayBarTreasure Clone() {
      return new PlayBarTreasure(this);
    }

    /// <summary>Field number for the "treasure_id" field.</summary>
    public const int TreasureIdFieldNumber = 1;
    private int treasureId_;
    /// <summary>
    /// 收藏品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TreasureId {
      get { return treasureId_; }
      set {
        treasureId_ = value;
      }
    }

    /// <summary>Field number for the "treasure_status" field.</summary>
    public const int TreasureStatusFieldNumber = 2;
    private int treasureStatus_;
    /// <summary>
    /// 收藏品状态 0.有红点、1.取消红点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TreasureStatus {
      get { return treasureStatus_; }
      set {
        treasureStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayBarTreasure);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayBarTreasure other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TreasureId != other.TreasureId) return false;
      if (TreasureStatus != other.TreasureStatus) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TreasureId != 0) hash ^= TreasureId.GetHashCode();
      if (TreasureStatus != 0) hash ^= TreasureStatus.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TreasureId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TreasureId);
      }
      if (TreasureStatus != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TreasureStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TreasureId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TreasureId);
      }
      if (TreasureStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TreasureStatus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayBarTreasure other) {
      if (other == null) {
        return;
      }
      if (other.TreasureId != 0) {
        TreasureId = other.TreasureId;
      }
      if (other.TreasureStatus != 0) {
        TreasureStatus = other.TreasureStatus;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TreasureId = input.ReadInt32();
            break;
          }
          case 16: {
            TreasureStatus = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 七日天气预报
  /// </summary>
  public sealed partial class PlayBarWeatherInfo : pb::IMessage<PlayBarWeatherInfo> {
    private static readonly pb::MessageParser<PlayBarWeatherInfo> _parser = new pb::MessageParser<PlayBarWeatherInfo>(() => new PlayBarWeatherInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayBarWeatherInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[124]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayBarWeatherInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayBarWeatherInfo(PlayBarWeatherInfo other) : this() {
      weatherId_ = other.weatherId_;
      weatherEventId_ = other.weatherEventId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayBarWeatherInfo Clone() {
      return new PlayBarWeatherInfo(this);
    }

    /// <summary>Field number for the "weather_id" field.</summary>
    public const int WeatherIdFieldNumber = 1;
    private int weatherId_;
    /// <summary>
    /// 天气情况（1.多云、2.晴、3.雷雨、4.大风）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeatherId {
      get { return weatherId_; }
      set {
        weatherId_ = value;
      }
    }

    /// <summary>Field number for the "weather_event_id" field.</summary>
    public const int WeatherEventIdFieldNumber = 2;
    private int weatherEventId_;
    /// <summary>
    /// 天气事件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeatherEventId {
      get { return weatherEventId_; }
      set {
        weatherEventId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayBarWeatherInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayBarWeatherInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WeatherId != other.WeatherId) return false;
      if (WeatherEventId != other.WeatherEventId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WeatherId != 0) hash ^= WeatherId.GetHashCode();
      if (WeatherEventId != 0) hash ^= WeatherEventId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WeatherId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WeatherId);
      }
      if (WeatherEventId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WeatherEventId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WeatherId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeatherId);
      }
      if (WeatherEventId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeatherEventId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayBarWeatherInfo other) {
      if (other == null) {
        return;
      }
      if (other.WeatherId != 0) {
        WeatherId = other.WeatherId;
      }
      if (other.WeatherEventId != 0) {
        WeatherEventId = other.WeatherEventId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            WeatherId = input.ReadInt32();
            break;
          }
          case 16: {
            WeatherEventId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 午夜酒吧信息
  /// </summary>
  public sealed partial class PlayBarInfo : pb::IMessage<PlayBarInfo> {
    private static readonly pb::MessageParser<PlayBarInfo> _parser = new pb::MessageParser<PlayBarInfo>(() => new PlayBarInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayBarInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[125]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayBarInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayBarInfo(PlayBarInfo other) : this() {
      treasure_ = other.treasure_.Clone();
      eventList_ = other.eventList_.Clone();
      letters_ = other.letters_.Clone();
      unhandleEventId_ = other.unhandleEventId_;
      waitUntilTs_ = other.waitUntilTs_;
      weatherInfo_ = other.weatherInfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayBarInfo Clone() {
      return new PlayBarInfo(this);
    }

    /// <summary>Field number for the "treasure" field.</summary>
    public const int TreasureFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Stardom.PlayBarTreasure> _repeated_treasure_codec
        = pb::FieldCodec.ForMessage(10, global::Stardom.PlayBarTreasure.Parser);
    private readonly pbc::RepeatedField<global::Stardom.PlayBarTreasure> treasure_ = new pbc::RepeatedField<global::Stardom.PlayBarTreasure>();
    /// <summary>
    /// 收藏品列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.PlayBarTreasure> Treasure {
      get { return treasure_; }
    }

    /// <summary>Field number for the "event_list" field.</summary>
    public const int EventListFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_eventList_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> eventList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 已发生事件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> EventList {
      get { return eventList_; }
    }

    /// <summary>Field number for the "letters" field.</summary>
    public const int LettersFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_letters_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> letters_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 信件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Letters {
      get { return letters_; }
    }

    /// <summary>Field number for the "unhandle_event_id" field.</summary>
    public const int UnhandleEventIdFieldNumber = 4;
    private int unhandleEventId_;
    /// <summary>
    /// 未处理事件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnhandleEventId {
      get { return unhandleEventId_; }
      set {
        unhandleEventId_ = value;
      }
    }

    /// <summary>Field number for the "wait_until_ts" field.</summary>
    public const int WaitUntilTsFieldNumber = 5;
    private ulong waitUntilTs_;
    /// <summary>
    /// 等待时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong WaitUntilTs {
      get { return waitUntilTs_; }
      set {
        waitUntilTs_ = value;
      }
    }

    /// <summary>Field number for the "weather_info" field.</summary>
    public const int WeatherInfoFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Stardom.PlayBarWeatherInfo> _repeated_weatherInfo_codec
        = pb::FieldCodec.ForMessage(50, global::Stardom.PlayBarWeatherInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.PlayBarWeatherInfo> weatherInfo_ = new pbc::RepeatedField<global::Stardom.PlayBarWeatherInfo>();
    /// <summary>
    /// 七日天气预报
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.PlayBarWeatherInfo> WeatherInfo {
      get { return weatherInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayBarInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayBarInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!treasure_.Equals(other.treasure_)) return false;
      if(!eventList_.Equals(other.eventList_)) return false;
      if(!letters_.Equals(other.letters_)) return false;
      if (UnhandleEventId != other.UnhandleEventId) return false;
      if (WaitUntilTs != other.WaitUntilTs) return false;
      if(!weatherInfo_.Equals(other.weatherInfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= treasure_.GetHashCode();
      hash ^= eventList_.GetHashCode();
      hash ^= letters_.GetHashCode();
      if (UnhandleEventId != 0) hash ^= UnhandleEventId.GetHashCode();
      if (WaitUntilTs != 0UL) hash ^= WaitUntilTs.GetHashCode();
      hash ^= weatherInfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      treasure_.WriteTo(output, _repeated_treasure_codec);
      eventList_.WriteTo(output, _repeated_eventList_codec);
      letters_.WriteTo(output, _repeated_letters_codec);
      if (UnhandleEventId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UnhandleEventId);
      }
      if (WaitUntilTs != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(WaitUntilTs);
      }
      weatherInfo_.WriteTo(output, _repeated_weatherInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += treasure_.CalculateSize(_repeated_treasure_codec);
      size += eventList_.CalculateSize(_repeated_eventList_codec);
      size += letters_.CalculateSize(_repeated_letters_codec);
      if (UnhandleEventId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnhandleEventId);
      }
      if (WaitUntilTs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WaitUntilTs);
      }
      size += weatherInfo_.CalculateSize(_repeated_weatherInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayBarInfo other) {
      if (other == null) {
        return;
      }
      treasure_.Add(other.treasure_);
      eventList_.Add(other.eventList_);
      letters_.Add(other.letters_);
      if (other.UnhandleEventId != 0) {
        UnhandleEventId = other.UnhandleEventId;
      }
      if (other.WaitUntilTs != 0UL) {
        WaitUntilTs = other.WaitUntilTs;
      }
      weatherInfo_.Add(other.weatherInfo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            treasure_.AddEntriesFrom(input, _repeated_treasure_codec);
            break;
          }
          case 18:
          case 16: {
            eventList_.AddEntriesFrom(input, _repeated_eventList_codec);
            break;
          }
          case 26:
          case 24: {
            letters_.AddEntriesFrom(input, _repeated_letters_codec);
            break;
          }
          case 32: {
            UnhandleEventId = input.ReadInt32();
            break;
          }
          case 40: {
            WaitUntilTs = input.ReadUInt64();
            break;
          }
          case 50: {
            weatherInfo_.AddEntriesFrom(input, _repeated_weatherInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 午夜酒吧顾客信息
  /// </summary>
  public sealed partial class PlayBarCustomer : pb::IMessage<PlayBarCustomer> {
    private static readonly pb::MessageParser<PlayBarCustomer> _parser = new pb::MessageParser<PlayBarCustomer>(() => new PlayBarCustomer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayBarCustomer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[126]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayBarCustomer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayBarCustomer(PlayBarCustomer other) : this() {
      id_ = other.id_;
      consumptionTimes_ = other.consumptionTimes_;
      todayConsumeTimes_ = other.todayConsumeTimes_;
      vipLevel_ = other.vipLevel_;
      vipConsumeTimes_ = other.vipConsumeTimes_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayBarCustomer Clone() {
      return new PlayBarCustomer(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 顾客id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "consumption_times" field.</summary>
    public const int ConsumptionTimesFieldNumber = 2;
    private int consumptionTimes_;
    /// <summary>
    /// 顾客消费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConsumptionTimes {
      get { return consumptionTimes_; }
      set {
        consumptionTimes_ = value;
      }
    }

    /// <summary>Field number for the "today_consume_times" field.</summary>
    public const int TodayConsumeTimesFieldNumber = 3;
    private int todayConsumeTimes_;
    /// <summary>
    /// 今日消费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TodayConsumeTimes {
      get { return todayConsumeTimes_; }
      set {
        todayConsumeTimes_ = value;
      }
    }

    /// <summary>Field number for the "vip_level" field.</summary>
    public const int VipLevelFieldNumber = 4;
    private int vipLevel_;
    /// <summary>
    /// 顾客酒吧消费等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VipLevel {
      get { return vipLevel_; }
      set {
        vipLevel_ = value;
      }
    }

    /// <summary>Field number for the "vip_consume_times" field.</summary>
    public const int VipConsumeTimesFieldNumber = 5;
    private int vipConsumeTimes_;
    /// <summary>
    /// 消费等级消费次数（升级清空）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VipConsumeTimes {
      get { return vipConsumeTimes_; }
      set {
        vipConsumeTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayBarCustomer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayBarCustomer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ConsumptionTimes != other.ConsumptionTimes) return false;
      if (TodayConsumeTimes != other.TodayConsumeTimes) return false;
      if (VipLevel != other.VipLevel) return false;
      if (VipConsumeTimes != other.VipConsumeTimes) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (ConsumptionTimes != 0) hash ^= ConsumptionTimes.GetHashCode();
      if (TodayConsumeTimes != 0) hash ^= TodayConsumeTimes.GetHashCode();
      if (VipLevel != 0) hash ^= VipLevel.GetHashCode();
      if (VipConsumeTimes != 0) hash ^= VipConsumeTimes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ConsumptionTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConsumptionTimes);
      }
      if (TodayConsumeTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TodayConsumeTimes);
      }
      if (VipLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(VipLevel);
      }
      if (VipConsumeTimes != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(VipConsumeTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (ConsumptionTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConsumptionTimes);
      }
      if (TodayConsumeTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TodayConsumeTimes);
      }
      if (VipLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VipLevel);
      }
      if (VipConsumeTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VipConsumeTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayBarCustomer other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.ConsumptionTimes != 0) {
        ConsumptionTimes = other.ConsumptionTimes;
      }
      if (other.TodayConsumeTimes != 0) {
        TodayConsumeTimes = other.TodayConsumeTimes;
      }
      if (other.VipLevel != 0) {
        VipLevel = other.VipLevel;
      }
      if (other.VipConsumeTimes != 0) {
        VipConsumeTimes = other.VipConsumeTimes;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            ConsumptionTimes = input.ReadInt32();
            break;
          }
          case 24: {
            TodayConsumeTimes = input.ReadInt32();
            break;
          }
          case 32: {
            VipLevel = input.ReadInt32();
            break;
          }
          case 40: {
            VipConsumeTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 扫荡邀请函信息
  /// </summary>
  public sealed partial class SweepInvitation : pb::IMessage<SweepInvitation> {
    private static readonly pb::MessageParser<SweepInvitation> _parser = new pb::MessageParser<SweepInvitation>(() => new SweepInvitation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SweepInvitation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[127]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SweepInvitation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SweepInvitation(SweepInvitation other) : this() {
      id_ = other.id_;
      status_ = other.status_;
      red_ = other.red_;
      invitationTs_ = other.invitationTs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SweepInvitation Clone() {
      return new SweepInvitation(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 扫荡邀请函id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    /// <summary>
    /// 是否完成(0.未开启、1.开启、2.已完成、3.已经领取)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "red" field.</summary>
    public const int RedFieldNumber = 3;
    private int red_;
    /// <summary>
    /// 0.是新，1是旧
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Red {
      get { return red_; }
      set {
        red_ = value;
      }
    }

    /// <summary>Field number for the "invitation_ts" field.</summary>
    public const int InvitationTsFieldNumber = 4;
    private ulong invitationTs_;
    /// <summary>
    /// 可再次接受邀请挑战时间点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong InvitationTs {
      get { return invitationTs_; }
      set {
        invitationTs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SweepInvitation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SweepInvitation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Status != other.Status) return false;
      if (Red != other.Red) return false;
      if (InvitationTs != other.InvitationTs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Red != 0) hash ^= Red.GetHashCode();
      if (InvitationTs != 0UL) hash ^= InvitationTs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
      if (Red != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Red);
      }
      if (InvitationTs != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(InvitationTs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Red != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Red);
      }
      if (InvitationTs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(InvitationTs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SweepInvitation other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Red != 0) {
        Red = other.Red;
      }
      if (other.InvitationTs != 0UL) {
        InvitationTs = other.InvitationTs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
          case 24: {
            Red = input.ReadInt32();
            break;
          }
          case 32: {
            InvitationTs = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 扫荡数据信息
  /// </summary>
  public sealed partial class PlayerSweepInfo : pb::IMessage<PlayerSweepInfo> {
    private static readonly pb::MessageParser<PlayerSweepInfo> _parser = new pb::MessageParser<PlayerSweepInfo>(() => new PlayerSweepInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerSweepInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[128]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSweepInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSweepInfo(PlayerSweepInfo other) : this() {
      freeChallengeTimes_ = other.freeChallengeTimes_;
      curSweepMainStageId_ = other.curSweepMainStageId_;
      finishSweepStageId_ = other.finishSweepStageId_;
      recoveryTs_ = other.recoveryTs_;
      invitations_ = other.invitations_.Clone();
      todaySweepTimes_ = other.todaySweepTimes_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSweepInfo Clone() {
      return new PlayerSweepInfo(this);
    }

    /// <summary>Field number for the "free_challenge_times" field.</summary>
    public const int FreeChallengeTimesFieldNumber = 1;
    private int freeChallengeTimes_;
    /// <summary>
    /// 剩余免费挑战次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeChallengeTimes {
      get { return freeChallengeTimes_; }
      set {
        freeChallengeTimes_ = value;
      }
    }

    /// <summary>Field number for the "cur_sweep_main_stage_id" field.</summary>
    public const int CurSweepMainStageIdFieldNumber = 2;
    private int curSweepMainStageId_;
    /// <summary>
    /// 当前大关卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurSweepMainStageId {
      get { return curSweepMainStageId_; }
      set {
        curSweepMainStageId_ = value;
      }
    }

    /// <summary>Field number for the "finish_sweep_stage_id" field.</summary>
    public const int FinishSweepStageIdFieldNumber = 3;
    private int finishSweepStageId_;
    /// <summary>
    /// 当前最新完成关卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinishSweepStageId {
      get { return finishSweepStageId_; }
      set {
        finishSweepStageId_ = value;
      }
    }

    /// <summary>Field number for the "recovery_ts" field.</summary>
    public const int RecoveryTsFieldNumber = 4;
    private ulong recoveryTs_;
    /// <summary>
    /// 恢复时间点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RecoveryTs {
      get { return recoveryTs_; }
      set {
        recoveryTs_ = value;
      }
    }

    /// <summary>Field number for the "invitations" field.</summary>
    public const int InvitationsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Stardom.SweepInvitation> _repeated_invitations_codec
        = pb::FieldCodec.ForMessage(50, global::Stardom.SweepInvitation.Parser);
    private readonly pbc::RepeatedField<global::Stardom.SweepInvitation> invitations_ = new pbc::RepeatedField<global::Stardom.SweepInvitation>();
    /// <summary>
    /// 片场邀请函信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.SweepInvitation> Invitations {
      get { return invitations_; }
    }

    /// <summary>Field number for the "today_sweep_times" field.</summary>
    public const int TodaySweepTimesFieldNumber = 7;
    private int todaySweepTimes_;
    /// <summary>
    /// 当日扫荡次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TodaySweepTimes {
      get { return todaySweepTimes_; }
      set {
        todaySweepTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerSweepInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerSweepInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FreeChallengeTimes != other.FreeChallengeTimes) return false;
      if (CurSweepMainStageId != other.CurSweepMainStageId) return false;
      if (FinishSweepStageId != other.FinishSweepStageId) return false;
      if (RecoveryTs != other.RecoveryTs) return false;
      if(!invitations_.Equals(other.invitations_)) return false;
      if (TodaySweepTimes != other.TodaySweepTimes) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FreeChallengeTimes != 0) hash ^= FreeChallengeTimes.GetHashCode();
      if (CurSweepMainStageId != 0) hash ^= CurSweepMainStageId.GetHashCode();
      if (FinishSweepStageId != 0) hash ^= FinishSweepStageId.GetHashCode();
      if (RecoveryTs != 0UL) hash ^= RecoveryTs.GetHashCode();
      hash ^= invitations_.GetHashCode();
      if (TodaySweepTimes != 0) hash ^= TodaySweepTimes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FreeChallengeTimes != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FreeChallengeTimes);
      }
      if (CurSweepMainStageId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurSweepMainStageId);
      }
      if (FinishSweepStageId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FinishSweepStageId);
      }
      if (RecoveryTs != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RecoveryTs);
      }
      invitations_.WriteTo(output, _repeated_invitations_codec);
      if (TodaySweepTimes != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TodaySweepTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FreeChallengeTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeChallengeTimes);
      }
      if (CurSweepMainStageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurSweepMainStageId);
      }
      if (FinishSweepStageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinishSweepStageId);
      }
      if (RecoveryTs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RecoveryTs);
      }
      size += invitations_.CalculateSize(_repeated_invitations_codec);
      if (TodaySweepTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TodaySweepTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerSweepInfo other) {
      if (other == null) {
        return;
      }
      if (other.FreeChallengeTimes != 0) {
        FreeChallengeTimes = other.FreeChallengeTimes;
      }
      if (other.CurSweepMainStageId != 0) {
        CurSweepMainStageId = other.CurSweepMainStageId;
      }
      if (other.FinishSweepStageId != 0) {
        FinishSweepStageId = other.FinishSweepStageId;
      }
      if (other.RecoveryTs != 0UL) {
        RecoveryTs = other.RecoveryTs;
      }
      invitations_.Add(other.invitations_);
      if (other.TodaySweepTimes != 0) {
        TodaySweepTimes = other.TodaySweepTimes;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FreeChallengeTimes = input.ReadInt32();
            break;
          }
          case 16: {
            CurSweepMainStageId = input.ReadInt32();
            break;
          }
          case 24: {
            FinishSweepStageId = input.ReadInt32();
            break;
          }
          case 32: {
            RecoveryTs = input.ReadUInt64();
            break;
          }
          case 50: {
            invitations_.AddEntriesFrom(input, _repeated_invitations_codec);
            break;
          }
          case 56: {
            TodaySweepTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 扫荡掉落
  /// </summary>
  public sealed partial class SweepResult : pb::IMessage<SweepResult> {
    private static readonly pb::MessageParser<SweepResult> _parser = new pb::MessageParser<SweepResult>(() => new SweepResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SweepResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[129]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SweepResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SweepResult(SweepResult other) : this() {
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SweepResult Clone() {
      return new SweepResult(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Stardom.ItemBaseInfo> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Stardom.ItemBaseInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.ItemBaseInfo> items_ = new pbc::RepeatedField<global::Stardom.ItemBaseInfo>();
    /// <summary>
    /// 掉落物品信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.ItemBaseInfo> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SweepResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SweepResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SweepResult other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 扫荡关卡数据
  /// </summary>
  public sealed partial class SweepStageInfo : pb::IMessage<SweepStageInfo> {
    private static readonly pb::MessageParser<SweepStageInfo> _parser = new pb::MessageParser<SweepStageInfo>(() => new SweepStageInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SweepStageInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[130]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SweepStageInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SweepStageInfo(SweepStageInfo other) : this() {
      sweepId_ = other.sweepId_;
      isChallengeable_ = other.isChallengeable_;
      isSweepable_ = other.isSweepable_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SweepStageInfo Clone() {
      return new SweepStageInfo(this);
    }

    /// <summary>Field number for the "sweep_id" field.</summary>
    public const int SweepIdFieldNumber = 1;
    private int sweepId_;
    /// <summary>
    /// 关卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SweepId {
      get { return sweepId_; }
      set {
        sweepId_ = value;
      }
    }

    /// <summary>Field number for the "is_challengeable" field.</summary>
    public const int IsChallengeableFieldNumber = 2;
    private int isChallengeable_;
    /// <summary>
    /// 可否挑战
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsChallengeable {
      get { return isChallengeable_; }
      set {
        isChallengeable_ = value;
      }
    }

    /// <summary>Field number for the "is_sweepable" field.</summary>
    public const int IsSweepableFieldNumber = 3;
    private int isSweepable_;
    /// <summary>
    /// 可否扫荡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsSweepable {
      get { return isSweepable_; }
      set {
        isSweepable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SweepStageInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SweepStageInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SweepId != other.SweepId) return false;
      if (IsChallengeable != other.IsChallengeable) return false;
      if (IsSweepable != other.IsSweepable) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SweepId != 0) hash ^= SweepId.GetHashCode();
      if (IsChallengeable != 0) hash ^= IsChallengeable.GetHashCode();
      if (IsSweepable != 0) hash ^= IsSweepable.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SweepId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SweepId);
      }
      if (IsChallengeable != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(IsChallengeable);
      }
      if (IsSweepable != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IsSweepable);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SweepId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SweepId);
      }
      if (IsChallengeable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsChallengeable);
      }
      if (IsSweepable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsSweepable);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SweepStageInfo other) {
      if (other == null) {
        return;
      }
      if (other.SweepId != 0) {
        SweepId = other.SweepId;
      }
      if (other.IsChallengeable != 0) {
        IsChallengeable = other.IsChallengeable;
      }
      if (other.IsSweepable != 0) {
        IsSweepable = other.IsSweepable;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SweepId = input.ReadInt32();
            break;
          }
          case 16: {
            IsChallengeable = input.ReadInt32();
            break;
          }
          case 24: {
            IsSweepable = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 扫荡特殊掉落信息
  /// </summary>
  public sealed partial class SweepSpInfo : pb::IMessage<SweepSpInfo> {
    private static readonly pb::MessageParser<SweepSpInfo> _parser = new pb::MessageParser<SweepSpInfo>(() => new SweepSpInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SweepSpInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[131]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SweepSpInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SweepSpInfo(SweepSpInfo other) : this() {
      sweepId_ = other.sweepId_;
      specialDropTimes_ = other.specialDropTimes_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SweepSpInfo Clone() {
      return new SweepSpInfo(this);
    }

    /// <summary>Field number for the "sweep_id" field.</summary>
    public const int SweepIdFieldNumber = 1;
    private int sweepId_;
    /// <summary>
    /// 关卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SweepId {
      get { return sweepId_; }
      set {
        sweepId_ = value;
      }
    }

    /// <summary>Field number for the "special_drop_times" field.</summary>
    public const int SpecialDropTimesFieldNumber = 4;
    private int specialDropTimes_;
    /// <summary>
    /// 特殊扫荡次数剩余
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpecialDropTimes {
      get { return specialDropTimes_; }
      set {
        specialDropTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SweepSpInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SweepSpInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SweepId != other.SweepId) return false;
      if (SpecialDropTimes != other.SpecialDropTimes) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SweepId != 0) hash ^= SweepId.GetHashCode();
      if (SpecialDropTimes != 0) hash ^= SpecialDropTimes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SweepId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SweepId);
      }
      if (SpecialDropTimes != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SpecialDropTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SweepId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SweepId);
      }
      if (SpecialDropTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpecialDropTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SweepSpInfo other) {
      if (other == null) {
        return;
      }
      if (other.SweepId != 0) {
        SweepId = other.SweepId;
      }
      if (other.SpecialDropTimes != 0) {
        SpecialDropTimes = other.SpecialDropTimes;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SweepId = input.ReadInt32();
            break;
          }
          case 32: {
            SpecialDropTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 在线活动状态
  /// </summary>
  public sealed partial class OpenSvrOnlineStatus : pb::IMessage<OpenSvrOnlineStatus> {
    private static readonly pb::MessageParser<OpenSvrOnlineStatus> _parser = new pb::MessageParser<OpenSvrOnlineStatus>(() => new OpenSvrOnlineStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenSvrOnlineStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[132]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenSvrOnlineStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenSvrOnlineStatus(OpenSvrOnlineStatus other) : this() {
      id_ = other.id_;
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenSvrOnlineStatus Clone() {
      return new OpenSvrOnlineStatus(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    /// <summary>
    /// 领取状态 0.未达到、1.进行中、2.可领取、3.已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenSvrOnlineStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenSvrOnlineStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenSvrOnlineStatus other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 七天登录奖励
  /// </summary>
  public sealed partial class OpenSvrSevenSignStatus : pb::IMessage<OpenSvrSevenSignStatus> {
    private static readonly pb::MessageParser<OpenSvrSevenSignStatus> _parser = new pb::MessageParser<OpenSvrSevenSignStatus>(() => new OpenSvrSevenSignStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenSvrSevenSignStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[133]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenSvrSevenSignStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenSvrSevenSignStatus(OpenSvrSevenSignStatus other) : this() {
      id_ = other.id_;
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenSvrSevenSignStatus Clone() {
      return new OpenSvrSevenSignStatus(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    /// <summary>
    /// 领取状态 0.不可领取、1.可签到领取、2.可补签、3.已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenSvrSevenSignStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenSvrSevenSignStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenSvrSevenSignStatus other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 七天成就状态
  /// </summary>
  public sealed partial class SevenAchievementStatus : pb::IMessage<SevenAchievementStatus> {
    private static readonly pb::MessageParser<SevenAchievementStatus> _parser = new pb::MessageParser<SevenAchievementStatus>(() => new SevenAchievementStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SevenAchievementStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[134]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SevenAchievementStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SevenAchievementStatus(SevenAchievementStatus other) : this() {
      id_ = other.id_;
      status_ = other.status_;
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SevenAchievementStatus Clone() {
      return new SevenAchievementStatus(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    /// <summary>
    /// 领取状态 0.可领取、1.未完成、、2.已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private int count_;
    /// <summary>
    /// 完成次数或者叫进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SevenAchievementStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SevenAchievementStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Status != other.Status) return false;
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SevenAchievementStatus other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 七天成就一天数据
  /// </summary>
  public sealed partial class SevenAchievementDayInfo : pb::IMessage<SevenAchievementDayInfo> {
    private static readonly pb::MessageParser<SevenAchievementDayInfo> _parser = new pb::MessageParser<SevenAchievementDayInfo>(() => new SevenAchievementDayInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SevenAchievementDayInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[135]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SevenAchievementDayInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SevenAchievementDayInfo(SevenAchievementDayInfo other) : this() {
      status_ = other.status_;
      info_ = other.info_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SevenAchievementDayInfo Clone() {
      return new SevenAchievementDayInfo(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    /// 状态: 0.未开启、1.开启了
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Stardom.SevenAchievementStatus> _repeated_info_codec
        = pb::FieldCodec.ForMessage(18, global::Stardom.SevenAchievementStatus.Parser);
    private readonly pbc::RepeatedField<global::Stardom.SevenAchievementStatus> info_ = new pbc::RepeatedField<global::Stardom.SevenAchievementStatus>();
    /// <summary>
    /// 任务信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.SevenAchievementStatus> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SevenAchievementDayInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SevenAchievementDayInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!info_.Equals(other.info_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= info_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      info_.WriteTo(output, _repeated_info_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SevenAchievementDayInfo other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      info_.Add(other.info_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 七日活动数据
  /// </summary>
  public sealed partial class SevenDaysActivityInfo : pb::IMessage<SevenDaysActivityInfo> {
    private static readonly pb::MessageParser<SevenDaysActivityInfo> _parser = new pb::MessageParser<SevenDaysActivityInfo>(() => new SevenDaysActivityInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SevenDaysActivityInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[136]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SevenDaysActivityInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SevenDaysActivityInfo(SevenDaysActivityInfo other) : this() {
      id_ = other.id_;
      openTime_ = other.openTime_;
      endTime_ = other.endTime_;
      isEndRewarded_ = other.isEndRewarded_;
      dayInfos_ = other.dayInfos_.Clone();
      livenesses_ = other.livenesses_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SevenDaysActivityInfo Clone() {
      return new SevenDaysActivityInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "open_time" field.</summary>
    public const int OpenTimeFieldNumber = 2;
    private ulong openTime_;
    /// <summary>
    /// 活动开启时间(客户端暂时用不到)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OpenTime {
      get { return openTime_; }
      set {
        openTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 3;
    private ulong endTime_;
    /// <summary>
    /// 活动结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "is_end_rewarded" field.</summary>
    public const int IsEndRewardedFieldNumber = 4;
    private int isEndRewarded_;
    /// <summary>
    /// 是否已经结束结算
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsEndRewarded {
      get { return isEndRewarded_; }
      set {
        isEndRewarded_ = value;
      }
    }

    /// <summary>Field number for the "day_infos" field.</summary>
    public const int DayInfosFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Stardom.SevenAchievementDayInfo> _repeated_dayInfos_codec
        = pb::FieldCodec.ForMessage(42, global::Stardom.SevenAchievementDayInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.SevenAchievementDayInfo> dayInfos_ = new pbc::RepeatedField<global::Stardom.SevenAchievementDayInfo>();
    /// <summary>
    /// 七天成就信息队列
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.SevenAchievementDayInfo> DayInfos {
      get { return dayInfos_; }
    }

    /// <summary>Field number for the "livenesses" field.</summary>
    public const int LivenessesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Stardom.SevenAchievementLivenessInfo> _repeated_livenesses_codec
        = pb::FieldCodec.ForMessage(50, global::Stardom.SevenAchievementLivenessInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.SevenAchievementLivenessInfo> livenesses_ = new pbc::RepeatedField<global::Stardom.SevenAchievementLivenessInfo>();
    /// <summary>
    /// 活跃度信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.SevenAchievementLivenessInfo> Livenesses {
      get { return livenesses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SevenDaysActivityInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SevenDaysActivityInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (OpenTime != other.OpenTime) return false;
      if (EndTime != other.EndTime) return false;
      if (IsEndRewarded != other.IsEndRewarded) return false;
      if(!dayInfos_.Equals(other.dayInfos_)) return false;
      if(!livenesses_.Equals(other.livenesses_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (OpenTime != 0UL) hash ^= OpenTime.GetHashCode();
      if (EndTime != 0UL) hash ^= EndTime.GetHashCode();
      if (IsEndRewarded != 0) hash ^= IsEndRewarded.GetHashCode();
      hash ^= dayInfos_.GetHashCode();
      hash ^= livenesses_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (OpenTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(OpenTime);
      }
      if (EndTime != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(EndTime);
      }
      if (IsEndRewarded != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(IsEndRewarded);
      }
      dayInfos_.WriteTo(output, _repeated_dayInfos_codec);
      livenesses_.WriteTo(output, _repeated_livenesses_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (OpenTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OpenTime);
      }
      if (EndTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndTime);
      }
      if (IsEndRewarded != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsEndRewarded);
      }
      size += dayInfos_.CalculateSize(_repeated_dayInfos_codec);
      size += livenesses_.CalculateSize(_repeated_livenesses_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SevenDaysActivityInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.OpenTime != 0UL) {
        OpenTime = other.OpenTime;
      }
      if (other.EndTime != 0UL) {
        EndTime = other.EndTime;
      }
      if (other.IsEndRewarded != 0) {
        IsEndRewarded = other.IsEndRewarded;
      }
      dayInfos_.Add(other.dayInfos_);
      livenesses_.Add(other.livenesses_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            OpenTime = input.ReadUInt64();
            break;
          }
          case 24: {
            EndTime = input.ReadUInt64();
            break;
          }
          case 32: {
            IsEndRewarded = input.ReadInt32();
            break;
          }
          case 42: {
            dayInfos_.AddEntriesFrom(input, _repeated_dayInfos_codec);
            break;
          }
          case 50: {
            livenesses_.AddEntriesFrom(input, _repeated_livenesses_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 七天成就活跃度状态
  /// </summary>
  public sealed partial class SevenAchievementLivenessInfo : pb::IMessage<SevenAchievementLivenessInfo> {
    private static readonly pb::MessageParser<SevenAchievementLivenessInfo> _parser = new pb::MessageParser<SevenAchievementLivenessInfo>(() => new SevenAchievementLivenessInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SevenAchievementLivenessInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[137]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SevenAchievementLivenessInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SevenAchievementLivenessInfo(SevenAchievementLivenessInfo other) : this() {
      degree_ = other.degree_;
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SevenAchievementLivenessInfo Clone() {
      return new SevenAchievementLivenessInfo(this);
    }

    /// <summary>Field number for the "degree" field.</summary>
    public const int DegreeFieldNumber = 1;
    private int degree_;
    /// <summary>
    /// 进度值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Degree {
      get { return degree_; }
      set {
        degree_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    /// <summary>
    /// 状态：0.未领取、1.已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SevenAchievementLivenessInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SevenAchievementLivenessInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Degree != other.Degree) return false;
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Degree != 0) hash ^= Degree.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Degree != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Degree);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Degree != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Degree);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SevenAchievementLivenessInfo other) {
      if (other == null) {
        return;
      }
      if (other.Degree != 0) {
        Degree = other.Degree;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Degree = input.ReadInt32();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 月签到
  /// </summary>
  public sealed partial class MonthlySignInfo : pb::IMessage<MonthlySignInfo> {
    private static readonly pb::MessageParser<MonthlySignInfo> _parser = new pb::MessageParser<MonthlySignInfo>(() => new MonthlySignInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonthlySignInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[138]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonthlySignInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonthlySignInfo(MonthlySignInfo other) : this() {
      day_ = other.day_;
      mood_ = other.mood_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonthlySignInfo Clone() {
      return new MonthlySignInfo(this);
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 1;
    private int day_;
    /// <summary>
    /// 号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    /// <summary>Field number for the "mood" field.</summary>
    public const int MoodFieldNumber = 2;
    private int mood_;
    /// <summary>
    /// 心情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mood {
      get { return mood_; }
      set {
        mood_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonthlySignInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonthlySignInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Day != other.Day) return false;
      if (Mood != other.Mood) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Day != 0) hash ^= Day.GetHashCode();
      if (Mood != 0) hash ^= Mood.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Day != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Day);
      }
      if (Mood != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Mood);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      if (Mood != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mood);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonthlySignInfo other) {
      if (other == null) {
        return;
      }
      if (other.Day != 0) {
        Day = other.Day;
      }
      if (other.Mood != 0) {
        Mood = other.Mood;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Day = input.ReadInt32();
            break;
          }
          case 16: {
            Mood = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 抽卡招募池信息客户端
  /// </summary>
  public sealed partial class RecruitInfo : pb::IMessage<RecruitInfo> {
    private static readonly pb::MessageParser<RecruitInfo> _parser = new pb::MessageParser<RecruitInfo>(() => new RecruitInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecruitInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[139]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecruitInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecruitInfo(RecruitInfo other) : this() {
      type_ = other.type_;
      guaranteedTimes_ = other.guaranteedTimes_;
      usedFreeTimes_ = other.usedFreeTimes_;
      treasureTimes_ = other.treasureTimes_;
      treasureId_ = other.treasureId_;
      todayDrewTimes_ = other.todayDrewTimes_;
      freeAfterTs_ = other.freeAfterTs_;
      allDrewTimes_ = other.allDrewTimes_;
      srGuaranteedTimes_ = other.srGuaranteedTimes_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecruitInfo Clone() {
      return new RecruitInfo(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    /// 招募类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "guaranteed_times" field.</summary>
    public const int GuaranteedTimesFieldNumber = 2;
    private int guaranteedTimes_;
    /// <summary>
    /// 保底次数(客户端用不到)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuaranteedTimes {
      get { return guaranteedTimes_; }
      set {
        guaranteedTimes_ = value;
      }
    }

    /// <summary>Field number for the "used_free_times" field.</summary>
    public const int UsedFreeTimesFieldNumber = 3;
    private int usedFreeTimes_;
    /// <summary>
    /// 已经使用免费次数(客户端用不到)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UsedFreeTimes {
      get { return usedFreeTimes_; }
      set {
        usedFreeTimes_ = value;
      }
    }

    /// <summary>Field number for the "treasure_times" field.</summary>
    public const int TreasureTimesFieldNumber = 4;
    private int treasureTimes_;
    /// <summary>
    /// 宝箱积累进度次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TreasureTimes {
      get { return treasureTimes_; }
      set {
        treasureTimes_ = value;
      }
    }

    /// <summary>Field number for the "treasure_id" field.</summary>
    public const int TreasureIdFieldNumber = 5;
    private int treasureId_;
    /// <summary>
    /// 宝箱id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TreasureId {
      get { return treasureId_; }
      set {
        treasureId_ = value;
      }
    }

    /// <summary>Field number for the "today_drew_times" field.</summary>
    public const int TodayDrewTimesFieldNumber = 6;
    private int todayDrewTimes_;
    /// <summary>
    /// 今日抽数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TodayDrewTimes {
      get { return todayDrewTimes_; }
      set {
        todayDrewTimes_ = value;
      }
    }

    /// <summary>Field number for the "free_after_ts" field.</summary>
    public const int FreeAfterTsFieldNumber = 7;
    private ulong freeAfterTs_;
    /// <summary>
    /// 0为没有免费，其余则是达到当前时间戳有免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FreeAfterTs {
      get { return freeAfterTs_; }
      set {
        freeAfterTs_ = value;
      }
    }

    /// <summary>Field number for the "all_drew_times" field.</summary>
    public const int AllDrewTimesFieldNumber = 8;
    private ulong allDrewTimes_;
    /// <summary>
    /// 总抽数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AllDrewTimes {
      get { return allDrewTimes_; }
      set {
        allDrewTimes_ = value;
      }
    }

    /// <summary>Field number for the "sr_guaranteed_times" field.</summary>
    public const int SrGuaranteedTimesFieldNumber = 9;
    private int srGuaranteedTimes_;
    /// <summary>
    /// sr保底次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SrGuaranteedTimes {
      get { return srGuaranteedTimes_; }
      set {
        srGuaranteedTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecruitInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecruitInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (GuaranteedTimes != other.GuaranteedTimes) return false;
      if (UsedFreeTimes != other.UsedFreeTimes) return false;
      if (TreasureTimes != other.TreasureTimes) return false;
      if (TreasureId != other.TreasureId) return false;
      if (TodayDrewTimes != other.TodayDrewTimes) return false;
      if (FreeAfterTs != other.FreeAfterTs) return false;
      if (AllDrewTimes != other.AllDrewTimes) return false;
      if (SrGuaranteedTimes != other.SrGuaranteedTimes) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (GuaranteedTimes != 0) hash ^= GuaranteedTimes.GetHashCode();
      if (UsedFreeTimes != 0) hash ^= UsedFreeTimes.GetHashCode();
      if (TreasureTimes != 0) hash ^= TreasureTimes.GetHashCode();
      if (TreasureId != 0) hash ^= TreasureId.GetHashCode();
      if (TodayDrewTimes != 0) hash ^= TodayDrewTimes.GetHashCode();
      if (FreeAfterTs != 0UL) hash ^= FreeAfterTs.GetHashCode();
      if (AllDrewTimes != 0UL) hash ^= AllDrewTimes.GetHashCode();
      if (SrGuaranteedTimes != 0) hash ^= SrGuaranteedTimes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (GuaranteedTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GuaranteedTimes);
      }
      if (UsedFreeTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UsedFreeTimes);
      }
      if (TreasureTimes != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TreasureTimes);
      }
      if (TreasureId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TreasureId);
      }
      if (TodayDrewTimes != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TodayDrewTimes);
      }
      if (FreeAfterTs != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(FreeAfterTs);
      }
      if (AllDrewTimes != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(AllDrewTimes);
      }
      if (SrGuaranteedTimes != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SrGuaranteedTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (GuaranteedTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuaranteedTimes);
      }
      if (UsedFreeTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UsedFreeTimes);
      }
      if (TreasureTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TreasureTimes);
      }
      if (TreasureId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TreasureId);
      }
      if (TodayDrewTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TodayDrewTimes);
      }
      if (FreeAfterTs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FreeAfterTs);
      }
      if (AllDrewTimes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AllDrewTimes);
      }
      if (SrGuaranteedTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SrGuaranteedTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecruitInfo other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.GuaranteedTimes != 0) {
        GuaranteedTimes = other.GuaranteedTimes;
      }
      if (other.UsedFreeTimes != 0) {
        UsedFreeTimes = other.UsedFreeTimes;
      }
      if (other.TreasureTimes != 0) {
        TreasureTimes = other.TreasureTimes;
      }
      if (other.TreasureId != 0) {
        TreasureId = other.TreasureId;
      }
      if (other.TodayDrewTimes != 0) {
        TodayDrewTimes = other.TodayDrewTimes;
      }
      if (other.FreeAfterTs != 0UL) {
        FreeAfterTs = other.FreeAfterTs;
      }
      if (other.AllDrewTimes != 0UL) {
        AllDrewTimes = other.AllDrewTimes;
      }
      if (other.SrGuaranteedTimes != 0) {
        SrGuaranteedTimes = other.SrGuaranteedTimes;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            GuaranteedTimes = input.ReadInt32();
            break;
          }
          case 24: {
            UsedFreeTimes = input.ReadInt32();
            break;
          }
          case 32: {
            TreasureTimes = input.ReadInt32();
            break;
          }
          case 40: {
            TreasureId = input.ReadInt32();
            break;
          }
          case 48: {
            TodayDrewTimes = input.ReadInt32();
            break;
          }
          case 56: {
            FreeAfterTs = input.ReadUInt64();
            break;
          }
          case 64: {
            AllDrewTimes = input.ReadUInt64();
            break;
          }
          case 72: {
            SrGuaranteedTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 课程小节信息
  /// </summary>
  public sealed partial class LessonInfo : pb::IMessage<LessonInfo> {
    private static readonly pb::MessageParser<LessonInfo> _parser = new pb::MessageParser<LessonInfo>(() => new LessonInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LessonInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[140]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LessonInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LessonInfo(LessonInfo other) : this() {
      subLessonId_ = other.subLessonId_;
      lessonPassed_ = other.lessonPassed_;
      lessonCompleted_ = other.lessonCompleted_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LessonInfo Clone() {
      return new LessonInfo(this);
    }

    /// <summary>Field number for the "sub_lesson_id" field.</summary>
    public const int SubLessonIdFieldNumber = 1;
    private int subLessonId_;
    /// <summary>
    /// 小节项目子id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubLessonId {
      get { return subLessonId_; }
      set {
        subLessonId_ = value;
      }
    }

    /// <summary>Field number for the "lesson_passed" field.</summary>
    public const int LessonPassedFieldNumber = 2;
    private int lessonPassed_;
    /// <summary>
    /// 是否正确，小游戏中是正确率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LessonPassed {
      get { return lessonPassed_; }
      set {
        lessonPassed_ = value;
      }
    }

    /// <summary>Field number for the "lesson_completed" field.</summary>
    public const int LessonCompletedFieldNumber = 3;
    private int lessonCompleted_;
    /// <summary>
    /// 是否完成小节
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LessonCompleted {
      get { return lessonCompleted_; }
      set {
        lessonCompleted_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LessonInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LessonInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubLessonId != other.SubLessonId) return false;
      if (LessonPassed != other.LessonPassed) return false;
      if (LessonCompleted != other.LessonCompleted) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SubLessonId != 0) hash ^= SubLessonId.GetHashCode();
      if (LessonPassed != 0) hash ^= LessonPassed.GetHashCode();
      if (LessonCompleted != 0) hash ^= LessonCompleted.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SubLessonId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SubLessonId);
      }
      if (LessonPassed != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LessonPassed);
      }
      if (LessonCompleted != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LessonCompleted);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubLessonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubLessonId);
      }
      if (LessonPassed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LessonPassed);
      }
      if (LessonCompleted != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LessonCompleted);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LessonInfo other) {
      if (other == null) {
        return;
      }
      if (other.SubLessonId != 0) {
        SubLessonId = other.SubLessonId;
      }
      if (other.LessonPassed != 0) {
        LessonPassed = other.LessonPassed;
      }
      if (other.LessonCompleted != 0) {
        LessonCompleted = other.LessonCompleted;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SubLessonId = input.ReadInt32();
            break;
          }
          case 16: {
            LessonPassed = input.ReadInt32();
            break;
          }
          case 24: {
            LessonCompleted = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CourseAchievement : pb::IMessage<CourseAchievement> {
    private static readonly pb::MessageParser<CourseAchievement> _parser = new pb::MessageParser<CourseAchievement>(() => new CourseAchievement());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CourseAchievement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[141]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CourseAchievement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CourseAchievement(CourseAchievement other) : this() {
      id_ = other.id_;
      count1_ = other.count1_;
      count2_ = other.count2_;
      isFinished_ = other.isFinished_;
      isRewarded_ = other.isRewarded_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CourseAchievement Clone() {
      return new CourseAchievement(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 条件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "count1" field.</summary>
    public const int Count1FieldNumber = 2;
    private int count1_;
    /// <summary>
    /// 达到个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count1 {
      get { return count1_; }
      set {
        count1_ = value;
      }
    }

    /// <summary>Field number for the "count2" field.</summary>
    public const int Count2FieldNumber = 3;
    private int count2_;
    /// <summary>
    /// 达到个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count2 {
      get { return count2_; }
      set {
        count2_ = value;
      }
    }

    /// <summary>Field number for the "is_finished" field.</summary>
    public const int IsFinishedFieldNumber = 4;
    private int isFinished_;
    /// <summary>
    /// 是否完成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFinished {
      get { return isFinished_; }
      set {
        isFinished_ = value;
      }
    }

    /// <summary>Field number for the "is_rewarded" field.</summary>
    public const int IsRewardedFieldNumber = 5;
    private int isRewarded_;
    /// <summary>
    /// 是否领奖
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsRewarded {
      get { return isRewarded_; }
      set {
        isRewarded_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CourseAchievement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CourseAchievement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Count1 != other.Count1) return false;
      if (Count2 != other.Count2) return false;
      if (IsFinished != other.IsFinished) return false;
      if (IsRewarded != other.IsRewarded) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Count1 != 0) hash ^= Count1.GetHashCode();
      if (Count2 != 0) hash ^= Count2.GetHashCode();
      if (IsFinished != 0) hash ^= IsFinished.GetHashCode();
      if (IsRewarded != 0) hash ^= IsRewarded.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Count1 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count1);
      }
      if (Count2 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count2);
      }
      if (IsFinished != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(IsFinished);
      }
      if (IsRewarded != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(IsRewarded);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Count1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count1);
      }
      if (Count2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count2);
      }
      if (IsFinished != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFinished);
      }
      if (IsRewarded != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsRewarded);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CourseAchievement other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Count1 != 0) {
        Count1 = other.Count1;
      }
      if (other.Count2 != 0) {
        Count2 = other.Count2;
      }
      if (other.IsFinished != 0) {
        IsFinished = other.IsFinished;
      }
      if (other.IsRewarded != 0) {
        IsRewarded = other.IsRewarded;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Count1 = input.ReadInt32();
            break;
          }
          case 24: {
            Count2 = input.ReadInt32();
            break;
          }
          case 32: {
            IsFinished = input.ReadInt32();
            break;
          }
          case 40: {
            IsRewarded = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 课程信息
  /// </summary>
  public sealed partial class CourseInfo : pb::IMessage<CourseInfo> {
    private static readonly pb::MessageParser<CourseInfo> _parser = new pb::MessageParser<CourseInfo>(() => new CourseInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CourseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[142]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CourseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CourseInfo(CourseInfo other) : this() {
      courseId_ = other.courseId_;
      courseLevel_ = other.courseLevel_;
      coursePlayedTimes_ = other.coursePlayedTimes_;
      courseCompletedTimes_ = other.courseCompletedTimes_;
      courseDayTimes_ = other.courseDayTimes_;
      coursePlotSeen_ = other.coursePlotSeen_;
      lessonId_ = other.lessonId_;
      isTodayToken_ = other.isTodayToken_;
      record1_ = other.record1_;
      record2_ = other.record2_;
      record3_ = other.record3_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CourseInfo Clone() {
      return new CourseInfo(this);
    }

    /// <summary>Field number for the "course_id" field.</summary>
    public const int CourseIdFieldNumber = 1;
    private int courseId_;
    /// <summary>
    /// 课程id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CourseId {
      get { return courseId_; }
      set {
        courseId_ = value;
      }
    }

    /// <summary>Field number for the "course_level" field.</summary>
    public const int CourseLevelFieldNumber = 2;
    private int courseLevel_;
    /// <summary>
    /// 课程等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CourseLevel {
      get { return courseLevel_; }
      set {
        courseLevel_ = value;
      }
    }

    /// <summary>Field number for the "course_played_times" field.</summary>
    public const int CoursePlayedTimesFieldNumber = 3;
    private int coursePlayedTimes_;
    /// <summary>
    /// 课程上过次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CoursePlayedTimes {
      get { return coursePlayedTimes_; }
      set {
        coursePlayedTimes_ = value;
      }
    }

    /// <summary>Field number for the "course_completed_times" field.</summary>
    public const int CourseCompletedTimesFieldNumber = 4;
    private int courseCompletedTimes_;
    /// <summary>
    /// 课程100完成率次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CourseCompletedTimes {
      get { return courseCompletedTimes_; }
      set {
        courseCompletedTimes_ = value;
      }
    }

    /// <summary>Field number for the "course_day_times" field.</summary>
    public const int CourseDayTimesFieldNumber = 5;
    private int courseDayTimes_;
    /// <summary>
    /// 课程上过天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CourseDayTimes {
      get { return courseDayTimes_; }
      set {
        courseDayTimes_ = value;
      }
    }

    /// <summary>Field number for the "course_plot_seen" field.</summary>
    public const int CoursePlotSeenFieldNumber = 6;
    private int coursePlotSeen_;
    /// <summary>
    /// 首次剧情已经播放
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CoursePlotSeen {
      get { return coursePlotSeen_; }
      set {
        coursePlotSeen_ = value;
      }
    }

    /// <summary>Field number for the "lesson_id" field.</summary>
    public const int LessonIdFieldNumber = 7;
    private int lessonId_;
    /// <summary>
    /// 当前小节id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LessonId {
      get { return lessonId_; }
      set {
        lessonId_ = value;
      }
    }

    /// <summary>Field number for the "is_today_token" field.</summary>
    public const int IsTodayTokenFieldNumber = 8;
    private int isTodayToken_;
    /// <summary>
    /// 是否今日上过课程
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsTodayToken {
      get { return isTodayToken_; }
      set {
        isTodayToken_ = value;
      }
    }

    /// <summary>Field number for the "record1" field.</summary>
    public const int Record1FieldNumber = 9;
    private int record1_;
    /// <summary>
    /// 完成度/分数（简单模式）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Record1 {
      get { return record1_; }
      set {
        record1_ = value;
      }
    }

    /// <summary>Field number for the "record2" field.</summary>
    public const int Record2FieldNumber = 10;
    private int record2_;
    /// <summary>
    /// 分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Record2 {
      get { return record2_; }
      set {
        record2_ = value;
      }
    }

    /// <summary>Field number for the "record3" field.</summary>
    public const int Record3FieldNumber = 11;
    private int record3_;
    /// <summary>
    /// 连击数（简单模式）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Record3 {
      get { return record3_; }
      set {
        record3_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CourseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CourseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CourseId != other.CourseId) return false;
      if (CourseLevel != other.CourseLevel) return false;
      if (CoursePlayedTimes != other.CoursePlayedTimes) return false;
      if (CourseCompletedTimes != other.CourseCompletedTimes) return false;
      if (CourseDayTimes != other.CourseDayTimes) return false;
      if (CoursePlotSeen != other.CoursePlotSeen) return false;
      if (LessonId != other.LessonId) return false;
      if (IsTodayToken != other.IsTodayToken) return false;
      if (Record1 != other.Record1) return false;
      if (Record2 != other.Record2) return false;
      if (Record3 != other.Record3) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CourseId != 0) hash ^= CourseId.GetHashCode();
      if (CourseLevel != 0) hash ^= CourseLevel.GetHashCode();
      if (CoursePlayedTimes != 0) hash ^= CoursePlayedTimes.GetHashCode();
      if (CourseCompletedTimes != 0) hash ^= CourseCompletedTimes.GetHashCode();
      if (CourseDayTimes != 0) hash ^= CourseDayTimes.GetHashCode();
      if (CoursePlotSeen != 0) hash ^= CoursePlotSeen.GetHashCode();
      if (LessonId != 0) hash ^= LessonId.GetHashCode();
      if (IsTodayToken != 0) hash ^= IsTodayToken.GetHashCode();
      if (Record1 != 0) hash ^= Record1.GetHashCode();
      if (Record2 != 0) hash ^= Record2.GetHashCode();
      if (Record3 != 0) hash ^= Record3.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CourseId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CourseId);
      }
      if (CourseLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CourseLevel);
      }
      if (CoursePlayedTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CoursePlayedTimes);
      }
      if (CourseCompletedTimes != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CourseCompletedTimes);
      }
      if (CourseDayTimes != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CourseDayTimes);
      }
      if (CoursePlotSeen != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CoursePlotSeen);
      }
      if (LessonId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LessonId);
      }
      if (IsTodayToken != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(IsTodayToken);
      }
      if (Record1 != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Record1);
      }
      if (Record2 != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Record2);
      }
      if (Record3 != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Record3);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CourseId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CourseId);
      }
      if (CourseLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CourseLevel);
      }
      if (CoursePlayedTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CoursePlayedTimes);
      }
      if (CourseCompletedTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CourseCompletedTimes);
      }
      if (CourseDayTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CourseDayTimes);
      }
      if (CoursePlotSeen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CoursePlotSeen);
      }
      if (LessonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LessonId);
      }
      if (IsTodayToken != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsTodayToken);
      }
      if (Record1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Record1);
      }
      if (Record2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Record2);
      }
      if (Record3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Record3);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CourseInfo other) {
      if (other == null) {
        return;
      }
      if (other.CourseId != 0) {
        CourseId = other.CourseId;
      }
      if (other.CourseLevel != 0) {
        CourseLevel = other.CourseLevel;
      }
      if (other.CoursePlayedTimes != 0) {
        CoursePlayedTimes = other.CoursePlayedTimes;
      }
      if (other.CourseCompletedTimes != 0) {
        CourseCompletedTimes = other.CourseCompletedTimes;
      }
      if (other.CourseDayTimes != 0) {
        CourseDayTimes = other.CourseDayTimes;
      }
      if (other.CoursePlotSeen != 0) {
        CoursePlotSeen = other.CoursePlotSeen;
      }
      if (other.LessonId != 0) {
        LessonId = other.LessonId;
      }
      if (other.IsTodayToken != 0) {
        IsTodayToken = other.IsTodayToken;
      }
      if (other.Record1 != 0) {
        Record1 = other.Record1;
      }
      if (other.Record2 != 0) {
        Record2 = other.Record2;
      }
      if (other.Record3 != 0) {
        Record3 = other.Record3;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CourseId = input.ReadInt32();
            break;
          }
          case 16: {
            CourseLevel = input.ReadInt32();
            break;
          }
          case 24: {
            CoursePlayedTimes = input.ReadInt32();
            break;
          }
          case 32: {
            CourseCompletedTimes = input.ReadInt32();
            break;
          }
          case 40: {
            CourseDayTimes = input.ReadInt32();
            break;
          }
          case 48: {
            CoursePlotSeen = input.ReadInt32();
            break;
          }
          case 56: {
            LessonId = input.ReadInt32();
            break;
          }
          case 64: {
            IsTodayToken = input.ReadInt32();
            break;
          }
          case 72: {
            Record1 = input.ReadInt32();
            break;
          }
          case 80: {
            Record2 = input.ReadInt32();
            break;
          }
          case 88: {
            Record3 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 课程乐谱
  /// </summary>
  public sealed partial class CourseSheet : pb::IMessage<CourseSheet> {
    private static readonly pb::MessageParser<CourseSheet> _parser = new pb::MessageParser<CourseSheet>(() => new CourseSheet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CourseSheet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[143]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CourseSheet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CourseSheet(CourseSheet other) : this() {
      sheetId_ = other.sheetId_;
      sheetPlayedTimes_ = other.sheetPlayedTimes_;
      sheetRecord1_ = other.sheetRecord1_;
      sheetRecord2_ = other.sheetRecord2_;
      sheetRecord3_ = other.sheetRecord3_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CourseSheet Clone() {
      return new CourseSheet(this);
    }

    /// <summary>Field number for the "sheet_id" field.</summary>
    public const int SheetIdFieldNumber = 1;
    private int sheetId_;
    /// <summary>
    /// 乐谱id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SheetId {
      get { return sheetId_; }
      set {
        sheetId_ = value;
      }
    }

    /// <summary>Field number for the "sheet_played_times" field.</summary>
    public const int SheetPlayedTimesFieldNumber = 2;
    private int sheetPlayedTimes_;
    /// <summary>
    /// 乐谱弹奏次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SheetPlayedTimes {
      get { return sheetPlayedTimes_; }
      set {
        sheetPlayedTimes_ = value;
      }
    }

    /// <summary>Field number for the "sheet_record1" field.</summary>
    public const int SheetRecord1FieldNumber = 3;
    private int sheetRecord1_;
    /// <summary>
    /// 完成度、准确度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SheetRecord1 {
      get { return sheetRecord1_; }
      set {
        sheetRecord1_ = value;
      }
    }

    /// <summary>Field number for the "sheet_record2" field.</summary>
    public const int SheetRecord2FieldNumber = 4;
    private int sheetRecord2_;
    /// <summary>
    /// 分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SheetRecord2 {
      get { return sheetRecord2_; }
      set {
        sheetRecord2_ = value;
      }
    }

    /// <summary>Field number for the "sheet_record3" field.</summary>
    public const int SheetRecord3FieldNumber = 5;
    private int sheetRecord3_;
    /// <summary>
    /// 连击数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SheetRecord3 {
      get { return sheetRecord3_; }
      set {
        sheetRecord3_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CourseSheet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CourseSheet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SheetId != other.SheetId) return false;
      if (SheetPlayedTimes != other.SheetPlayedTimes) return false;
      if (SheetRecord1 != other.SheetRecord1) return false;
      if (SheetRecord2 != other.SheetRecord2) return false;
      if (SheetRecord3 != other.SheetRecord3) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SheetId != 0) hash ^= SheetId.GetHashCode();
      if (SheetPlayedTimes != 0) hash ^= SheetPlayedTimes.GetHashCode();
      if (SheetRecord1 != 0) hash ^= SheetRecord1.GetHashCode();
      if (SheetRecord2 != 0) hash ^= SheetRecord2.GetHashCode();
      if (SheetRecord3 != 0) hash ^= SheetRecord3.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SheetId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SheetId);
      }
      if (SheetPlayedTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SheetPlayedTimes);
      }
      if (SheetRecord1 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SheetRecord1);
      }
      if (SheetRecord2 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SheetRecord2);
      }
      if (SheetRecord3 != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SheetRecord3);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SheetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SheetId);
      }
      if (SheetPlayedTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SheetPlayedTimes);
      }
      if (SheetRecord1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SheetRecord1);
      }
      if (SheetRecord2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SheetRecord2);
      }
      if (SheetRecord3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SheetRecord3);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CourseSheet other) {
      if (other == null) {
        return;
      }
      if (other.SheetId != 0) {
        SheetId = other.SheetId;
      }
      if (other.SheetPlayedTimes != 0) {
        SheetPlayedTimes = other.SheetPlayedTimes;
      }
      if (other.SheetRecord1 != 0) {
        SheetRecord1 = other.SheetRecord1;
      }
      if (other.SheetRecord2 != 0) {
        SheetRecord2 = other.SheetRecord2;
      }
      if (other.SheetRecord3 != 0) {
        SheetRecord3 = other.SheetRecord3;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SheetId = input.ReadInt32();
            break;
          }
          case 16: {
            SheetPlayedTimes = input.ReadInt32();
            break;
          }
          case 24: {
            SheetRecord1 = input.ReadInt32();
            break;
          }
          case 32: {
            SheetRecord2 = input.ReadInt32();
            break;
          }
          case 40: {
            SheetRecord3 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 通告地点等级完成次数奖励状态
  /// </summary>
  public sealed partial class PlaceRewardStatus : pb::IMessage<PlaceRewardStatus> {
    private static readonly pb::MessageParser<PlaceRewardStatus> _parser = new pb::MessageParser<PlaceRewardStatus>(() => new PlaceRewardStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlaceRewardStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[144]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaceRewardStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaceRewardStatus(PlaceRewardStatus other) : this() {
      level_ = other.level_;
      reward1_ = other.reward1_;
      reward2_ = other.reward2_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaceRewardStatus Clone() {
      return new PlaceRewardStatus(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "reward_1" field.</summary>
    public const int Reward1FieldNumber = 2;
    private int reward1_;
    /// <summary>
    /// 阶段1奖励：0.未领取、1.已经领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reward1 {
      get { return reward1_; }
      set {
        reward1_ = value;
      }
    }

    /// <summary>Field number for the "reward_2" field.</summary>
    public const int Reward2FieldNumber = 3;
    private int reward2_;
    /// <summary>
    /// 阶段2奖励：0.未领取、1.已经领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reward2 {
      get { return reward2_; }
      set {
        reward2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlaceRewardStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlaceRewardStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (Reward1 != other.Reward1) return false;
      if (Reward2 != other.Reward2) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Reward1 != 0) hash ^= Reward1.GetHashCode();
      if (Reward2 != 0) hash ^= Reward2.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (Reward1 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Reward1);
      }
      if (Reward2 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Reward2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Reward1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reward1);
      }
      if (Reward2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reward2);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlaceRewardStatus other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Reward1 != 0) {
        Reward1 = other.Reward1;
      }
      if (other.Reward2 != 0) {
        Reward2 = other.Reward2;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 16: {
            Reward1 = input.ReadInt32();
            break;
          }
          case 24: {
            Reward2 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 通告地点信息
  /// </summary>
  public sealed partial class PlaceInfo : pb::IMessage<PlaceInfo> {
    private static readonly pb::MessageParser<PlaceInfo> _parser = new pb::MessageParser<PlaceInfo>(() => new PlaceInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlaceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[145]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaceInfo(PlaceInfo other) : this() {
      placeId_ = other.placeId_;
      jobLevel_ = other.jobLevel_;
      jobId_ = other.jobId_;
      endTime_ = other.endTime_;
      workerIds_ = other.workerIds_.Clone();
      finishJobTimes_ = other.finishJobTimes_;
      passInterview_ = other.passInterview_;
      rewardStatus_ = other.rewardStatus_.Clone();
      allFinishJobTimes_ = other.allFinishJobTimes_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaceInfo Clone() {
      return new PlaceInfo(this);
    }

    /// <summary>Field number for the "place_id" field.</summary>
    public const int PlaceIdFieldNumber = 1;
    private int placeId_;
    /// <summary>
    /// 所属地点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlaceId {
      get { return placeId_; }
      set {
        placeId_ = value;
      }
    }

    /// <summary>Field number for the "job_level" field.</summary>
    public const int JobLevelFieldNumber = 2;
    private int jobLevel_;
    /// <summary>
    /// 通告等级，0代表没有通过首次面试
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JobLevel {
      get { return jobLevel_; }
      set {
        jobLevel_ = value;
      }
    }

    /// <summary>Field number for the "job_id" field.</summary>
    public const int JobIdFieldNumber = 3;
    private int jobId_;
    /// <summary>
    /// 通告id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JobId {
      get { return jobId_; }
      set {
        jobId_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 4;
    private ulong endTime_;
    /// <summary>
    /// 0为未开始，小于当前时间为已完成，大于当前时间为进行中(领取之后会重新随机)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "worker_ids" field.</summary>
    public const int WorkerIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<ulong> _repeated_workerIds_codec
        = pb::FieldCodec.ForUInt64(42);
    private readonly pbc::RepeatedField<ulong> workerIds_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// 安排的角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> WorkerIds {
      get { return workerIds_; }
    }

    /// <summary>Field number for the "finish_job_times" field.</summary>
    public const int FinishJobTimesFieldNumber = 6;
    private int finishJobTimes_;
    /// <summary>
    /// 当前等级下完成的次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinishJobTimes {
      get { return finishJobTimes_; }
      set {
        finishJobTimes_ = value;
      }
    }

    /// <summary>Field number for the "pass_interview" field.</summary>
    public const int PassInterviewFieldNumber = 7;
    private int passInterview_;
    /// <summary>
    /// 0未通过。1通过
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PassInterview {
      get { return passInterview_; }
      set {
        passInterview_ = value;
      }
    }

    /// <summary>Field number for the "reward_status" field.</summary>
    public const int RewardStatusFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Stardom.PlaceRewardStatus> _repeated_rewardStatus_codec
        = pb::FieldCodec.ForMessage(66, global::Stardom.PlaceRewardStatus.Parser);
    private readonly pbc::RepeatedField<global::Stardom.PlaceRewardStatus> rewardStatus_ = new pbc::RepeatedField<global::Stardom.PlaceRewardStatus>();
    /// <summary>
    /// 通告奖励状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.PlaceRewardStatus> RewardStatus {
      get { return rewardStatus_; }
    }

    /// <summary>Field number for the "all_finish_job_times" field.</summary>
    public const int AllFinishJobTimesFieldNumber = 9;
    private int allFinishJobTimes_;
    /// <summary>
    /// 总的通关次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AllFinishJobTimes {
      get { return allFinishJobTimes_; }
      set {
        allFinishJobTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlaceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlaceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlaceId != other.PlaceId) return false;
      if (JobLevel != other.JobLevel) return false;
      if (JobId != other.JobId) return false;
      if (EndTime != other.EndTime) return false;
      if(!workerIds_.Equals(other.workerIds_)) return false;
      if (FinishJobTimes != other.FinishJobTimes) return false;
      if (PassInterview != other.PassInterview) return false;
      if(!rewardStatus_.Equals(other.rewardStatus_)) return false;
      if (AllFinishJobTimes != other.AllFinishJobTimes) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlaceId != 0) hash ^= PlaceId.GetHashCode();
      if (JobLevel != 0) hash ^= JobLevel.GetHashCode();
      if (JobId != 0) hash ^= JobId.GetHashCode();
      if (EndTime != 0UL) hash ^= EndTime.GetHashCode();
      hash ^= workerIds_.GetHashCode();
      if (FinishJobTimes != 0) hash ^= FinishJobTimes.GetHashCode();
      if (PassInterview != 0) hash ^= PassInterview.GetHashCode();
      hash ^= rewardStatus_.GetHashCode();
      if (AllFinishJobTimes != 0) hash ^= AllFinishJobTimes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlaceId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlaceId);
      }
      if (JobLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(JobLevel);
      }
      if (JobId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(JobId);
      }
      if (EndTime != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(EndTime);
      }
      workerIds_.WriteTo(output, _repeated_workerIds_codec);
      if (FinishJobTimes != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FinishJobTimes);
      }
      if (PassInterview != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PassInterview);
      }
      rewardStatus_.WriteTo(output, _repeated_rewardStatus_codec);
      if (AllFinishJobTimes != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(AllFinishJobTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlaceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlaceId);
      }
      if (JobLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JobLevel);
      }
      if (JobId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JobId);
      }
      if (EndTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndTime);
      }
      size += workerIds_.CalculateSize(_repeated_workerIds_codec);
      if (FinishJobTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinishJobTimes);
      }
      if (PassInterview != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PassInterview);
      }
      size += rewardStatus_.CalculateSize(_repeated_rewardStatus_codec);
      if (AllFinishJobTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AllFinishJobTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlaceInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlaceId != 0) {
        PlaceId = other.PlaceId;
      }
      if (other.JobLevel != 0) {
        JobLevel = other.JobLevel;
      }
      if (other.JobId != 0) {
        JobId = other.JobId;
      }
      if (other.EndTime != 0UL) {
        EndTime = other.EndTime;
      }
      workerIds_.Add(other.workerIds_);
      if (other.FinishJobTimes != 0) {
        FinishJobTimes = other.FinishJobTimes;
      }
      if (other.PassInterview != 0) {
        PassInterview = other.PassInterview;
      }
      rewardStatus_.Add(other.rewardStatus_);
      if (other.AllFinishJobTimes != 0) {
        AllFinishJobTimes = other.AllFinishJobTimes;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlaceId = input.ReadInt32();
            break;
          }
          case 16: {
            JobLevel = input.ReadInt32();
            break;
          }
          case 24: {
            JobId = input.ReadInt32();
            break;
          }
          case 32: {
            EndTime = input.ReadUInt64();
            break;
          }
          case 42:
          case 40: {
            workerIds_.AddEntriesFrom(input, _repeated_workerIds_codec);
            break;
          }
          case 48: {
            FinishJobTimes = input.ReadInt32();
            break;
          }
          case 56: {
            PassInterview = input.ReadInt32();
            break;
          }
          case 66: {
            rewardStatus_.AddEntriesFrom(input, _repeated_rewardStatus_codec);
            break;
          }
          case 72: {
            AllFinishJobTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 地图格子
  /// </summary>
  public sealed partial class TowerMapGrid : pb::IMessage<TowerMapGrid> {
    private static readonly pb::MessageParser<TowerMapGrid> _parser = new pb::MessageParser<TowerMapGrid>(() => new TowerMapGrid());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TowerMapGrid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[146]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TowerMapGrid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TowerMapGrid(TowerMapGrid other) : this() {
      gridId_ = other.gridId_;
      eventId_ = other.eventId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TowerMapGrid Clone() {
      return new TowerMapGrid(this);
    }

    /// <summary>Field number for the "grid_id" field.</summary>
    public const int GridIdFieldNumber = 1;
    private int gridId_;
    /// <summary>
    /// 格子id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GridId {
      get { return gridId_; }
      set {
        gridId_ = value;
      }
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 2;
    private int eventId_;
    /// <summary>
    /// 对应的事件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventId {
      get { return eventId_; }
      set {
        eventId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TowerMapGrid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TowerMapGrid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GridId != other.GridId) return false;
      if (EventId != other.EventId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GridId != 0) hash ^= GridId.GetHashCode();
      if (EventId != 0) hash ^= EventId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GridId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GridId);
      }
      if (EventId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EventId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GridId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GridId);
      }
      if (EventId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TowerMapGrid other) {
      if (other == null) {
        return;
      }
      if (other.GridId != 0) {
        GridId = other.GridId;
      }
      if (other.EventId != 0) {
        EventId = other.EventId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GridId = input.ReadInt32();
            break;
          }
          case 16: {
            EventId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 爬塔地图
  /// </summary>
  public sealed partial class TowerMapInfo : pb::IMessage<TowerMapInfo> {
    private static readonly pb::MessageParser<TowerMapInfo> _parser = new pb::MessageParser<TowerMapInfo>(() => new TowerMapInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TowerMapInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[147]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TowerMapInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TowerMapInfo(TowerMapInfo other) : this() {
      curFloor_ = other.curFloor_;
      curGrid_ = other.curGrid_;
      eventStatus_ = other.eventStatus_;
      mapGrids_ = other.mapGrids_.Clone();
      passedGirds_ = other.passedGirds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TowerMapInfo Clone() {
      return new TowerMapInfo(this);
    }

    /// <summary>Field number for the "cur_floor" field.</summary>
    public const int CurFloorFieldNumber = 1;
    private int curFloor_;
    /// <summary>
    /// 当前层数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurFloor {
      get { return curFloor_; }
      set {
        curFloor_ = value;
      }
    }

    /// <summary>Field number for the "cur_grid" field.</summary>
    public const int CurGridFieldNumber = 2;
    private int curGrid_;
    /// <summary>
    /// 当前所在格子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurGrid {
      get { return curGrid_; }
      set {
        curGrid_ = value;
      }
    }

    /// <summary>Field number for the "event_status" field.</summary>
    public const int EventStatusFieldNumber = 3;
    private int eventStatus_;
    /// <summary>
    /// 事件处理状态（0为无事件，1为待处理）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventStatus {
      get { return eventStatus_; }
      set {
        eventStatus_ = value;
      }
    }

    /// <summary>Field number for the "map_grids" field.</summary>
    public const int MapGridsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Stardom.TowerMapGrid> _repeated_mapGrids_codec
        = pb::FieldCodec.ForMessage(34, global::Stardom.TowerMapGrid.Parser);
    private readonly pbc::RepeatedField<global::Stardom.TowerMapGrid> mapGrids_ = new pbc::RepeatedField<global::Stardom.TowerMapGrid>();
    /// <summary>
    /// 地图信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.TowerMapGrid> MapGrids {
      get { return mapGrids_; }
    }

    /// <summary>Field number for the "passed_girds" field.</summary>
    public const int PassedGirdsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_passedGirds_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> passedGirds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 经过格子列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PassedGirds {
      get { return passedGirds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TowerMapInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TowerMapInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurFloor != other.CurFloor) return false;
      if (CurGrid != other.CurGrid) return false;
      if (EventStatus != other.EventStatus) return false;
      if(!mapGrids_.Equals(other.mapGrids_)) return false;
      if(!passedGirds_.Equals(other.passedGirds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurFloor != 0) hash ^= CurFloor.GetHashCode();
      if (CurGrid != 0) hash ^= CurGrid.GetHashCode();
      if (EventStatus != 0) hash ^= EventStatus.GetHashCode();
      hash ^= mapGrids_.GetHashCode();
      hash ^= passedGirds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurFloor != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurFloor);
      }
      if (CurGrid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurGrid);
      }
      if (EventStatus != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EventStatus);
      }
      mapGrids_.WriteTo(output, _repeated_mapGrids_codec);
      passedGirds_.WriteTo(output, _repeated_passedGirds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurFloor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurFloor);
      }
      if (CurGrid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurGrid);
      }
      if (EventStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventStatus);
      }
      size += mapGrids_.CalculateSize(_repeated_mapGrids_codec);
      size += passedGirds_.CalculateSize(_repeated_passedGirds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TowerMapInfo other) {
      if (other == null) {
        return;
      }
      if (other.CurFloor != 0) {
        CurFloor = other.CurFloor;
      }
      if (other.CurGrid != 0) {
        CurGrid = other.CurGrid;
      }
      if (other.EventStatus != 0) {
        EventStatus = other.EventStatus;
      }
      mapGrids_.Add(other.mapGrids_);
      passedGirds_.Add(other.passedGirds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurFloor = input.ReadInt32();
            break;
          }
          case 16: {
            CurGrid = input.ReadInt32();
            break;
          }
          case 24: {
            EventStatus = input.ReadInt32();
            break;
          }
          case 34: {
            mapGrids_.AddEntriesFrom(input, _repeated_mapGrids_codec);
            break;
          }
          case 42:
          case 40: {
            passedGirds_.AddEntriesFrom(input, _repeated_passedGirds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 摇色子事件信息
  /// </summary>
  public sealed partial class TowerEventInfo : pb::IMessage<TowerEventInfo> {
    private static readonly pb::MessageParser<TowerEventInfo> _parser = new pb::MessageParser<TowerEventInfo>(() => new TowerEventInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TowerEventInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[148]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TowerEventInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TowerEventInfo(TowerEventInfo other) : this() {
      oldGrid_ = other.oldGrid_;
      newGrid_ = other.newGrid_;
      eventId_ = other.eventId_;
      eventStatus_ = other.eventStatus_;
      buffs_ = other.buffs_.Clone();
      rewards_ = other.rewards_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TowerEventInfo Clone() {
      return new TowerEventInfo(this);
    }

    /// <summary>Field number for the "old_grid" field.</summary>
    public const int OldGridFieldNumber = 1;
    private int oldGrid_;
    /// <summary>
    /// 旧格子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OldGrid {
      get { return oldGrid_; }
      set {
        oldGrid_ = value;
      }
    }

    /// <summary>Field number for the "new_grid" field.</summary>
    public const int NewGridFieldNumber = 2;
    private int newGrid_;
    /// <summary>
    /// 新格子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewGrid {
      get { return newGrid_; }
      set {
        newGrid_ = value;
      }
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 3;
    private int eventId_;
    /// <summary>
    /// 事件ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventId {
      get { return eventId_; }
      set {
        eventId_ = value;
      }
    }

    /// <summary>Field number for the "event_status" field.</summary>
    public const int EventStatusFieldNumber = 4;
    private int eventStatus_;
    /// <summary>
    /// 处理的状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventStatus {
      get { return eventStatus_; }
      set {
        eventStatus_ = value;
      }
    }

    /// <summary>Field number for the "buffs" field.</summary>
    public const int BuffsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_buffs_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> buffs_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 新加的buff
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Buffs {
      get { return buffs_; }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Stardom.ItemBaseInfo> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(50, global::Stardom.ItemBaseInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.ItemBaseInfo> rewards_ = new pbc::RepeatedField<global::Stardom.ItemBaseInfo>();
    /// <summary>
    /// 宝箱奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.ItemBaseInfo> Rewards {
      get { return rewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TowerEventInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TowerEventInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OldGrid != other.OldGrid) return false;
      if (NewGrid != other.NewGrid) return false;
      if (EventId != other.EventId) return false;
      if (EventStatus != other.EventStatus) return false;
      if(!buffs_.Equals(other.buffs_)) return false;
      if(!rewards_.Equals(other.rewards_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OldGrid != 0) hash ^= OldGrid.GetHashCode();
      if (NewGrid != 0) hash ^= NewGrid.GetHashCode();
      if (EventId != 0) hash ^= EventId.GetHashCode();
      if (EventStatus != 0) hash ^= EventStatus.GetHashCode();
      hash ^= buffs_.GetHashCode();
      hash ^= rewards_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OldGrid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OldGrid);
      }
      if (NewGrid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NewGrid);
      }
      if (EventId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EventId);
      }
      if (EventStatus != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EventStatus);
      }
      buffs_.WriteTo(output, _repeated_buffs_codec);
      rewards_.WriteTo(output, _repeated_rewards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OldGrid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OldGrid);
      }
      if (NewGrid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewGrid);
      }
      if (EventId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventId);
      }
      if (EventStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventStatus);
      }
      size += buffs_.CalculateSize(_repeated_buffs_codec);
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TowerEventInfo other) {
      if (other == null) {
        return;
      }
      if (other.OldGrid != 0) {
        OldGrid = other.OldGrid;
      }
      if (other.NewGrid != 0) {
        NewGrid = other.NewGrid;
      }
      if (other.EventId != 0) {
        EventId = other.EventId;
      }
      if (other.EventStatus != 0) {
        EventStatus = other.EventStatus;
      }
      buffs_.Add(other.buffs_);
      rewards_.Add(other.rewards_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OldGrid = input.ReadInt32();
            break;
          }
          case 16: {
            NewGrid = input.ReadInt32();
            break;
          }
          case 24: {
            EventId = input.ReadInt32();
            break;
          }
          case 32: {
            EventStatus = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            buffs_.AddEntriesFrom(input, _repeated_buffs_codec);
            break;
          }
          case 50: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 爬塔扫荡信息
  /// </summary>
  public sealed partial class TowerSweepInfo : pb::IMessage<TowerSweepInfo> {
    private static readonly pb::MessageParser<TowerSweepInfo> _parser = new pb::MessageParser<TowerSweepInfo>(() => new TowerSweepInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TowerSweepInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[149]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TowerSweepInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TowerSweepInfo(TowerSweepInfo other) : this() {
      floor_ = other.floor_;
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TowerSweepInfo Clone() {
      return new TowerSweepInfo(this);
    }

    /// <summary>Field number for the "floor" field.</summary>
    public const int FloorFieldNumber = 1;
    private int floor_;
    /// <summary>
    /// 层数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Floor {
      get { return floor_; }
      set {
        floor_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Stardom.ItemBaseInfo> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::Stardom.ItemBaseInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.ItemBaseInfo> items_ = new pbc::RepeatedField<global::Stardom.ItemBaseInfo>();
    /// <summary>
    /// 奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.ItemBaseInfo> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TowerSweepInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TowerSweepInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Floor != other.Floor) return false;
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Floor != 0) hash ^= Floor.GetHashCode();
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Floor != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Floor);
      }
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Floor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Floor);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TowerSweepInfo other) {
      if (other == null) {
        return;
      }
      if (other.Floor != 0) {
        Floor = other.Floor;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Floor = input.ReadInt32();
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 爬塔信息
  /// </summary>
  public sealed partial class PlayerTowerInfo : pb::IMessage<PlayerTowerInfo> {
    private static readonly pb::MessageParser<PlayerTowerInfo> _parser = new pb::MessageParser<PlayerTowerInfo>(() => new PlayerTowerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerTowerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[150]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerTowerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerTowerInfo(PlayerTowerInfo other) : this() {
      MapInfo = other.mapInfo_ != null ? other.MapInfo.Clone() : null;
      dailyResetTimes_ = other.dailyResetTimes_;
      dailySweepTimes_ = other.dailySweepTimes_;
      historyFloor_ = other.historyFloor_;
      shopBuffIds_ = other.shopBuffIds_.Clone();
      gridBuffIds_ = other.gridBuffIds_.Clone();
      buyProducts_ = other.buyProducts_.Clone();
      isRed_ = other.isRed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerTowerInfo Clone() {
      return new PlayerTowerInfo(this);
    }

    /// <summary>Field number for the "map_info" field.</summary>
    public const int MapInfoFieldNumber = 1;
    private global::Stardom.TowerMapInfo mapInfo_;
    /// <summary>
    /// 当前地图信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.TowerMapInfo MapInfo {
      get { return mapInfo_; }
      set {
        mapInfo_ = value;
      }
    }

    /// <summary>Field number for the "daily_reset_times" field.</summary>
    public const int DailyResetTimesFieldNumber = 2;
    private int dailyResetTimes_;
    /// <summary>
    /// 今日重置次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DailyResetTimes {
      get { return dailyResetTimes_; }
      set {
        dailyResetTimes_ = value;
      }
    }

    /// <summary>Field number for the "daily_sweep_times" field.</summary>
    public const int DailySweepTimesFieldNumber = 3;
    private int dailySweepTimes_;
    /// <summary>
    /// 今日扫荡次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DailySweepTimes {
      get { return dailySweepTimes_; }
      set {
        dailySweepTimes_ = value;
      }
    }

    /// <summary>Field number for the "history_floor" field.</summary>
    public const int HistoryFloorFieldNumber = 4;
    private int historyFloor_;
    /// <summary>
    /// 历史最高层数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HistoryFloor {
      get { return historyFloor_; }
      set {
        historyFloor_ = value;
      }
    }

    /// <summary>Field number for the "shop_buff_ids" field.</summary>
    public const int ShopBuffIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_shopBuffIds_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> shopBuffIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 商店购买buff列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ShopBuffIds {
      get { return shopBuffIds_; }
    }

    /// <summary>Field number for the "grid_buff_ids" field.</summary>
    public const int GridBuffIdsFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_gridBuffIds_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> gridBuffIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 玩法中buff列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> GridBuffIds {
      get { return gridBuffIds_; }
    }

    /// <summary>Field number for the "buy_products" field.</summary>
    public const int BuyProductsFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_buyProducts_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> buyProducts_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 购买的商品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BuyProducts {
      get { return buyProducts_; }
    }

    /// <summary>Field number for the "is_red" field.</summary>
    public const int IsRedFieldNumber = 10;
    private int isRed_;
    /// <summary>
    /// 是否有红点(1是0否)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsRed {
      get { return isRed_; }
      set {
        isRed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerTowerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerTowerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MapInfo, other.MapInfo)) return false;
      if (DailyResetTimes != other.DailyResetTimes) return false;
      if (DailySweepTimes != other.DailySweepTimes) return false;
      if (HistoryFloor != other.HistoryFloor) return false;
      if(!shopBuffIds_.Equals(other.shopBuffIds_)) return false;
      if(!gridBuffIds_.Equals(other.gridBuffIds_)) return false;
      if(!buyProducts_.Equals(other.buyProducts_)) return false;
      if (IsRed != other.IsRed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mapInfo_ != null) hash ^= MapInfo.GetHashCode();
      if (DailyResetTimes != 0) hash ^= DailyResetTimes.GetHashCode();
      if (DailySweepTimes != 0) hash ^= DailySweepTimes.GetHashCode();
      if (HistoryFloor != 0) hash ^= HistoryFloor.GetHashCode();
      hash ^= shopBuffIds_.GetHashCode();
      hash ^= gridBuffIds_.GetHashCode();
      hash ^= buyProducts_.GetHashCode();
      if (IsRed != 0) hash ^= IsRed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mapInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MapInfo);
      }
      if (DailyResetTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DailyResetTimes);
      }
      if (DailySweepTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DailySweepTimes);
      }
      if (HistoryFloor != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HistoryFloor);
      }
      shopBuffIds_.WriteTo(output, _repeated_shopBuffIds_codec);
      gridBuffIds_.WriteTo(output, _repeated_gridBuffIds_codec);
      buyProducts_.WriteTo(output, _repeated_buyProducts_codec);
      if (IsRed != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(IsRed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mapInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapInfo);
      }
      if (DailyResetTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DailyResetTimes);
      }
      if (DailySweepTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DailySweepTimes);
      }
      if (HistoryFloor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HistoryFloor);
      }
      size += shopBuffIds_.CalculateSize(_repeated_shopBuffIds_codec);
      size += gridBuffIds_.CalculateSize(_repeated_gridBuffIds_codec);
      size += buyProducts_.CalculateSize(_repeated_buyProducts_codec);
      if (IsRed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsRed);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerTowerInfo other) {
      if (other == null) {
        return;
      }
      if (other.mapInfo_ != null) {
        if (mapInfo_ == null) {
          mapInfo_ = new global::Stardom.TowerMapInfo();
        }
        MapInfo.MergeFrom(other.MapInfo);
      }
      if (other.DailyResetTimes != 0) {
        DailyResetTimes = other.DailyResetTimes;
      }
      if (other.DailySweepTimes != 0) {
        DailySweepTimes = other.DailySweepTimes;
      }
      if (other.HistoryFloor != 0) {
        HistoryFloor = other.HistoryFloor;
      }
      shopBuffIds_.Add(other.shopBuffIds_);
      gridBuffIds_.Add(other.gridBuffIds_);
      buyProducts_.Add(other.buyProducts_);
      if (other.IsRed != 0) {
        IsRed = other.IsRed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (mapInfo_ == null) {
              mapInfo_ = new global::Stardom.TowerMapInfo();
            }
            input.ReadMessage(mapInfo_);
            break;
          }
          case 16: {
            DailyResetTimes = input.ReadInt32();
            break;
          }
          case 24: {
            DailySweepTimes = input.ReadInt32();
            break;
          }
          case 32: {
            HistoryFloor = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            shopBuffIds_.AddEntriesFrom(input, _repeated_shopBuffIds_codec);
            break;
          }
          case 50:
          case 48: {
            gridBuffIds_.AddEntriesFrom(input, _repeated_gridBuffIds_codec);
            break;
          }
          case 58:
          case 56: {
            buyProducts_.AddEntriesFrom(input, _repeated_buyProducts_codec);
            break;
          }
          case 80: {
            IsRed = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  延迟信息
  /// </summary>
  public sealed partial class DelayInfo : pb::IMessage<DelayInfo> {
    private static readonly pb::MessageParser<DelayInfo> _parser = new pb::MessageParser<DelayInfo>(() => new DelayInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DelayInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[151]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelayInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelayInfo(DelayInfo other) : this() {
      id_ = other.id_;
      delayTs_ = other.delayTs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelayInfo Clone() {
      return new DelayInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 对应id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "delay_ts" field.</summary>
    public const int DelayTsFieldNumber = 2;
    private ulong delayTs_;
    /// <summary>
    /// 延迟时间点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DelayTs {
      get { return delayTs_; }
      set {
        delayTs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DelayInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DelayInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (DelayTs != other.DelayTs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (DelayTs != 0UL) hash ^= DelayTs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (DelayTs != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(DelayTs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (DelayTs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DelayTs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DelayInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.DelayTs != 0UL) {
        DelayTs = other.DelayTs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            DelayTs = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 助力事件
  /// </summary>
  public sealed partial class GradeAssistEvent : pb::IMessage<GradeAssistEvent> {
    private static readonly pb::MessageParser<GradeAssistEvent> _parser = new pb::MessageParser<GradeAssistEvent>(() => new GradeAssistEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GradeAssistEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[152]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeAssistEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeAssistEvent(GradeAssistEvent other) : this() {
      assistEventId_ = other.assistEventId_;
      eventTime_ = other.eventTime_;
      params_ = other.params_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeAssistEvent Clone() {
      return new GradeAssistEvent(this);
    }

    /// <summary>Field number for the "assist_event_id" field.</summary>
    public const int AssistEventIdFieldNumber = 1;
    private int assistEventId_;
    /// <summary>
    /// 助力事件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AssistEventId {
      get { return assistEventId_; }
      set {
        assistEventId_ = value;
      }
    }

    /// <summary>Field number for the "event_time" field.</summary>
    public const int EventTimeFieldNumber = 2;
    private ulong eventTime_;
    /// <summary>
    /// 事件时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EventTime {
      get { return eventTime_; }
      set {
        eventTime_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Stardom.KeyParam> _repeated_params_codec
        = pb::FieldCodec.ForMessage(26, global::Stardom.KeyParam.Parser);
    private readonly pbc::RepeatedField<global::Stardom.KeyParam> params_ = new pbc::RepeatedField<global::Stardom.KeyParam>();
    /// <summary>
    /// 事件参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.KeyParam> Params {
      get { return params_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GradeAssistEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GradeAssistEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AssistEventId != other.AssistEventId) return false;
      if (EventTime != other.EventTime) return false;
      if(!params_.Equals(other.params_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AssistEventId != 0) hash ^= AssistEventId.GetHashCode();
      if (EventTime != 0UL) hash ^= EventTime.GetHashCode();
      hash ^= params_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AssistEventId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AssistEventId);
      }
      if (EventTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(EventTime);
      }
      params_.WriteTo(output, _repeated_params_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AssistEventId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AssistEventId);
      }
      if (EventTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EventTime);
      }
      size += params_.CalculateSize(_repeated_params_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GradeAssistEvent other) {
      if (other == null) {
        return;
      }
      if (other.AssistEventId != 0) {
        AssistEventId = other.AssistEventId;
      }
      if (other.EventTime != 0UL) {
        EventTime = other.EventTime;
      }
      params_.Add(other.params_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AssistEventId = input.ReadInt32();
            break;
          }
          case 16: {
            EventTime = input.ReadUInt64();
            break;
          }
          case 26: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 训练事件
  /// </summary>
  public sealed partial class GradeTrainEvent : pb::IMessage<GradeTrainEvent> {
    private static readonly pb::MessageParser<GradeTrainEvent> _parser = new pb::MessageParser<GradeTrainEvent>(() => new GradeTrainEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GradeTrainEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[153]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeTrainEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeTrainEvent(GradeTrainEvent other) : this() {
      trainEventId_ = other.trainEventId_;
      eventTime_ = other.eventTime_;
      isHandle_ = other.isHandle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeTrainEvent Clone() {
      return new GradeTrainEvent(this);
    }

    /// <summary>Field number for the "train_event_id" field.</summary>
    public const int TrainEventIdFieldNumber = 1;
    private int trainEventId_;
    /// <summary>
    /// 训练事件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrainEventId {
      get { return trainEventId_; }
      set {
        trainEventId_ = value;
      }
    }

    /// <summary>Field number for the "event_time" field.</summary>
    public const int EventTimeFieldNumber = 2;
    private ulong eventTime_;
    /// <summary>
    /// 事件时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EventTime {
      get { return eventTime_; }
      set {
        eventTime_ = value;
      }
    }

    /// <summary>Field number for the "is_handle" field.</summary>
    public const int IsHandleFieldNumber = 3;
    private int isHandle_;
    /// <summary>
    /// 是否已处理
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsHandle {
      get { return isHandle_; }
      set {
        isHandle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GradeTrainEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GradeTrainEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TrainEventId != other.TrainEventId) return false;
      if (EventTime != other.EventTime) return false;
      if (IsHandle != other.IsHandle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TrainEventId != 0) hash ^= TrainEventId.GetHashCode();
      if (EventTime != 0UL) hash ^= EventTime.GetHashCode();
      if (IsHandle != 0) hash ^= IsHandle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TrainEventId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TrainEventId);
      }
      if (EventTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(EventTime);
      }
      if (IsHandle != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IsHandle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TrainEventId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrainEventId);
      }
      if (EventTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EventTime);
      }
      if (IsHandle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsHandle);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GradeTrainEvent other) {
      if (other == null) {
        return;
      }
      if (other.TrainEventId != 0) {
        TrainEventId = other.TrainEventId;
      }
      if (other.EventTime != 0UL) {
        EventTime = other.EventTime;
      }
      if (other.IsHandle != 0) {
        IsHandle = other.IsHandle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TrainEventId = input.ReadInt32();
            break;
          }
          case 16: {
            EventTime = input.ReadUInt64();
            break;
          }
          case 24: {
            IsHandle = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 节目组采访
  /// </summary>
  public sealed partial class GradeInterview : pb::IMessage<GradeInterview> {
    private static readonly pb::MessageParser<GradeInterview> _parser = new pb::MessageParser<GradeInterview>(() => new GradeInterview());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GradeInterview> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[154]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeInterview() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeInterview(GradeInterview other) : this() {
      gradeInterviewId_ = other.gradeInterviewId_;
      interviewIndex_ = other.interviewIndex_;
      isFinish_ = other.isFinish_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeInterview Clone() {
      return new GradeInterview(this);
    }

    /// <summary>Field number for the "grade_interview_id" field.</summary>
    public const int GradeInterviewIdFieldNumber = 1;
    private int gradeInterviewId_;
    /// <summary>
    /// 采访id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GradeInterviewId {
      get { return gradeInterviewId_; }
      set {
        gradeInterviewId_ = value;
      }
    }

    /// <summary>Field number for the "interview_index" field.</summary>
    public const int InterviewIndexFieldNumber = 2;
    private int interviewIndex_;
    /// <summary>
    /// 已接收采访, 新采访是0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InterviewIndex {
      get { return interviewIndex_; }
      set {
        interviewIndex_ = value;
      }
    }

    /// <summary>Field number for the "is_finish" field.</summary>
    public const int IsFinishFieldNumber = 3;
    private int isFinish_;
    /// <summary>
    /// 是否结束
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFinish {
      get { return isFinish_; }
      set {
        isFinish_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GradeInterview);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GradeInterview other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GradeInterviewId != other.GradeInterviewId) return false;
      if (InterviewIndex != other.InterviewIndex) return false;
      if (IsFinish != other.IsFinish) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GradeInterviewId != 0) hash ^= GradeInterviewId.GetHashCode();
      if (InterviewIndex != 0) hash ^= InterviewIndex.GetHashCode();
      if (IsFinish != 0) hash ^= IsFinish.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GradeInterviewId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GradeInterviewId);
      }
      if (InterviewIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(InterviewIndex);
      }
      if (IsFinish != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IsFinish);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GradeInterviewId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GradeInterviewId);
      }
      if (InterviewIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InterviewIndex);
      }
      if (IsFinish != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFinish);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GradeInterview other) {
      if (other == null) {
        return;
      }
      if (other.GradeInterviewId != 0) {
        GradeInterviewId = other.GradeInterviewId;
      }
      if (other.InterviewIndex != 0) {
        InterviewIndex = other.InterviewIndex;
      }
      if (other.IsFinish != 0) {
        IsFinish = other.IsFinish;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GradeInterviewId = input.ReadInt32();
            break;
          }
          case 16: {
            InterviewIndex = input.ReadInt32();
            break;
          }
          case 24: {
            IsFinish = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 尼斯日记
  /// </summary>
  public sealed partial class GradeNiceDiary : pb::IMessage<GradeNiceDiary> {
    private static readonly pb::MessageParser<GradeNiceDiary> _parser = new pb::MessageParser<GradeNiceDiary>(() => new GradeNiceDiary());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GradeNiceDiary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[155]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeNiceDiary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeNiceDiary(GradeNiceDiary other) : this() {
      diaryId_ = other.diaryId_;
      status_ = other.status_;
      statusTime_ = other.statusTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeNiceDiary Clone() {
      return new GradeNiceDiary(this);
    }

    /// <summary>Field number for the "diary_id" field.</summary>
    public const int DiaryIdFieldNumber = 1;
    private int diaryId_;
    /// <summary>
    /// 日记id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DiaryId {
      get { return diaryId_; }
      set {
        diaryId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    /// <summary>
    /// 状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "status_time" field.</summary>
    public const int StatusTimeFieldNumber = 3;
    private ulong statusTime_;
    /// <summary>
    /// 状态持续至什么时候
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StatusTime {
      get { return statusTime_; }
      set {
        statusTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GradeNiceDiary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GradeNiceDiary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DiaryId != other.DiaryId) return false;
      if (Status != other.Status) return false;
      if (StatusTime != other.StatusTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DiaryId != 0) hash ^= DiaryId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (StatusTime != 0UL) hash ^= StatusTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DiaryId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DiaryId);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
      if (StatusTime != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(StatusTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DiaryId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DiaryId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (StatusTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StatusTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GradeNiceDiary other) {
      if (other == null) {
        return;
      }
      if (other.DiaryId != 0) {
        DiaryId = other.DiaryId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.StatusTime != 0UL) {
        StatusTime = other.StatusTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DiaryId = input.ReadInt32();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
          case 24: {
            StatusTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 单个性格
  /// </summary>
  public sealed partial class GradeCharacter : pb::IMessage<GradeCharacter> {
    private static readonly pb::MessageParser<GradeCharacter> _parser = new pb::MessageParser<GradeCharacter>(() => new GradeCharacter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GradeCharacter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[156]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeCharacter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeCharacter(GradeCharacter other) : this() {
      characterType_ = other.characterType_;
      val_ = other.val_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeCharacter Clone() {
      return new GradeCharacter(this);
    }

    /// <summary>Field number for the "character_type" field.</summary>
    public const int CharacterTypeFieldNumber = 1;
    private int characterType_;
    /// <summary>
    /// 性格类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CharacterType {
      get { return characterType_; }
      set {
        characterType_ = value;
      }
    }

    /// <summary>Field number for the "val" field.</summary>
    public const int ValFieldNumber = 2;
    private int val_;
    /// <summary>
    /// 性格值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Val {
      get { return val_; }
      set {
        val_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GradeCharacter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GradeCharacter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CharacterType != other.CharacterType) return false;
      if (Val != other.Val) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CharacterType != 0) hash ^= CharacterType.GetHashCode();
      if (Val != 0) hash ^= Val.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CharacterType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CharacterType);
      }
      if (Val != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Val);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CharacterType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CharacterType);
      }
      if (Val != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Val);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GradeCharacter other) {
      if (other == null) {
        return;
      }
      if (other.CharacterType != 0) {
        CharacterType = other.CharacterType;
      }
      if (other.Val != 0) {
        Val = other.Val;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CharacterType = input.ReadInt32();
            break;
          }
          case 16: {
            Val = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 咖位信息
  /// </summary>
  public sealed partial class PlayerGradeInfo : pb::IMessage<PlayerGradeInfo> {
    private static readonly pb::MessageParser<PlayerGradeInfo> _parser = new pb::MessageParser<PlayerGradeInfo>(() => new PlayerGradeInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerGradeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[157]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerGradeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerGradeInfo(PlayerGradeInfo other) : this() {
      grade_ = other.grade_;
      historyGrade_ = other.historyGrade_;
      assistVal_ = other.assistVal_;
      arenaChallengeTimes_ = other.arenaChallengeTimes_;
      arenaBuyTimes_ = other.arenaBuyTimes_;
      arenaRank_ = other.arenaRank_;
      yesterdayGrade_ = other.yesterdayGrade_;
      yesterdayRank_ = other.yesterdayRank_;
      isDailyReward_ = other.isDailyReward_;
      character_ = other.character_.Clone();
      interview_ = other.interview_.Clone();
      Diary = other.diary_ != null ? other.Diary.Clone() : null;
      assistEvents_ = other.assistEvents_.Clone();
      trainEvents_ = other.trainEvents_.Clone();
      jjachieveGrades_ = other.jjachieveGrades_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerGradeInfo Clone() {
      return new PlayerGradeInfo(this);
    }

    /// <summary>Field number for the "grade" field.</summary>
    public const int GradeFieldNumber = 1;
    private int grade_;
    /// <summary>
    /// 咖位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Grade {
      get { return grade_; }
      set {
        grade_ = value;
      }
    }

    /// <summary>Field number for the "history_grade" field.</summary>
    public const int HistoryGradeFieldNumber = 2;
    private int historyGrade_;
    /// <summary>
    /// 历史最高咖位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HistoryGrade {
      get { return historyGrade_; }
      set {
        historyGrade_ = value;
      }
    }

    /// <summary>Field number for the "assist_val" field.</summary>
    public const int AssistValFieldNumber = 3;
    private int assistVal_;
    /// <summary>
    /// 助力值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AssistVal {
      get { return assistVal_; }
      set {
        assistVal_ = value;
      }
    }

    /// <summary>Field number for the "arena_challenge_times" field.</summary>
    public const int ArenaChallengeTimesFieldNumber = 4;
    private int arenaChallengeTimes_;
    /// <summary>
    /// 竞技场已挑战次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ArenaChallengeTimes {
      get { return arenaChallengeTimes_; }
      set {
        arenaChallengeTimes_ = value;
      }
    }

    /// <summary>Field number for the "arena_buy_times" field.</summary>
    public const int ArenaBuyTimesFieldNumber = 5;
    private int arenaBuyTimes_;
    /// <summary>
    /// 竞技场已购买次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ArenaBuyTimes {
      get { return arenaBuyTimes_; }
      set {
        arenaBuyTimes_ = value;
      }
    }

    /// <summary>Field number for the "arena_rank" field.</summary>
    public const int ArenaRankFieldNumber = 6;
    private int arenaRank_;
    /// <summary>
    /// 今日竞技场排行
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ArenaRank {
      get { return arenaRank_; }
      set {
        arenaRank_ = value;
      }
    }

    /// <summary>Field number for the "yesterday_grade" field.</summary>
    public const int YesterdayGradeFieldNumber = 7;
    private int yesterdayGrade_;
    /// <summary>
    /// 昨日竞技场咖位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int YesterdayGrade {
      get { return yesterdayGrade_; }
      set {
        yesterdayGrade_ = value;
      }
    }

    /// <summary>Field number for the "yesterday_rank" field.</summary>
    public const int YesterdayRankFieldNumber = 8;
    private int yesterdayRank_;
    /// <summary>
    /// 昨日竞技场排行
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int YesterdayRank {
      get { return yesterdayRank_; }
      set {
        yesterdayRank_ = value;
      }
    }

    /// <summary>Field number for the "is_daily_reward" field.</summary>
    public const int IsDailyRewardFieldNumber = 9;
    private int isDailyReward_;
    /// <summary>
    /// 是否领取了竞技场奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsDailyReward {
      get { return isDailyReward_; }
      set {
        isDailyReward_ = value;
      }
    }

    /// <summary>Field number for the "character" field.</summary>
    public const int CharacterFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Stardom.GradeCharacter> _repeated_character_codec
        = pb::FieldCodec.ForMessage(82, global::Stardom.GradeCharacter.Parser);
    private readonly pbc::RepeatedField<global::Stardom.GradeCharacter> character_ = new pbc::RepeatedField<global::Stardom.GradeCharacter>();
    /// <summary>
    /// 性格数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.GradeCharacter> Character {
      get { return character_; }
    }

    /// <summary>Field number for the "interview" field.</summary>
    public const int InterviewFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Stardom.GradeInterview> _repeated_interview_codec
        = pb::FieldCodec.ForMessage(90, global::Stardom.GradeInterview.Parser);
    private readonly pbc::RepeatedField<global::Stardom.GradeInterview> interview_ = new pbc::RepeatedField<global::Stardom.GradeInterview>();
    /// <summary>
    /// 采访组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.GradeInterview> Interview {
      get { return interview_; }
    }

    /// <summary>Field number for the "diary" field.</summary>
    public const int DiaryFieldNumber = 12;
    private global::Stardom.GradeNiceDiary diary_;
    /// <summary>
    /// 尼斯日记
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.GradeNiceDiary Diary {
      get { return diary_; }
      set {
        diary_ = value;
      }
    }

    /// <summary>Field number for the "assist_events" field.</summary>
    public const int AssistEventsFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Stardom.GradeAssistEvent> _repeated_assistEvents_codec
        = pb::FieldCodec.ForMessage(106, global::Stardom.GradeAssistEvent.Parser);
    private readonly pbc::RepeatedField<global::Stardom.GradeAssistEvent> assistEvents_ = new pbc::RepeatedField<global::Stardom.GradeAssistEvent>();
    /// <summary>
    /// 助力值事件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.GradeAssistEvent> AssistEvents {
      get { return assistEvents_; }
    }

    /// <summary>Field number for the "train_events" field.</summary>
    public const int TrainEventsFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Stardom.GradeTrainEvent> _repeated_trainEvents_codec
        = pb::FieldCodec.ForMessage(114, global::Stardom.GradeTrainEvent.Parser);
    private readonly pbc::RepeatedField<global::Stardom.GradeTrainEvent> trainEvents_ = new pbc::RepeatedField<global::Stardom.GradeTrainEvent>();
    /// <summary>
    /// 训练事件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.GradeTrainEvent> TrainEvents {
      get { return trainEvents_; }
    }

    /// <summary>Field number for the "jjachieve_grades" field.</summary>
    public const int JjachieveGradesFieldNumber = 15;
    private static readonly pb::FieldCodec<int> _repeated_jjachieveGrades_codec
        = pb::FieldCodec.ForInt32(122);
    private readonly pbc::RepeatedField<int> jjachieveGrades_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 已领取晋级奖励咖位列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> JjachieveGrades {
      get { return jjachieveGrades_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerGradeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerGradeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Grade != other.Grade) return false;
      if (HistoryGrade != other.HistoryGrade) return false;
      if (AssistVal != other.AssistVal) return false;
      if (ArenaChallengeTimes != other.ArenaChallengeTimes) return false;
      if (ArenaBuyTimes != other.ArenaBuyTimes) return false;
      if (ArenaRank != other.ArenaRank) return false;
      if (YesterdayGrade != other.YesterdayGrade) return false;
      if (YesterdayRank != other.YesterdayRank) return false;
      if (IsDailyReward != other.IsDailyReward) return false;
      if(!character_.Equals(other.character_)) return false;
      if(!interview_.Equals(other.interview_)) return false;
      if (!object.Equals(Diary, other.Diary)) return false;
      if(!assistEvents_.Equals(other.assistEvents_)) return false;
      if(!trainEvents_.Equals(other.trainEvents_)) return false;
      if(!jjachieveGrades_.Equals(other.jjachieveGrades_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Grade != 0) hash ^= Grade.GetHashCode();
      if (HistoryGrade != 0) hash ^= HistoryGrade.GetHashCode();
      if (AssistVal != 0) hash ^= AssistVal.GetHashCode();
      if (ArenaChallengeTimes != 0) hash ^= ArenaChallengeTimes.GetHashCode();
      if (ArenaBuyTimes != 0) hash ^= ArenaBuyTimes.GetHashCode();
      if (ArenaRank != 0) hash ^= ArenaRank.GetHashCode();
      if (YesterdayGrade != 0) hash ^= YesterdayGrade.GetHashCode();
      if (YesterdayRank != 0) hash ^= YesterdayRank.GetHashCode();
      if (IsDailyReward != 0) hash ^= IsDailyReward.GetHashCode();
      hash ^= character_.GetHashCode();
      hash ^= interview_.GetHashCode();
      if (diary_ != null) hash ^= Diary.GetHashCode();
      hash ^= assistEvents_.GetHashCode();
      hash ^= trainEvents_.GetHashCode();
      hash ^= jjachieveGrades_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Grade != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Grade);
      }
      if (HistoryGrade != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HistoryGrade);
      }
      if (AssistVal != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AssistVal);
      }
      if (ArenaChallengeTimes != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ArenaChallengeTimes);
      }
      if (ArenaBuyTimes != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ArenaBuyTimes);
      }
      if (ArenaRank != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ArenaRank);
      }
      if (YesterdayGrade != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(YesterdayGrade);
      }
      if (YesterdayRank != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(YesterdayRank);
      }
      if (IsDailyReward != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(IsDailyReward);
      }
      character_.WriteTo(output, _repeated_character_codec);
      interview_.WriteTo(output, _repeated_interview_codec);
      if (diary_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Diary);
      }
      assistEvents_.WriteTo(output, _repeated_assistEvents_codec);
      trainEvents_.WriteTo(output, _repeated_trainEvents_codec);
      jjachieveGrades_.WriteTo(output, _repeated_jjachieveGrades_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Grade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Grade);
      }
      if (HistoryGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HistoryGrade);
      }
      if (AssistVal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AssistVal);
      }
      if (ArenaChallengeTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArenaChallengeTimes);
      }
      if (ArenaBuyTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArenaBuyTimes);
      }
      if (ArenaRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArenaRank);
      }
      if (YesterdayGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(YesterdayGrade);
      }
      if (YesterdayRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(YesterdayRank);
      }
      if (IsDailyReward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsDailyReward);
      }
      size += character_.CalculateSize(_repeated_character_codec);
      size += interview_.CalculateSize(_repeated_interview_codec);
      if (diary_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Diary);
      }
      size += assistEvents_.CalculateSize(_repeated_assistEvents_codec);
      size += trainEvents_.CalculateSize(_repeated_trainEvents_codec);
      size += jjachieveGrades_.CalculateSize(_repeated_jjachieveGrades_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerGradeInfo other) {
      if (other == null) {
        return;
      }
      if (other.Grade != 0) {
        Grade = other.Grade;
      }
      if (other.HistoryGrade != 0) {
        HistoryGrade = other.HistoryGrade;
      }
      if (other.AssistVal != 0) {
        AssistVal = other.AssistVal;
      }
      if (other.ArenaChallengeTimes != 0) {
        ArenaChallengeTimes = other.ArenaChallengeTimes;
      }
      if (other.ArenaBuyTimes != 0) {
        ArenaBuyTimes = other.ArenaBuyTimes;
      }
      if (other.ArenaRank != 0) {
        ArenaRank = other.ArenaRank;
      }
      if (other.YesterdayGrade != 0) {
        YesterdayGrade = other.YesterdayGrade;
      }
      if (other.YesterdayRank != 0) {
        YesterdayRank = other.YesterdayRank;
      }
      if (other.IsDailyReward != 0) {
        IsDailyReward = other.IsDailyReward;
      }
      character_.Add(other.character_);
      interview_.Add(other.interview_);
      if (other.diary_ != null) {
        if (diary_ == null) {
          diary_ = new global::Stardom.GradeNiceDiary();
        }
        Diary.MergeFrom(other.Diary);
      }
      assistEvents_.Add(other.assistEvents_);
      trainEvents_.Add(other.trainEvents_);
      jjachieveGrades_.Add(other.jjachieveGrades_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Grade = input.ReadInt32();
            break;
          }
          case 16: {
            HistoryGrade = input.ReadInt32();
            break;
          }
          case 24: {
            AssistVal = input.ReadInt32();
            break;
          }
          case 32: {
            ArenaChallengeTimes = input.ReadInt32();
            break;
          }
          case 40: {
            ArenaBuyTimes = input.ReadInt32();
            break;
          }
          case 48: {
            ArenaRank = input.ReadInt32();
            break;
          }
          case 56: {
            YesterdayGrade = input.ReadInt32();
            break;
          }
          case 64: {
            YesterdayRank = input.ReadInt32();
            break;
          }
          case 72: {
            IsDailyReward = input.ReadInt32();
            break;
          }
          case 82: {
            character_.AddEntriesFrom(input, _repeated_character_codec);
            break;
          }
          case 90: {
            interview_.AddEntriesFrom(input, _repeated_interview_codec);
            break;
          }
          case 98: {
            if (diary_ == null) {
              diary_ = new global::Stardom.GradeNiceDiary();
            }
            input.ReadMessage(diary_);
            break;
          }
          case 106: {
            assistEvents_.AddEntriesFrom(input, _repeated_assistEvents_codec);
            break;
          }
          case 114: {
            trainEvents_.AddEntriesFrom(input, _repeated_trainEvents_codec);
            break;
          }
          case 122:
          case 120: {
            jjachieveGrades_.AddEntriesFrom(input, _repeated_jjachieveGrades_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 成团成员
  /// </summary>
  public sealed partial class BandMemberInfo : pb::IMessage<BandMemberInfo> {
    private static readonly pb::MessageParser<BandMemberInfo> _parser = new pb::MessageParser<BandMemberInfo>(() => new BandMemberInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BandMemberInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[158]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BandMemberInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BandMemberInfo(BandMemberInfo other) : this() {
      playerId_ = other.playerId_;
      name_ = other.name_;
      faction_ = other.faction_;
      position_ = other.position_;
      cardId_ = other.cardId_;
      headId_ = other.headId_;
      dd_ = other.dd_.Clone();
      sex_ = other.sex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BandMemberInfo Clone() {
      return new BandMemberInfo(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    /// <summary>
    /// 团员id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 团员名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "faction" field.</summary>
    public const int FactionFieldNumber = 3;
    private int faction_;
    /// <summary>
    /// 所属平台
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Faction {
      get { return faction_; }
      set {
        faction_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 4;
    private int position_;
    /// <summary>
    /// 位置（0成员，1队长）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 5;
    private int cardId_;
    /// <summary>
    /// 主卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "head_id" field.</summary>
    public const int HeadIdFieldNumber = 6;
    private int headId_;
    /// <summary>
    /// 头像id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadId {
      get { return headId_; }
      set {
        headId_ = value;
      }
    }

    /// <summary>Field number for the "dd" field.</summary>
    public const int DdFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_dd_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> dd_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 担当
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Dd {
      get { return dd_; }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 8;
    private int sex_;
    /// <summary>
    /// 性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BandMemberInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BandMemberInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Name != other.Name) return false;
      if (Faction != other.Faction) return false;
      if (Position != other.Position) return false;
      if (CardId != other.CardId) return false;
      if (HeadId != other.HeadId) return false;
      if(!dd_.Equals(other.dd_)) return false;
      if (Sex != other.Sex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Faction != 0) hash ^= Faction.GetHashCode();
      if (Position != 0) hash ^= Position.GetHashCode();
      if (CardId != 0) hash ^= CardId.GetHashCode();
      if (HeadId != 0) hash ^= HeadId.GetHashCode();
      hash ^= dd_.GetHashCode();
      if (Sex != 0) hash ^= Sex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Faction != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Faction);
      }
      if (Position != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Position);
      }
      if (CardId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CardId);
      }
      if (HeadId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(HeadId);
      }
      dd_.WriteTo(output, _repeated_dd_codec);
      if (Sex != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Sex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Faction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Faction);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (HeadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadId);
      }
      size += dd_.CalculateSize(_repeated_dd_codec);
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BandMemberInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Faction != 0) {
        Faction = other.Faction;
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      if (other.HeadId != 0) {
        HeadId = other.HeadId;
      }
      dd_.Add(other.dd_);
      if (other.Sex != 0) {
        Sex = other.Sex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Faction = input.ReadInt32();
            break;
          }
          case 32: {
            Position = input.ReadInt32();
            break;
          }
          case 40: {
            CardId = input.ReadInt32();
            break;
          }
          case 48: {
            HeadId = input.ReadInt32();
            break;
          }
          case 58:
          case 56: {
            dd_.AddEntriesFrom(input, _repeated_dd_codec);
            break;
          }
          case 64: {
            Sex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 成团信息
  /// </summary>
  public sealed partial class BandInfo : pb::IMessage<BandInfo> {
    private static readonly pb::MessageParser<BandInfo> _parser = new pb::MessageParser<BandInfo>(() => new BandInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BandInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[159]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BandInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BandInfo(BandInfo other) : this() {
      fshowWhice_ = other.fshowWhice_;
      faction_ = other.faction_;
      bandName_ = other.bandName_;
      members_ = other.members_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BandInfo Clone() {
      return new BandInfo(this);
    }

    /// <summary>Field number for the "fshow_whice" field.</summary>
    public const int FshowWhiceFieldNumber = 1;
    private int fshowWhice_;
    /// <summary>
    /// 第几届
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FshowWhice {
      get { return fshowWhice_; }
      set {
        fshowWhice_ = value;
      }
    }

    /// <summary>Field number for the "faction" field.</summary>
    public const int FactionFieldNumber = 2;
    private int faction_;
    /// <summary>
    /// 平台势力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Faction {
      get { return faction_; }
      set {
        faction_ = value;
      }
    }

    /// <summary>Field number for the "band_name" field.</summary>
    public const int BandNameFieldNumber = 3;
    private string bandName_ = "";
    /// <summary>
    /// 队名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BandName {
      get { return bandName_; }
      set {
        bandName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Stardom.BandMemberInfo> _repeated_members_codec
        = pb::FieldCodec.ForMessage(34, global::Stardom.BandMemberInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.BandMemberInfo> members_ = new pbc::RepeatedField<global::Stardom.BandMemberInfo>();
    /// <summary>
    /// 成员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.BandMemberInfo> Members {
      get { return members_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BandInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BandInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FshowWhice != other.FshowWhice) return false;
      if (Faction != other.Faction) return false;
      if (BandName != other.BandName) return false;
      if(!members_.Equals(other.members_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FshowWhice != 0) hash ^= FshowWhice.GetHashCode();
      if (Faction != 0) hash ^= Faction.GetHashCode();
      if (BandName.Length != 0) hash ^= BandName.GetHashCode();
      hash ^= members_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FshowWhice != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FshowWhice);
      }
      if (Faction != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Faction);
      }
      if (BandName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BandName);
      }
      members_.WriteTo(output, _repeated_members_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FshowWhice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FshowWhice);
      }
      if (Faction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Faction);
      }
      if (BandName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BandName);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BandInfo other) {
      if (other == null) {
        return;
      }
      if (other.FshowWhice != 0) {
        FshowWhice = other.FshowWhice;
      }
      if (other.Faction != 0) {
        Faction = other.Faction;
      }
      if (other.BandName.Length != 0) {
        BandName = other.BandName;
      }
      members_.Add(other.members_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FshowWhice = input.ReadInt32();
            break;
          }
          case 16: {
            Faction = input.ReadInt32();
            break;
          }
          case 26: {
            BandName = input.ReadString();
            break;
          }
          case 34: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 投票送礼玩家
  /// </summary>
  public sealed partial class VoteGiftPlayer : pb::IMessage<VoteGiftPlayer> {
    private static readonly pb::MessageParser<VoteGiftPlayer> _parser = new pb::MessageParser<VoteGiftPlayer>(() => new VoteGiftPlayer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VoteGiftPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[160]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteGiftPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteGiftPlayer(VoteGiftPlayer other) : this() {
      playerId_ = other.playerId_;
      atmosRewarded_ = other.atmosRewarded_;
      faction_ = other.faction_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteGiftPlayer Clone() {
      return new VoteGiftPlayer(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    /// <summary>
    /// 投票玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "atmos_rewarded" field.</summary>
    public const int AtmosRewardedFieldNumber = 2;
    private int atmosRewarded_;
    /// <summary>
    /// 气氛奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AtmosRewarded {
      get { return atmosRewarded_; }
      set {
        atmosRewarded_ = value;
      }
    }

    /// <summary>Field number for the "faction" field.</summary>
    public const int FactionFieldNumber = 3;
    private int faction_;
    /// <summary>
    /// 投票玩家平台
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Faction {
      get { return faction_; }
      set {
        faction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VoteGiftPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VoteGiftPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (AtmosRewarded != other.AtmosRewarded) return false;
      if (Faction != other.Faction) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (AtmosRewarded != 0) hash ^= AtmosRewarded.GetHashCode();
      if (Faction != 0) hash ^= Faction.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (AtmosRewarded != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AtmosRewarded);
      }
      if (Faction != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Faction);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (AtmosRewarded != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AtmosRewarded);
      }
      if (Faction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Faction);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VoteGiftPlayer other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.AtmosRewarded != 0) {
        AtmosRewarded = other.AtmosRewarded;
      }
      if (other.Faction != 0) {
        Faction = other.Faction;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 16: {
            AtmosRewarded = input.ReadInt32();
            break;
          }
          case 24: {
            Faction = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 平台选秀
  /// </summary>
  public sealed partial class FactionShowInfo : pb::IMessage<FactionShowInfo> {
    private static readonly pb::MessageParser<FactionShowInfo> _parser = new pb::MessageParser<FactionShowInfo>(() => new FactionShowInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FactionShowInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[161]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FactionShowInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FactionShowInfo(FactionShowInfo other) : this() {
      fshowWhice_ = other.fshowWhice_;
      stdLevel_ = other.stdLevel_;
      phase_ = other.phase_;
      phasePart_ = other.phasePart_;
      partStartTime_ = other.partStartTime_;
      partEndTime_ = other.partEndTime_;
      fshowStartTime_ = other.fshowStartTime_;
      knockoutAtoms_ = other.knockoutAtoms_;
      finalAtoms_ = other.finalAtoms_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FactionShowInfo Clone() {
      return new FactionShowInfo(this);
    }

    /// <summary>Field number for the "fshow_whice" field.</summary>
    public const int FshowWhiceFieldNumber = 1;
    private int fshowWhice_;
    /// <summary>
    /// 第几届
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FshowWhice {
      get { return fshowWhice_; }
      set {
        fshowWhice_ = value;
      }
    }

    /// <summary>Field number for the "std_level" field.</summary>
    public const int StdLevelFieldNumber = 2;
    private int stdLevel_;
    /// <summary>
    /// 标准最高等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StdLevel {
      get { return stdLevel_; }
      set {
        stdLevel_ = value;
      }
    }

    /// <summary>Field number for the "phase" field.</summary>
    public const int PhaseFieldNumber = 3;
    private int phase_;
    /// <summary>
    /// 现大阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Phase {
      get { return phase_; }
      set {
        phase_ = value;
      }
    }

    /// <summary>Field number for the "phase_part" field.</summary>
    public const int PhasePartFieldNumber = 4;
    private int phasePart_;
    /// <summary>
    /// 小阶段(参照配表FactionShowTime)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PhasePart {
      get { return phasePart_; }
      set {
        phasePart_ = value;
      }
    }

    /// <summary>Field number for the "part_start_time" field.</summary>
    public const int PartStartTimeFieldNumber = 5;
    private ulong partStartTime_;
    /// <summary>
    /// 小阶段开始时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PartStartTime {
      get { return partStartTime_; }
      set {
        partStartTime_ = value;
      }
    }

    /// <summary>Field number for the "part_end_time" field.</summary>
    public const int PartEndTimeFieldNumber = 6;
    private ulong partEndTime_;
    /// <summary>
    /// 小阶段结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PartEndTime {
      get { return partEndTime_; }
      set {
        partEndTime_ = value;
      }
    }

    /// <summary>Field number for the "fshow_start_time" field.</summary>
    public const int FshowStartTimeFieldNumber = 7;
    private ulong fshowStartTime_;
    /// <summary>
    /// 本届的开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FshowStartTime {
      get { return fshowStartTime_; }
      set {
        fshowStartTime_ = value;
      }
    }

    /// <summary>Field number for the "knockout_atoms" field.</summary>
    public const int KnockoutAtomsFieldNumber = 8;
    private int knockoutAtoms_;
    /// <summary>
    /// 淘汰赛气氛值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KnockoutAtoms {
      get { return knockoutAtoms_; }
      set {
        knockoutAtoms_ = value;
      }
    }

    /// <summary>Field number for the "final_atoms" field.</summary>
    public const int FinalAtomsFieldNumber = 9;
    private int finalAtoms_;
    /// <summary>
    /// 决赛赛气氛值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinalAtoms {
      get { return finalAtoms_; }
      set {
        finalAtoms_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FactionShowInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FactionShowInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FshowWhice != other.FshowWhice) return false;
      if (StdLevel != other.StdLevel) return false;
      if (Phase != other.Phase) return false;
      if (PhasePart != other.PhasePart) return false;
      if (PartStartTime != other.PartStartTime) return false;
      if (PartEndTime != other.PartEndTime) return false;
      if (FshowStartTime != other.FshowStartTime) return false;
      if (KnockoutAtoms != other.KnockoutAtoms) return false;
      if (FinalAtoms != other.FinalAtoms) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FshowWhice != 0) hash ^= FshowWhice.GetHashCode();
      if (StdLevel != 0) hash ^= StdLevel.GetHashCode();
      if (Phase != 0) hash ^= Phase.GetHashCode();
      if (PhasePart != 0) hash ^= PhasePart.GetHashCode();
      if (PartStartTime != 0UL) hash ^= PartStartTime.GetHashCode();
      if (PartEndTime != 0UL) hash ^= PartEndTime.GetHashCode();
      if (FshowStartTime != 0UL) hash ^= FshowStartTime.GetHashCode();
      if (KnockoutAtoms != 0) hash ^= KnockoutAtoms.GetHashCode();
      if (FinalAtoms != 0) hash ^= FinalAtoms.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FshowWhice != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FshowWhice);
      }
      if (StdLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StdLevel);
      }
      if (Phase != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Phase);
      }
      if (PhasePart != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PhasePart);
      }
      if (PartStartTime != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(PartStartTime);
      }
      if (PartEndTime != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(PartEndTime);
      }
      if (FshowStartTime != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(FshowStartTime);
      }
      if (KnockoutAtoms != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(KnockoutAtoms);
      }
      if (FinalAtoms != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FinalAtoms);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FshowWhice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FshowWhice);
      }
      if (StdLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StdLevel);
      }
      if (Phase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Phase);
      }
      if (PhasePart != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PhasePart);
      }
      if (PartStartTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PartStartTime);
      }
      if (PartEndTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PartEndTime);
      }
      if (FshowStartTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FshowStartTime);
      }
      if (KnockoutAtoms != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KnockoutAtoms);
      }
      if (FinalAtoms != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinalAtoms);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FactionShowInfo other) {
      if (other == null) {
        return;
      }
      if (other.FshowWhice != 0) {
        FshowWhice = other.FshowWhice;
      }
      if (other.StdLevel != 0) {
        StdLevel = other.StdLevel;
      }
      if (other.Phase != 0) {
        Phase = other.Phase;
      }
      if (other.PhasePart != 0) {
        PhasePart = other.PhasePart;
      }
      if (other.PartStartTime != 0UL) {
        PartStartTime = other.PartStartTime;
      }
      if (other.PartEndTime != 0UL) {
        PartEndTime = other.PartEndTime;
      }
      if (other.FshowStartTime != 0UL) {
        FshowStartTime = other.FshowStartTime;
      }
      if (other.KnockoutAtoms != 0) {
        KnockoutAtoms = other.KnockoutAtoms;
      }
      if (other.FinalAtoms != 0) {
        FinalAtoms = other.FinalAtoms;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FshowWhice = input.ReadInt32();
            break;
          }
          case 16: {
            StdLevel = input.ReadInt32();
            break;
          }
          case 24: {
            Phase = input.ReadInt32();
            break;
          }
          case 32: {
            PhasePart = input.ReadInt32();
            break;
          }
          case 40: {
            PartStartTime = input.ReadUInt64();
            break;
          }
          case 48: {
            PartEndTime = input.ReadUInt64();
            break;
          }
          case 56: {
            FshowStartTime = input.ReadUInt64();
            break;
          }
          case 64: {
            KnockoutAtoms = input.ReadInt32();
            break;
          }
          case 72: {
            FinalAtoms = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 选手信息
  /// </summary>
  public sealed partial class FactionShowPacInfo : pb::IMessage<FactionShowPacInfo> {
    private static readonly pb::MessageParser<FactionShowPacInfo> _parser = new pb::MessageParser<FactionShowPacInfo>(() => new FactionShowPacInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FactionShowPacInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[162]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FactionShowPacInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FactionShowPacInfo(FactionShowPacInfo other) : this() {
      playerId_ = other.playerId_;
      name_ = other.name_;
      sign_ = other.sign_;
      guildId_ = other.guildId_;
      guildName_ = other.guildName_;
      faction_ = other.faction_;
      headId_ = other.headId_;
      profession_ = other.profession_;
      cardId_ = other.cardId_;
      fightPower_ = other.fightPower_;
      ranking_ = other.ranking_;
      totalRank_ = other.totalRank_;
      factionRank_ = other.factionRank_;
      challengeScore_ = other.challengeScore_;
      voteScore_ = other.voteScore_;
      teamId_ = other.teamId_;
      dpsPercent_ = other.dpsPercent_;
      inspireTimes_ = other.inspireTimes_;
      sex_ = other.sex_;
      level_ = other.level_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FactionShowPacInfo Clone() {
      return new FactionShowPacInfo(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 选手名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sign" field.</summary>
    public const int SignFieldNumber = 3;
    private string sign_ = "";
    /// <summary>
    /// 签名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sign {
      get { return sign_; }
      set {
        sign_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guild_id" field.</summary>
    public const int GuildIdFieldNumber = 4;
    private ulong guildId_;
    /// <summary>
    /// 协会id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "guild_name" field.</summary>
    public const int GuildNameFieldNumber = 5;
    private string guildName_ = "";
    /// <summary>
    /// 协会名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "faction" field.</summary>
    public const int FactionFieldNumber = 6;
    private int faction_;
    /// <summary>
    /// 平台
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Faction {
      get { return faction_; }
      set {
        faction_ = value;
      }
    }

    /// <summary>Field number for the "head_id" field.</summary>
    public const int HeadIdFieldNumber = 7;
    private int headId_;
    /// <summary>
    /// 头像id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadId {
      get { return headId_; }
      set {
        headId_ = value;
      }
    }

    /// <summary>Field number for the "profession" field.</summary>
    public const int ProfessionFieldNumber = 8;
    private int profession_;
    /// <summary>
    /// 职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Profession {
      get { return profession_; }
      set {
        profession_ = value;
      }
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 9;
    private int cardId_;
    /// <summary>
    /// 主卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "fight_power" field.</summary>
    public const int FightPowerFieldNumber = 10;
    private int fightPower_;
    /// <summary>
    /// 战力（淘汰赛排行榜）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FightPower {
      get { return fightPower_; }
      set {
        fightPower_ = value;
      }
    }

    /// <summary>Field number for the "ranking" field.</summary>
    public const int RankingFieldNumber = 11;
    private int ranking_;
    /// <summary>
    /// 评级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ranking {
      get { return ranking_; }
      set {
        ranking_ = value;
      }
    }

    /// <summary>Field number for the "total_rank" field.</summary>
    public const int TotalRankFieldNumber = 12;
    private int totalRank_;
    /// <summary>
    /// 总排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalRank {
      get { return totalRank_; }
      set {
        totalRank_ = value;
      }
    }

    /// <summary>Field number for the "faction_rank" field.</summary>
    public const int FactionRankFieldNumber = 13;
    private int factionRank_;
    /// <summary>
    /// 平台排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FactionRank {
      get { return factionRank_; }
      set {
        factionRank_ = value;
      }
    }

    /// <summary>Field number for the "challenge_score" field.</summary>
    public const int ChallengeScoreFieldNumber = 14;
    private int challengeScore_;
    /// <summary>
    /// 挑战得分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChallengeScore {
      get { return challengeScore_; }
      set {
        challengeScore_ = value;
      }
    }

    /// <summary>Field number for the "vote_score" field.</summary>
    public const int VoteScoreFieldNumber = 15;
    private int voteScore_;
    /// <summary>
    /// 投票得分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VoteScore {
      get { return voteScore_; }
      set {
        voteScore_ = value;
      }
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 16;
    private int teamId_;
    /// <summary>
    /// 淘汰赛时分组id(0,1,2,3)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "dps_percent" field.</summary>
    public const int DpsPercentFieldNumber = 17;
    private int dpsPercent_;
    /// <summary>
    /// 海选赛时dps百分比
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DpsPercent {
      get { return dpsPercent_; }
      set {
        dpsPercent_ = value;
      }
    }

    /// <summary>Field number for the "inspire_times" field.</summary>
    public const int InspireTimesFieldNumber = 20;
    private int inspireTimes_;
    /// <summary>
    /// 鼓舞次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InspireTimes {
      get { return inspireTimes_; }
      set {
        inspireTimes_ = value;
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 21;
    private int sex_;
    /// <summary>
    /// 性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 22;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FactionShowPacInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FactionShowPacInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Name != other.Name) return false;
      if (Sign != other.Sign) return false;
      if (GuildId != other.GuildId) return false;
      if (GuildName != other.GuildName) return false;
      if (Faction != other.Faction) return false;
      if (HeadId != other.HeadId) return false;
      if (Profession != other.Profession) return false;
      if (CardId != other.CardId) return false;
      if (FightPower != other.FightPower) return false;
      if (Ranking != other.Ranking) return false;
      if (TotalRank != other.TotalRank) return false;
      if (FactionRank != other.FactionRank) return false;
      if (ChallengeScore != other.ChallengeScore) return false;
      if (VoteScore != other.VoteScore) return false;
      if (TeamId != other.TeamId) return false;
      if (DpsPercent != other.DpsPercent) return false;
      if (InspireTimes != other.InspireTimes) return false;
      if (Sex != other.Sex) return false;
      if (Level != other.Level) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Sign.Length != 0) hash ^= Sign.GetHashCode();
      if (GuildId != 0UL) hash ^= GuildId.GetHashCode();
      if (GuildName.Length != 0) hash ^= GuildName.GetHashCode();
      if (Faction != 0) hash ^= Faction.GetHashCode();
      if (HeadId != 0) hash ^= HeadId.GetHashCode();
      if (Profession != 0) hash ^= Profession.GetHashCode();
      if (CardId != 0) hash ^= CardId.GetHashCode();
      if (FightPower != 0) hash ^= FightPower.GetHashCode();
      if (Ranking != 0) hash ^= Ranking.GetHashCode();
      if (TotalRank != 0) hash ^= TotalRank.GetHashCode();
      if (FactionRank != 0) hash ^= FactionRank.GetHashCode();
      if (ChallengeScore != 0) hash ^= ChallengeScore.GetHashCode();
      if (VoteScore != 0) hash ^= VoteScore.GetHashCode();
      if (TeamId != 0) hash ^= TeamId.GetHashCode();
      if (DpsPercent != 0) hash ^= DpsPercent.GetHashCode();
      if (InspireTimes != 0) hash ^= InspireTimes.GetHashCode();
      if (Sex != 0) hash ^= Sex.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Sign.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Sign);
      }
      if (GuildId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(GuildId);
      }
      if (GuildName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(GuildName);
      }
      if (Faction != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Faction);
      }
      if (HeadId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HeadId);
      }
      if (Profession != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Profession);
      }
      if (CardId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CardId);
      }
      if (FightPower != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(FightPower);
      }
      if (Ranking != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Ranking);
      }
      if (TotalRank != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(TotalRank);
      }
      if (FactionRank != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(FactionRank);
      }
      if (ChallengeScore != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ChallengeScore);
      }
      if (VoteScore != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(VoteScore);
      }
      if (TeamId != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(TeamId);
      }
      if (DpsPercent != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(DpsPercent);
      }
      if (InspireTimes != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(InspireTimes);
      }
      if (Sex != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(Sex);
      }
      if (Level != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(Level);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Sign.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sign);
      }
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GuildName);
      }
      if (Faction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Faction);
      }
      if (HeadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadId);
      }
      if (Profession != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Profession);
      }
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (FightPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FightPower);
      }
      if (Ranking != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ranking);
      }
      if (TotalRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRank);
      }
      if (FactionRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FactionRank);
      }
      if (ChallengeScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChallengeScore);
      }
      if (VoteScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VoteScore);
      }
      if (TeamId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TeamId);
      }
      if (DpsPercent != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DpsPercent);
      }
      if (InspireTimes != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InspireTimes);
      }
      if (Sex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (Level != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FactionShowPacInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Sign.Length != 0) {
        Sign = other.Sign;
      }
      if (other.GuildId != 0UL) {
        GuildId = other.GuildId;
      }
      if (other.GuildName.Length != 0) {
        GuildName = other.GuildName;
      }
      if (other.Faction != 0) {
        Faction = other.Faction;
      }
      if (other.HeadId != 0) {
        HeadId = other.HeadId;
      }
      if (other.Profession != 0) {
        Profession = other.Profession;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      if (other.FightPower != 0) {
        FightPower = other.FightPower;
      }
      if (other.Ranking != 0) {
        Ranking = other.Ranking;
      }
      if (other.TotalRank != 0) {
        TotalRank = other.TotalRank;
      }
      if (other.FactionRank != 0) {
        FactionRank = other.FactionRank;
      }
      if (other.ChallengeScore != 0) {
        ChallengeScore = other.ChallengeScore;
      }
      if (other.VoteScore != 0) {
        VoteScore = other.VoteScore;
      }
      if (other.TeamId != 0) {
        TeamId = other.TeamId;
      }
      if (other.DpsPercent != 0) {
        DpsPercent = other.DpsPercent;
      }
      if (other.InspireTimes != 0) {
        InspireTimes = other.InspireTimes;
      }
      if (other.Sex != 0) {
        Sex = other.Sex;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Sign = input.ReadString();
            break;
          }
          case 32: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 42: {
            GuildName = input.ReadString();
            break;
          }
          case 48: {
            Faction = input.ReadInt32();
            break;
          }
          case 56: {
            HeadId = input.ReadInt32();
            break;
          }
          case 64: {
            Profession = input.ReadInt32();
            break;
          }
          case 72: {
            CardId = input.ReadInt32();
            break;
          }
          case 80: {
            FightPower = input.ReadInt32();
            break;
          }
          case 88: {
            Ranking = input.ReadInt32();
            break;
          }
          case 96: {
            TotalRank = input.ReadInt32();
            break;
          }
          case 104: {
            FactionRank = input.ReadInt32();
            break;
          }
          case 112: {
            ChallengeScore = input.ReadInt32();
            break;
          }
          case 120: {
            VoteScore = input.ReadInt32();
            break;
          }
          case 128: {
            TeamId = input.ReadInt32();
            break;
          }
          case 136: {
            DpsPercent = input.ReadInt32();
            break;
          }
          case 160: {
            InspireTimes = input.ReadInt32();
            break;
          }
          case 168: {
            Sex = input.ReadInt32();
            break;
          }
          case 176: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家信息
  /// </summary>
  public sealed partial class PlayerFactionShowInfo : pb::IMessage<PlayerFactionShowInfo> {
    private static readonly pb::MessageParser<PlayerFactionShowInfo> _parser = new pb::MessageParser<PlayerFactionShowInfo>(() => new PlayerFactionShowInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerFactionShowInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[163]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerFactionShowInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerFactionShowInfo(PlayerFactionShowInfo other) : this() {
      voteTimes_ = other.voteTimes_;
      giftTimes_ = other.giftTimes_;
      giftRecoverTs_ = other.giftRecoverTs_;
      votePlayers_ = other.votePlayers_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerFactionShowInfo Clone() {
      return new PlayerFactionShowInfo(this);
    }

    /// <summary>Field number for the "vote_times" field.</summary>
    public const int VoteTimesFieldNumber = 1;
    private int voteTimes_;
    /// <summary>
    /// 投票次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VoteTimes {
      get { return voteTimes_; }
      set {
        voteTimes_ = value;
      }
    }

    /// <summary>Field number for the "gift_times" field.</summary>
    public const int GiftTimesFieldNumber = 2;
    private int giftTimes_;
    /// <summary>
    /// 免费送礼次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GiftTimes {
      get { return giftTimes_; }
      set {
        giftTimes_ = value;
      }
    }

    /// <summary>Field number for the "gift_recover_ts" field.</summary>
    public const int GiftRecoverTsFieldNumber = 3;
    private ulong giftRecoverTs_;
    /// <summary>
    /// 下一次恢复时间戳，到达上限为0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GiftRecoverTs {
      get { return giftRecoverTs_; }
      set {
        giftRecoverTs_ = value;
      }
    }

    /// <summary>Field number for the "vote_players" field.</summary>
    public const int VotePlayersFieldNumber = 4;
    private static readonly pb::FieldCodec<ulong> _repeated_votePlayers_codec
        = pb::FieldCodec.ForUInt64(34);
    private readonly pbc::RepeatedField<ulong> votePlayers_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// 今日已投票玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> VotePlayers {
      get { return votePlayers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerFactionShowInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerFactionShowInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VoteTimes != other.VoteTimes) return false;
      if (GiftTimes != other.GiftTimes) return false;
      if (GiftRecoverTs != other.GiftRecoverTs) return false;
      if(!votePlayers_.Equals(other.votePlayers_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VoteTimes != 0) hash ^= VoteTimes.GetHashCode();
      if (GiftTimes != 0) hash ^= GiftTimes.GetHashCode();
      if (GiftRecoverTs != 0UL) hash ^= GiftRecoverTs.GetHashCode();
      hash ^= votePlayers_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VoteTimes != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(VoteTimes);
      }
      if (GiftTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GiftTimes);
      }
      if (GiftRecoverTs != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(GiftRecoverTs);
      }
      votePlayers_.WriteTo(output, _repeated_votePlayers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VoteTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VoteTimes);
      }
      if (GiftTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GiftTimes);
      }
      if (GiftRecoverTs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GiftRecoverTs);
      }
      size += votePlayers_.CalculateSize(_repeated_votePlayers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerFactionShowInfo other) {
      if (other == null) {
        return;
      }
      if (other.VoteTimes != 0) {
        VoteTimes = other.VoteTimes;
      }
      if (other.GiftTimes != 0) {
        GiftTimes = other.GiftTimes;
      }
      if (other.GiftRecoverTs != 0UL) {
        GiftRecoverTs = other.GiftRecoverTs;
      }
      votePlayers_.Add(other.votePlayers_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VoteTimes = input.ReadInt32();
            break;
          }
          case 16: {
            GiftTimes = input.ReadInt32();
            break;
          }
          case 24: {
            GiftRecoverTs = input.ReadUInt64();
            break;
          }
          case 34:
          case 32: {
            votePlayers_.AddEntriesFrom(input, _repeated_votePlayers_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 投票信息
  /// </summary>
  public sealed partial class VoteGiftInfo : pb::IMessage<VoteGiftInfo> {
    private static readonly pb::MessageParser<VoteGiftInfo> _parser = new pb::MessageParser<VoteGiftInfo>(() => new VoteGiftInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VoteGiftInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[164]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteGiftInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteGiftInfo(VoteGiftInfo other) : this() {
      reciever_ = other.reciever_;
      playerId_ = other.playerId_;
      name_ = other.name_;
      faction_ = other.faction_;
      grade_ = other.grade_;
      vgScore_ = other.vgScore_;
      isJoin_ = other.isJoin_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteGiftInfo Clone() {
      return new VoteGiftInfo(this);
    }

    /// <summary>Field number for the "reciever" field.</summary>
    public const int RecieverFieldNumber = 1;
    private ulong reciever_;
    /// <summary>
    /// 收礼物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Reciever {
      get { return reciever_; }
      set {
        reciever_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private ulong playerId_;
    /// <summary>
    /// 投票/送礼物者id(赠送者)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// 名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "faction" field.</summary>
    public const int FactionFieldNumber = 4;
    private int faction_;
    /// <summary>
    /// 平台
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Faction {
      get { return faction_; }
      set {
        faction_ = value;
      }
    }

    /// <summary>Field number for the "grade" field.</summary>
    public const int GradeFieldNumber = 5;
    private int grade_;
    /// <summary>
    /// 咖位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Grade {
      get { return grade_; }
      set {
        grade_ = value;
      }
    }

    /// <summary>Field number for the "vg_score" field.</summary>
    public const int VgScoreFieldNumber = 6;
    private int vgScore_;
    /// <summary>
    /// 贡献得分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VgScore {
      get { return vgScore_; }
      set {
        vgScore_ = value;
      }
    }

    /// <summary>Field number for the "is_join" field.</summary>
    public const int IsJoinFieldNumber = 7;
    private int isJoin_;
    /// <summary>
    /// 是否参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsJoin {
      get { return isJoin_; }
      set {
        isJoin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VoteGiftInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VoteGiftInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Reciever != other.Reciever) return false;
      if (PlayerId != other.PlayerId) return false;
      if (Name != other.Name) return false;
      if (Faction != other.Faction) return false;
      if (Grade != other.Grade) return false;
      if (VgScore != other.VgScore) return false;
      if (IsJoin != other.IsJoin) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Reciever != 0UL) hash ^= Reciever.GetHashCode();
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Faction != 0) hash ^= Faction.GetHashCode();
      if (Grade != 0) hash ^= Grade.GetHashCode();
      if (VgScore != 0) hash ^= VgScore.GetHashCode();
      if (IsJoin != 0) hash ^= IsJoin.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Reciever != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Reciever);
      }
      if (PlayerId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(PlayerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Faction != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Faction);
      }
      if (Grade != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Grade);
      }
      if (VgScore != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(VgScore);
      }
      if (IsJoin != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(IsJoin);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Reciever != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Reciever);
      }
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Faction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Faction);
      }
      if (Grade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Grade);
      }
      if (VgScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VgScore);
      }
      if (IsJoin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsJoin);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VoteGiftInfo other) {
      if (other == null) {
        return;
      }
      if (other.Reciever != 0UL) {
        Reciever = other.Reciever;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Faction != 0) {
        Faction = other.Faction;
      }
      if (other.Grade != 0) {
        Grade = other.Grade;
      }
      if (other.VgScore != 0) {
        VgScore = other.VgScore;
      }
      if (other.IsJoin != 0) {
        IsJoin = other.IsJoin;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Reciever = input.ReadUInt64();
            break;
          }
          case 16: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Faction = input.ReadInt32();
            break;
          }
          case 40: {
            Grade = input.ReadInt32();
            break;
          }
          case 48: {
            VgScore = input.ReadInt32();
            break;
          }
          case 56: {
            IsJoin = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 淘汰赛/决赛信息
  /// </summary>
  public sealed partial class FShowTeamInfo : pb::IMessage<FShowTeamInfo> {
    private static readonly pb::MessageParser<FShowTeamInfo> _parser = new pb::MessageParser<FShowTeamInfo>(() => new FShowTeamInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FShowTeamInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[165]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FShowTeamInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FShowTeamInfo(FShowTeamInfo other) : this() {
      max_ = other.max_;
      teamName_ = other.teamName_;
      captainId_ = other.captainId_;
      captainHeadId_ = other.captainHeadId_;
      faction_ = other.faction_;
      teammates_ = other.teammates_.Clone();
      score_ = other.score_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FShowTeamInfo Clone() {
      return new FShowTeamInfo(this);
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 1;
    private int max_;
    /// <summary>
    /// 最大
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    /// <summary>Field number for the "team_name" field.</summary>
    public const int TeamNameFieldNumber = 2;
    private string teamName_ = "";
    /// <summary>
    /// 队名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamName {
      get { return teamName_; }
      set {
        teamName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "captain_id" field.</summary>
    public const int CaptainIdFieldNumber = 3;
    private ulong captainId_;
    /// <summary>
    /// 队长id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CaptainId {
      get { return captainId_; }
      set {
        captainId_ = value;
      }
    }

    /// <summary>Field number for the "captain_head_id" field.</summary>
    public const int CaptainHeadIdFieldNumber = 4;
    private int captainHeadId_;
    /// <summary>
    /// 队长头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CaptainHeadId {
      get { return captainHeadId_; }
      set {
        captainHeadId_ = value;
      }
    }

    /// <summary>Field number for the "faction" field.</summary>
    public const int FactionFieldNumber = 5;
    private int faction_;
    /// <summary>
    /// 阵营
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Faction {
      get { return faction_; }
      set {
        faction_ = value;
      }
    }

    /// <summary>Field number for the "teammates" field.</summary>
    public const int TeammatesFieldNumber = 6;
    private static readonly pb::FieldCodec<ulong> _repeated_teammates_codec
        = pb::FieldCodec.ForUInt64(50);
    private readonly pbc::RepeatedField<ulong> teammates_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// 队员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Teammates {
      get { return teammates_; }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 7;
    private int score_;
    /// <summary>
    /// pk得分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FShowTeamInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FShowTeamInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Max != other.Max) return false;
      if (TeamName != other.TeamName) return false;
      if (CaptainId != other.CaptainId) return false;
      if (CaptainHeadId != other.CaptainHeadId) return false;
      if (Faction != other.Faction) return false;
      if(!teammates_.Equals(other.teammates_)) return false;
      if (Score != other.Score) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Max != 0) hash ^= Max.GetHashCode();
      if (TeamName.Length != 0) hash ^= TeamName.GetHashCode();
      if (CaptainId != 0UL) hash ^= CaptainId.GetHashCode();
      if (CaptainHeadId != 0) hash ^= CaptainHeadId.GetHashCode();
      if (Faction != 0) hash ^= Faction.GetHashCode();
      hash ^= teammates_.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Max != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Max);
      }
      if (TeamName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TeamName);
      }
      if (CaptainId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(CaptainId);
      }
      if (CaptainHeadId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CaptainHeadId);
      }
      if (Faction != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Faction);
      }
      teammates_.WriteTo(output, _repeated_teammates_codec);
      if (Score != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Max != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Max);
      }
      if (TeamName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamName);
      }
      if (CaptainId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CaptainId);
      }
      if (CaptainHeadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CaptainHeadId);
      }
      if (Faction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Faction);
      }
      size += teammates_.CalculateSize(_repeated_teammates_codec);
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FShowTeamInfo other) {
      if (other == null) {
        return;
      }
      if (other.Max != 0) {
        Max = other.Max;
      }
      if (other.TeamName.Length != 0) {
        TeamName = other.TeamName;
      }
      if (other.CaptainId != 0UL) {
        CaptainId = other.CaptainId;
      }
      if (other.CaptainHeadId != 0) {
        CaptainHeadId = other.CaptainHeadId;
      }
      if (other.Faction != 0) {
        Faction = other.Faction;
      }
      teammates_.Add(other.teammates_);
      if (other.Score != 0) {
        Score = other.Score;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Max = input.ReadInt32();
            break;
          }
          case 18: {
            TeamName = input.ReadString();
            break;
          }
          case 24: {
            CaptainId = input.ReadUInt64();
            break;
          }
          case 32: {
            CaptainHeadId = input.ReadInt32();
            break;
          }
          case 40: {
            Faction = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            teammates_.AddEntriesFrom(input, _repeated_teammates_codec);
            break;
          }
          case 56: {
            Score = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 淘汰赛/决赛匹配信息
  /// </summary>
  public sealed partial class FShowMatchInfo : pb::IMessage<FShowMatchInfo> {
    private static readonly pb::MessageParser<FShowMatchInfo> _parser = new pb::MessageParser<FShowMatchInfo>(() => new FShowMatchInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FShowMatchInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[166]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FShowMatchInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FShowMatchInfo(FShowMatchInfo other) : this() {
      teamId_ = other.teamId_;
      winFaction_ = other.winFaction_;
      team_ = other.team_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FShowMatchInfo Clone() {
      return new FShowMatchInfo(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private int teamId_;
    /// <summary>
    /// 队伍id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "win_faction" field.</summary>
    public const int WinFactionFieldNumber = 2;
    private int winFaction_;
    /// <summary>
    /// 胜利方（双败为3）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinFaction {
      get { return winFaction_; }
      set {
        winFaction_ = value;
      }
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Stardom.FShowTeamInfo> _repeated_team_codec
        = pb::FieldCodec.ForMessage(26, global::Stardom.FShowTeamInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.FShowTeamInfo> team_ = new pbc::RepeatedField<global::Stardom.FShowTeamInfo>();
    /// <summary>
    /// 匹配队伍
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.FShowTeamInfo> Team {
      get { return team_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FShowMatchInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FShowMatchInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamId != other.TeamId) return false;
      if (WinFaction != other.WinFaction) return false;
      if(!team_.Equals(other.team_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamId != 0) hash ^= TeamId.GetHashCode();
      if (WinFaction != 0) hash ^= WinFaction.GetHashCode();
      hash ^= team_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TeamId);
      }
      if (WinFaction != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WinFaction);
      }
      team_.WriteTo(output, _repeated_team_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamId);
      }
      if (WinFaction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinFaction);
      }
      size += team_.CalculateSize(_repeated_team_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FShowMatchInfo other) {
      if (other == null) {
        return;
      }
      if (other.TeamId != 0) {
        TeamId = other.TeamId;
      }
      if (other.WinFaction != 0) {
        WinFaction = other.WinFaction;
      }
      team_.Add(other.team_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamId = input.ReadInt32();
            break;
          }
          case 16: {
            WinFaction = input.ReadInt32();
            break;
          }
          case 26: {
            team_.AddEntriesFrom(input, _repeated_team_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 决赛信息
  /// </summary>
  public sealed partial class FinalFactionInfo : pb::IMessage<FinalFactionInfo> {
    private static readonly pb::MessageParser<FinalFactionInfo> _parser = new pb::MessageParser<FinalFactionInfo>(() => new FinalFactionInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FinalFactionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[167]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinalFactionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinalFactionInfo(FinalFactionInfo other) : this() {
      faction_ = other.faction_;
      factionAdvisor_ = other.factionAdvisor_;
      FactionPc = other.factionPc_ != null ? other.FactionPc.Clone() : null;
      factionRevives_ = other.factionRevives_.Clone();
      revivableNum_ = other.revivableNum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinalFactionInfo Clone() {
      return new FinalFactionInfo(this);
    }

    /// <summary>Field number for the "faction" field.</summary>
    public const int FactionFieldNumber = 1;
    private int faction_;
    /// <summary>
    /// 所属势力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Faction {
      get { return faction_; }
      set {
        faction_ = value;
      }
    }

    /// <summary>Field number for the "faction_advisor" field.</summary>
    public const int FactionAdvisorFieldNumber = 2;
    private int factionAdvisor_;
    /// <summary>
    /// 导师
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FactionAdvisor {
      get { return factionAdvisor_; }
      set {
        factionAdvisor_ = value;
      }
    }

    /// <summary>Field number for the "faction_pc" field.</summary>
    public const int FactionPcFieldNumber = 3;
    private global::Stardom.FactionShowPacInfo factionPc_;
    /// <summary>
    /// 势力C位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.FactionShowPacInfo FactionPc {
      get { return factionPc_; }
      set {
        factionPc_ = value;
      }
    }

    /// <summary>Field number for the "faction_revives" field.</summary>
    public const int FactionRevivesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Stardom.FactionShowPacInfo> _repeated_factionRevives_codec
        = pb::FieldCodec.ForMessage(34, global::Stardom.FactionShowPacInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.FactionShowPacInfo> factionRevives_ = new pbc::RepeatedField<global::Stardom.FactionShowPacInfo>();
    /// <summary>
    /// 已复活列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.FactionShowPacInfo> FactionRevives {
      get { return factionRevives_; }
    }

    /// <summary>Field number for the "revivable_num" field.</summary>
    public const int RevivableNumFieldNumber = 5;
    private int revivableNum_;
    /// <summary>
    /// 复活列表人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RevivableNum {
      get { return revivableNum_; }
      set {
        revivableNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FinalFactionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FinalFactionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Faction != other.Faction) return false;
      if (FactionAdvisor != other.FactionAdvisor) return false;
      if (!object.Equals(FactionPc, other.FactionPc)) return false;
      if(!factionRevives_.Equals(other.factionRevives_)) return false;
      if (RevivableNum != other.RevivableNum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Faction != 0) hash ^= Faction.GetHashCode();
      if (FactionAdvisor != 0) hash ^= FactionAdvisor.GetHashCode();
      if (factionPc_ != null) hash ^= FactionPc.GetHashCode();
      hash ^= factionRevives_.GetHashCode();
      if (RevivableNum != 0) hash ^= RevivableNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Faction != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Faction);
      }
      if (FactionAdvisor != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FactionAdvisor);
      }
      if (factionPc_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(FactionPc);
      }
      factionRevives_.WriteTo(output, _repeated_factionRevives_codec);
      if (RevivableNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RevivableNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Faction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Faction);
      }
      if (FactionAdvisor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FactionAdvisor);
      }
      if (factionPc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FactionPc);
      }
      size += factionRevives_.CalculateSize(_repeated_factionRevives_codec);
      if (RevivableNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RevivableNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FinalFactionInfo other) {
      if (other == null) {
        return;
      }
      if (other.Faction != 0) {
        Faction = other.Faction;
      }
      if (other.FactionAdvisor != 0) {
        FactionAdvisor = other.FactionAdvisor;
      }
      if (other.factionPc_ != null) {
        if (factionPc_ == null) {
          factionPc_ = new global::Stardom.FactionShowPacInfo();
        }
        FactionPc.MergeFrom(other.FactionPc);
      }
      factionRevives_.Add(other.factionRevives_);
      if (other.RevivableNum != 0) {
        RevivableNum = other.RevivableNum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Faction = input.ReadInt32();
            break;
          }
          case 16: {
            FactionAdvisor = input.ReadInt32();
            break;
          }
          case 26: {
            if (factionPc_ == null) {
              factionPc_ = new global::Stardom.FactionShowPacInfo();
            }
            input.ReadMessage(factionPc_);
            break;
          }
          case 34: {
            factionRevives_.AddEntriesFrom(input, _repeated_factionRevives_codec);
            break;
          }
          case 40: {
            RevivableNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 时装信息
  /// </summary>
  public sealed partial class PlayerFashionInfo : pb::IMessage<PlayerFashionInfo> {
    private static readonly pb::MessageParser<PlayerFashionInfo> _parser = new pb::MessageParser<PlayerFashionInfo>(() => new PlayerFashionInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerFashionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[168]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerFashionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerFashionInfo(PlayerFashionInfo other) : this() {
      hairId_ = other.hairId_;
      hairColor_ = other.hairColor_;
      eyeShapeId_ = other.eyeShapeId_;
      eyeColorId_ = other.eyeColorId_;
      lipstickId_ = other.lipstickId_;
      faceId_ = other.faceId_;
      isSelect_ = other.isSelect_;
      addFans_ = other.addFans_;
      packages_ = other.packages_.Clone();
      Warehouse = other.warehouse_ != null ? other.Warehouse.Clone() : null;
      partColor_ = other.partColor_.Clone();
      dressSchemeId_ = other.dressSchemeId_;
      schemeInfos_ = other.schemeInfos_.Clone();
      brandInfos_ = other.brandInfos_.Clone();
      hairColorTimes_ = other.hairColorTimes_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerFashionInfo Clone() {
      return new PlayerFashionInfo(this);
    }

    /// <summary>Field number for the "hair_id" field.</summary>
    public const int HairIdFieldNumber = 1;
    private int hairId_;
    /// <summary>
    /// 发型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HairId {
      get { return hairId_; }
      set {
        hairId_ = value;
      }
    }

    /// <summary>Field number for the "hair_color" field.</summary>
    public const int HairColorFieldNumber = 2;
    private string hairColor_ = "";
    /// <summary>
    /// 发色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HairColor {
      get { return hairColor_; }
      set {
        hairColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "eye_shape_id" field.</summary>
    public const int EyeShapeIdFieldNumber = 3;
    private int eyeShapeId_;
    /// <summary>
    /// 眼睛形状
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EyeShapeId {
      get { return eyeShapeId_; }
      set {
        eyeShapeId_ = value;
      }
    }

    /// <summary>Field number for the "eye_color_id" field.</summary>
    public const int EyeColorIdFieldNumber = 4;
    private int eyeColorId_;
    /// <summary>
    /// 眼睛颜色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EyeColorId {
      get { return eyeColorId_; }
      set {
        eyeColorId_ = value;
      }
    }

    /// <summary>Field number for the "lipstick_id" field.</summary>
    public const int LipstickIdFieldNumber = 5;
    private int lipstickId_;
    /// <summary>
    /// 口红 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LipstickId {
      get { return lipstickId_; }
      set {
        lipstickId_ = value;
      }
    }

    /// <summary>Field number for the "face_id" field.</summary>
    public const int FaceIdFieldNumber = 6;
    private int faceId_;
    /// <summary>
    /// 脸部
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FaceId {
      get { return faceId_; }
      set {
        faceId_ = value;
      }
    }

    /// <summary>Field number for the "is_select" field.</summary>
    public const int IsSelectFieldNumber = 7;
    private int isSelect_;
    /// <summary>
    /// 是否选择初始时装
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsSelect {
      get { return isSelect_; }
      set {
        isSelect_ = value;
      }
    }

    /// <summary>Field number for the "add_fans" field.</summary>
    public const int AddFansFieldNumber = 8;
    private int addFans_;
    /// <summary>
    /// 时装增加的总粉丝
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddFans {
      get { return addFans_; }
      set {
        addFans_ = value;
      }
    }

    /// <summary>Field number for the "packages" field.</summary>
    public const int PackagesFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Stardom.FashionPackageInfo> _repeated_packages_codec
        = pb::FieldCodec.ForMessage(82, global::Stardom.FashionPackageInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.FashionPackageInfo> packages_ = new pbc::RepeatedField<global::Stardom.FashionPackageInfo>();
    /// <summary>
    /// 时装包列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.FashionPackageInfo> Packages {
      get { return packages_; }
    }

    /// <summary>Field number for the "warehouse" field.</summary>
    public const int WarehouseFieldNumber = 11;
    private global::Stardom.FashionWarehouseInfo warehouse_;
    /// <summary>
    /// 所有时装部件仓库
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.FashionWarehouseInfo Warehouse {
      get { return warehouse_; }
      set {
        warehouse_ = value;
      }
    }

    /// <summary>Field number for the "part_color" field.</summary>
    public const int PartColorFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Stardom.FashionPartColor> _repeated_partColor_codec
        = pb::FieldCodec.ForMessage(98, global::Stardom.FashionPartColor.Parser);
    private readonly pbc::RepeatedField<global::Stardom.FashionPartColor> partColor_ = new pbc::RepeatedField<global::Stardom.FashionPartColor>();
    /// <summary>
    /// 部位颜色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.FashionPartColor> PartColor {
      get { return partColor_; }
    }

    /// <summary>Field number for the "dress_scheme_id" field.</summary>
    public const int DressSchemeIdFieldNumber = 13;
    private int dressSchemeId_;
    /// <summary>
    /// 当前使用自定义方案id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DressSchemeId {
      get { return dressSchemeId_; }
      set {
        dressSchemeId_ = value;
      }
    }

    /// <summary>Field number for the "scheme_infos" field.</summary>
    public const int SchemeInfosFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Stardom.FashionSchemeInfo> _repeated_schemeInfos_codec
        = pb::FieldCodec.ForMessage(114, global::Stardom.FashionSchemeInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.FashionSchemeInfo> schemeInfos_ = new pbc::RepeatedField<global::Stardom.FashionSchemeInfo>();
    /// <summary>
    /// 自定义方案信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.FashionSchemeInfo> SchemeInfos {
      get { return schemeInfos_; }
    }

    /// <summary>Field number for the "brand_infos" field.</summary>
    public const int BrandInfosFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Stardom.FashionBrandInfo> _repeated_brandInfos_codec
        = pb::FieldCodec.ForMessage(122, global::Stardom.FashionBrandInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.FashionBrandInfo> brandInfos_ = new pbc::RepeatedField<global::Stardom.FashionBrandInfo>();
    /// <summary>
    /// 品牌信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.FashionBrandInfo> BrandInfos {
      get { return brandInfos_; }
    }

    /// <summary>Field number for the "hair_color_times" field.</summary>
    public const int HairColorTimesFieldNumber = 20;
    private int hairColorTimes_;
    /// <summary>
    /// 头发染色总次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HairColorTimes {
      get { return hairColorTimes_; }
      set {
        hairColorTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerFashionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerFashionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HairId != other.HairId) return false;
      if (HairColor != other.HairColor) return false;
      if (EyeShapeId != other.EyeShapeId) return false;
      if (EyeColorId != other.EyeColorId) return false;
      if (LipstickId != other.LipstickId) return false;
      if (FaceId != other.FaceId) return false;
      if (IsSelect != other.IsSelect) return false;
      if (AddFans != other.AddFans) return false;
      if(!packages_.Equals(other.packages_)) return false;
      if (!object.Equals(Warehouse, other.Warehouse)) return false;
      if(!partColor_.Equals(other.partColor_)) return false;
      if (DressSchemeId != other.DressSchemeId) return false;
      if(!schemeInfos_.Equals(other.schemeInfos_)) return false;
      if(!brandInfos_.Equals(other.brandInfos_)) return false;
      if (HairColorTimes != other.HairColorTimes) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HairId != 0) hash ^= HairId.GetHashCode();
      if (HairColor.Length != 0) hash ^= HairColor.GetHashCode();
      if (EyeShapeId != 0) hash ^= EyeShapeId.GetHashCode();
      if (EyeColorId != 0) hash ^= EyeColorId.GetHashCode();
      if (LipstickId != 0) hash ^= LipstickId.GetHashCode();
      if (FaceId != 0) hash ^= FaceId.GetHashCode();
      if (IsSelect != 0) hash ^= IsSelect.GetHashCode();
      if (AddFans != 0) hash ^= AddFans.GetHashCode();
      hash ^= packages_.GetHashCode();
      if (warehouse_ != null) hash ^= Warehouse.GetHashCode();
      hash ^= partColor_.GetHashCode();
      if (DressSchemeId != 0) hash ^= DressSchemeId.GetHashCode();
      hash ^= schemeInfos_.GetHashCode();
      hash ^= brandInfos_.GetHashCode();
      if (HairColorTimes != 0) hash ^= HairColorTimes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HairId);
      }
      if (HairColor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(HairColor);
      }
      if (EyeShapeId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EyeShapeId);
      }
      if (EyeColorId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EyeColorId);
      }
      if (LipstickId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LipstickId);
      }
      if (FaceId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FaceId);
      }
      if (IsSelect != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(IsSelect);
      }
      if (AddFans != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(AddFans);
      }
      packages_.WriteTo(output, _repeated_packages_codec);
      if (warehouse_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Warehouse);
      }
      partColor_.WriteTo(output, _repeated_partColor_codec);
      if (DressSchemeId != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(DressSchemeId);
      }
      schemeInfos_.WriteTo(output, _repeated_schemeInfos_codec);
      brandInfos_.WriteTo(output, _repeated_brandInfos_codec);
      if (HairColorTimes != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(HairColorTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HairId);
      }
      if (HairColor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HairColor);
      }
      if (EyeShapeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EyeShapeId);
      }
      if (EyeColorId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EyeColorId);
      }
      if (LipstickId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LipstickId);
      }
      if (FaceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FaceId);
      }
      if (IsSelect != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsSelect);
      }
      if (AddFans != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddFans);
      }
      size += packages_.CalculateSize(_repeated_packages_codec);
      if (warehouse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Warehouse);
      }
      size += partColor_.CalculateSize(_repeated_partColor_codec);
      if (DressSchemeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DressSchemeId);
      }
      size += schemeInfos_.CalculateSize(_repeated_schemeInfos_codec);
      size += brandInfos_.CalculateSize(_repeated_brandInfos_codec);
      if (HairColorTimes != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HairColorTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerFashionInfo other) {
      if (other == null) {
        return;
      }
      if (other.HairId != 0) {
        HairId = other.HairId;
      }
      if (other.HairColor.Length != 0) {
        HairColor = other.HairColor;
      }
      if (other.EyeShapeId != 0) {
        EyeShapeId = other.EyeShapeId;
      }
      if (other.EyeColorId != 0) {
        EyeColorId = other.EyeColorId;
      }
      if (other.LipstickId != 0) {
        LipstickId = other.LipstickId;
      }
      if (other.FaceId != 0) {
        FaceId = other.FaceId;
      }
      if (other.IsSelect != 0) {
        IsSelect = other.IsSelect;
      }
      if (other.AddFans != 0) {
        AddFans = other.AddFans;
      }
      packages_.Add(other.packages_);
      if (other.warehouse_ != null) {
        if (warehouse_ == null) {
          warehouse_ = new global::Stardom.FashionWarehouseInfo();
        }
        Warehouse.MergeFrom(other.Warehouse);
      }
      partColor_.Add(other.partColor_);
      if (other.DressSchemeId != 0) {
        DressSchemeId = other.DressSchemeId;
      }
      schemeInfos_.Add(other.schemeInfos_);
      brandInfos_.Add(other.brandInfos_);
      if (other.HairColorTimes != 0) {
        HairColorTimes = other.HairColorTimes;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HairId = input.ReadInt32();
            break;
          }
          case 18: {
            HairColor = input.ReadString();
            break;
          }
          case 24: {
            EyeShapeId = input.ReadInt32();
            break;
          }
          case 32: {
            EyeColorId = input.ReadInt32();
            break;
          }
          case 40: {
            LipstickId = input.ReadInt32();
            break;
          }
          case 48: {
            FaceId = input.ReadInt32();
            break;
          }
          case 56: {
            IsSelect = input.ReadInt32();
            break;
          }
          case 64: {
            AddFans = input.ReadInt32();
            break;
          }
          case 82: {
            packages_.AddEntriesFrom(input, _repeated_packages_codec);
            break;
          }
          case 90: {
            if (warehouse_ == null) {
              warehouse_ = new global::Stardom.FashionWarehouseInfo();
            }
            input.ReadMessage(warehouse_);
            break;
          }
          case 98: {
            partColor_.AddEntriesFrom(input, _repeated_partColor_codec);
            break;
          }
          case 104: {
            DressSchemeId = input.ReadInt32();
            break;
          }
          case 114: {
            schemeInfos_.AddEntriesFrom(input, _repeated_schemeInfos_codec);
            break;
          }
          case 122: {
            brandInfos_.AddEntriesFrom(input, _repeated_brandInfos_codec);
            break;
          }
          case 160: {
            HairColorTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 时装部位信息
  /// </summary>
  public sealed partial class FashionPartInfo : pb::IMessage<FashionPartInfo> {
    private static readonly pb::MessageParser<FashionPartInfo> _parser = new pb::MessageParser<FashionPartInfo>(() => new FashionPartInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FashionPartInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[169]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FashionPartInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FashionPartInfo(FashionPartInfo other) : this() {
      Base = other.base_ != null ? other.Base.Clone() : null;
      gotTime_ = other.gotTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FashionPartInfo Clone() {
      return new FashionPartInfo(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Stardom.ItemBaseInfo base_;
    /// <summary>
    /// 物品基础数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.ItemBaseInfo Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "got_time" field.</summary>
    public const int GotTimeFieldNumber = 2;
    private ulong gotTime_;
    /// <summary>
    /// 获得时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GotTime {
      get { return gotTime_; }
      set {
        gotTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FashionPartInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FashionPartInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if (GotTime != other.GotTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      if (GotTime != 0UL) hash ^= GotTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (GotTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(GotTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (GotTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GotTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FashionPartInfo other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          base_ = new global::Stardom.ItemBaseInfo();
        }
        Base.MergeFrom(other.Base);
      }
      if (other.GotTime != 0UL) {
        GotTime = other.GotTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (base_ == null) {
              base_ = new global::Stardom.ItemBaseInfo();
            }
            input.ReadMessage(base_);
            break;
          }
          case 16: {
            GotTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 时装穿戴的部件信息
  /// </summary>
  public sealed partial class FashionDressPart : pb::IMessage<FashionDressPart> {
    private static readonly pb::MessageParser<FashionDressPart> _parser = new pb::MessageParser<FashionDressPart>(() => new FashionDressPart());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FashionDressPart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[170]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FashionDressPart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FashionDressPart(FashionDressPart other) : this() {
      partType_ = other.partType_;
      fashionId_ = other.fashionId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FashionDressPart Clone() {
      return new FashionDressPart(this);
    }

    /// <summary>Field number for the "part_type" field.</summary>
    public const int PartTypeFieldNumber = 1;
    private int partType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PartType {
      get { return partType_; }
      set {
        partType_ = value;
      }
    }

    /// <summary>Field number for the "fashion_id" field.</summary>
    public const int FashionIdFieldNumber = 2;
    private int fashionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FashionId {
      get { return fashionId_; }
      set {
        fashionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FashionDressPart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FashionDressPart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PartType != other.PartType) return false;
      if (FashionId != other.FashionId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PartType != 0) hash ^= PartType.GetHashCode();
      if (FashionId != 0) hash ^= FashionId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PartType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PartType);
      }
      if (FashionId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FashionId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PartType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PartType);
      }
      if (FashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FashionId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FashionDressPart other) {
      if (other == null) {
        return;
      }
      if (other.PartType != 0) {
        PartType = other.PartType;
      }
      if (other.FashionId != 0) {
        FashionId = other.FashionId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PartType = input.ReadInt32();
            break;
          }
          case 16: {
            FashionId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 时装部位颜色信息
  /// </summary>
  public sealed partial class FashionPartColor : pb::IMessage<FashionPartColor> {
    private static readonly pb::MessageParser<FashionPartColor> _parser = new pb::MessageParser<FashionPartColor>(() => new FashionPartColor());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FashionPartColor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[171]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FashionPartColor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FashionPartColor(FashionPartColor other) : this() {
      fashionId_ = other.fashionId_;
      color_ = other.color_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FashionPartColor Clone() {
      return new FashionPartColor(this);
    }

    /// <summary>Field number for the "fashion_id" field.</summary>
    public const int FashionIdFieldNumber = 1;
    private int fashionId_;
    /// <summary>
    /// 时装id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FashionId {
      get { return fashionId_; }
      set {
        fashionId_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 2;
    private string color_ = "";
    /// <summary>
    /// 颜色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Color {
      get { return color_; }
      set {
        color_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FashionPartColor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FashionPartColor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FashionId != other.FashionId) return false;
      if (Color != other.Color) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FashionId != 0) hash ^= FashionId.GetHashCode();
      if (Color.Length != 0) hash ^= Color.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FashionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FashionId);
      }
      if (Color.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Color);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FashionId);
      }
      if (Color.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Color);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FashionPartColor other) {
      if (other == null) {
        return;
      }
      if (other.FashionId != 0) {
        FashionId = other.FashionId;
      }
      if (other.Color.Length != 0) {
        Color = other.Color;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FashionId = input.ReadInt32();
            break;
          }
          case 18: {
            Color = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 时装自定义方案信息
  /// </summary>
  public sealed partial class FashionSchemeInfo : pb::IMessage<FashionSchemeInfo> {
    private static readonly pb::MessageParser<FashionSchemeInfo> _parser = new pb::MessageParser<FashionSchemeInfo>(() => new FashionSchemeInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FashionSchemeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[172]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FashionSchemeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FashionSchemeInfo(FashionSchemeInfo other) : this() {
      schemeId_ = other.schemeId_;
      name_ = other.name_;
      isUnlock_ = other.isUnlock_;
      hairColor_ = other.hairColor_;
      dressFashionParts_ = other.dressFashionParts_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FashionSchemeInfo Clone() {
      return new FashionSchemeInfo(this);
    }

    /// <summary>Field number for the "scheme_id" field.</summary>
    public const int SchemeIdFieldNumber = 1;
    private int schemeId_;
    /// <summary>
    /// 方案id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SchemeId {
      get { return schemeId_; }
      set {
        schemeId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_unlock" field.</summary>
    public const int IsUnlockFieldNumber = 3;
    private int isUnlock_;
    /// <summary>
    /// 是否解锁
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsUnlock {
      get { return isUnlock_; }
      set {
        isUnlock_ = value;
      }
    }

    /// <summary>Field number for the "hair_color" field.</summary>
    public const int HairColorFieldNumber = 4;
    private string hairColor_ = "";
    /// <summary>
    /// 头发颜色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HairColor {
      get { return hairColor_; }
      set {
        hairColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dress_fashion_parts" field.</summary>
    public const int DressFashionPartsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Stardom.FashionDressPart> _repeated_dressFashionParts_codec
        = pb::FieldCodec.ForMessage(42, global::Stardom.FashionDressPart.Parser);
    private readonly pbc::RepeatedField<global::Stardom.FashionDressPart> dressFashionParts_ = new pbc::RepeatedField<global::Stardom.FashionDressPart>();
    /// <summary>
    /// 时装穿戴部位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.FashionDressPart> DressFashionParts {
      get { return dressFashionParts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FashionSchemeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FashionSchemeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SchemeId != other.SchemeId) return false;
      if (Name != other.Name) return false;
      if (IsUnlock != other.IsUnlock) return false;
      if (HairColor != other.HairColor) return false;
      if(!dressFashionParts_.Equals(other.dressFashionParts_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SchemeId != 0) hash ^= SchemeId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (IsUnlock != 0) hash ^= IsUnlock.GetHashCode();
      if (HairColor.Length != 0) hash ^= HairColor.GetHashCode();
      hash ^= dressFashionParts_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SchemeId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SchemeId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (IsUnlock != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IsUnlock);
      }
      if (HairColor.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(HairColor);
      }
      dressFashionParts_.WriteTo(output, _repeated_dressFashionParts_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SchemeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SchemeId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (IsUnlock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsUnlock);
      }
      if (HairColor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HairColor);
      }
      size += dressFashionParts_.CalculateSize(_repeated_dressFashionParts_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FashionSchemeInfo other) {
      if (other == null) {
        return;
      }
      if (other.SchemeId != 0) {
        SchemeId = other.SchemeId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.IsUnlock != 0) {
        IsUnlock = other.IsUnlock;
      }
      if (other.HairColor.Length != 0) {
        HairColor = other.HairColor;
      }
      dressFashionParts_.Add(other.dressFashionParts_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SchemeId = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            IsUnlock = input.ReadInt32();
            break;
          }
          case 34: {
            HairColor = input.ReadString();
            break;
          }
          case 42: {
            dressFashionParts_.AddEntriesFrom(input, _repeated_dressFashionParts_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 单个时装包
  /// </summary>
  public sealed partial class FashionPackageInfo : pb::IMessage<FashionPackageInfo> {
    private static readonly pb::MessageParser<FashionPackageInfo> _parser = new pb::MessageParser<FashionPackageInfo>(() => new FashionPackageInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FashionPackageInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[173]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FashionPackageInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FashionPackageInfo(FashionPackageInfo other) : this() {
      fashionPackageId_ = other.fashionPackageId_;
      isComplete_ = other.isComplete_;
      isUnlock_ = other.isUnlock_;
      hairColor_ = other.hairColor_;
      completeTime_ = other.completeTime_;
      isReward_ = other.isReward_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FashionPackageInfo Clone() {
      return new FashionPackageInfo(this);
    }

    /// <summary>Field number for the "fashion_package_id" field.</summary>
    public const int FashionPackageIdFieldNumber = 1;
    private int fashionPackageId_;
    /// <summary>
    /// 时装包id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FashionPackageId {
      get { return fashionPackageId_; }
      set {
        fashionPackageId_ = value;
      }
    }

    /// <summary>Field number for the "is_complete" field.</summary>
    public const int IsCompleteFieldNumber = 2;
    private int isComplete_;
    /// <summary>
    /// 是否激活集齐
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsComplete {
      get { return isComplete_; }
      set {
        isComplete_ = value;
      }
    }

    /// <summary>Field number for the "is_unlock" field.</summary>
    public const int IsUnlockFieldNumber = 3;
    private int isUnlock_;
    /// <summary>
    /// 是否解锁
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsUnlock {
      get { return isUnlock_; }
      set {
        isUnlock_ = value;
      }
    }

    /// <summary>Field number for the "hair_color" field.</summary>
    public const int HairColorFieldNumber = 4;
    private string hairColor_ = "";
    /// <summary>
    /// 头发颜色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HairColor {
      get { return hairColor_; }
      set {
        hairColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "complete_time" field.</summary>
    public const int CompleteTimeFieldNumber = 6;
    private ulong completeTime_;
    /// <summary>
    /// 集齐时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CompleteTime {
      get { return completeTime_; }
      set {
        completeTime_ = value;
      }
    }

    /// <summary>Field number for the "is_reward" field.</summary>
    public const int IsRewardFieldNumber = 7;
    private int isReward_;
    /// <summary>
    /// 是否领奖(制作时装包搜集奖励)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsReward {
      get { return isReward_; }
      set {
        isReward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FashionPackageInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FashionPackageInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FashionPackageId != other.FashionPackageId) return false;
      if (IsComplete != other.IsComplete) return false;
      if (IsUnlock != other.IsUnlock) return false;
      if (HairColor != other.HairColor) return false;
      if (CompleteTime != other.CompleteTime) return false;
      if (IsReward != other.IsReward) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FashionPackageId != 0) hash ^= FashionPackageId.GetHashCode();
      if (IsComplete != 0) hash ^= IsComplete.GetHashCode();
      if (IsUnlock != 0) hash ^= IsUnlock.GetHashCode();
      if (HairColor.Length != 0) hash ^= HairColor.GetHashCode();
      if (CompleteTime != 0UL) hash ^= CompleteTime.GetHashCode();
      if (IsReward != 0) hash ^= IsReward.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FashionPackageId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FashionPackageId);
      }
      if (IsComplete != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(IsComplete);
      }
      if (IsUnlock != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IsUnlock);
      }
      if (HairColor.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(HairColor);
      }
      if (CompleteTime != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(CompleteTime);
      }
      if (IsReward != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(IsReward);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FashionPackageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FashionPackageId);
      }
      if (IsComplete != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsComplete);
      }
      if (IsUnlock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsUnlock);
      }
      if (HairColor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HairColor);
      }
      if (CompleteTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CompleteTime);
      }
      if (IsReward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsReward);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FashionPackageInfo other) {
      if (other == null) {
        return;
      }
      if (other.FashionPackageId != 0) {
        FashionPackageId = other.FashionPackageId;
      }
      if (other.IsComplete != 0) {
        IsComplete = other.IsComplete;
      }
      if (other.IsUnlock != 0) {
        IsUnlock = other.IsUnlock;
      }
      if (other.HairColor.Length != 0) {
        HairColor = other.HairColor;
      }
      if (other.CompleteTime != 0UL) {
        CompleteTime = other.CompleteTime;
      }
      if (other.IsReward != 0) {
        IsReward = other.IsReward;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FashionPackageId = input.ReadInt32();
            break;
          }
          case 16: {
            IsComplete = input.ReadInt32();
            break;
          }
          case 24: {
            IsUnlock = input.ReadInt32();
            break;
          }
          case 34: {
            HairColor = input.ReadString();
            break;
          }
          case 48: {
            CompleteTime = input.ReadUInt64();
            break;
          }
          case 56: {
            IsReward = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 时装仓库
  /// </summary>
  public sealed partial class FashionWarehouseInfo : pb::IMessage<FashionWarehouseInfo> {
    private static readonly pb::MessageParser<FashionWarehouseInfo> _parser = new pb::MessageParser<FashionWarehouseInfo>(() => new FashionWarehouseInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FashionWarehouseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[174]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FashionWarehouseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FashionWarehouseInfo(FashionWarehouseInfo other) : this() {
      fashionParts_ = other.fashionParts_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FashionWarehouseInfo Clone() {
      return new FashionWarehouseInfo(this);
    }

    /// <summary>Field number for the "fashion_parts" field.</summary>
    public const int FashionPartsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Stardom.FashionPartInfo> _repeated_fashionParts_codec
        = pb::FieldCodec.ForMessage(10, global::Stardom.FashionPartInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.FashionPartInfo> fashionParts_ = new pbc::RepeatedField<global::Stardom.FashionPartInfo>();
    /// <summary>
    /// 部件信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.FashionPartInfo> FashionParts {
      get { return fashionParts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FashionWarehouseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FashionWarehouseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fashionParts_.Equals(other.fashionParts_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fashionParts_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      fashionParts_.WriteTo(output, _repeated_fashionParts_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fashionParts_.CalculateSize(_repeated_fashionParts_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FashionWarehouseInfo other) {
      if (other == null) {
        return;
      }
      fashionParts_.Add(other.fashionParts_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            fashionParts_.AddEntriesFrom(input, _repeated_fashionParts_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 时装品牌信息
  /// </summary>
  public sealed partial class FashionBrandInfo : pb::IMessage<FashionBrandInfo> {
    private static readonly pb::MessageParser<FashionBrandInfo> _parser = new pb::MessageParser<FashionBrandInfo>(() => new FashionBrandInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FashionBrandInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[175]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FashionBrandInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FashionBrandInfo(FashionBrandInfo other) : this() {
      brandId_ = other.brandId_;
      level_ = other.level_;
      score_ = other.score_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FashionBrandInfo Clone() {
      return new FashionBrandInfo(this);
    }

    /// <summary>Field number for the "brand_id" field.</summary>
    public const int BrandIdFieldNumber = 1;
    private int brandId_;
    /// <summary>
    /// 品牌id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BrandId {
      get { return brandId_; }
      set {
        brandId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private int score_;
    /// <summary>
    /// 积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FashionBrandInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FashionBrandInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BrandId != other.BrandId) return false;
      if (Level != other.Level) return false;
      if (Score != other.Score) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BrandId != 0) hash ^= BrandId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BrandId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BrandId);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (Score != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BrandId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BrandId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FashionBrandInfo other) {
      if (other == null) {
        return;
      }
      if (other.BrandId != 0) {
        BrandId = other.BrandId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BrandId = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 24: {
            Score = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 时装关卡
  /// 挑战时装关卡所需数据
  /// </summary>
  public sealed partial class FashionStageChallengeInfo : pb::IMessage<FashionStageChallengeInfo> {
    private static readonly pb::MessageParser<FashionStageChallengeInfo> _parser = new pb::MessageParser<FashionStageChallengeInfo>(() => new FashionStageChallengeInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FashionStageChallengeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[176]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FashionStageChallengeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FashionStageChallengeInfo(FashionStageChallengeInfo other) : this() {
      fashionParts_ = other.fashionParts_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FashionStageChallengeInfo Clone() {
      return new FashionStageChallengeInfo(this);
    }

    /// <summary>Field number for the "fashion_parts" field.</summary>
    public const int FashionPartsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Stardom.FashionDressPart> _repeated_fashionParts_codec
        = pb::FieldCodec.ForMessage(18, global::Stardom.FashionDressPart.Parser);
    private readonly pbc::RepeatedField<global::Stardom.FashionDressPart> fashionParts_ = new pbc::RepeatedField<global::Stardom.FashionDressPart>();
    /// <summary>
    /// 时装信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.FashionDressPart> FashionParts {
      get { return fashionParts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FashionStageChallengeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FashionStageChallengeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fashionParts_.Equals(other.fashionParts_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fashionParts_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      fashionParts_.WriteTo(output, _repeated_fashionParts_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fashionParts_.CalculateSize(_repeated_fashionParts_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FashionStageChallengeInfo other) {
      if (other == null) {
        return;
      }
      fashionParts_.Add(other.fashionParts_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            fashionParts_.AddEntriesFrom(input, _repeated_fashionParts_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 时装属性得分
  /// </summary>
  public sealed partial class FashionAttrScore : pb::IMessage<FashionAttrScore> {
    private static readonly pb::MessageParser<FashionAttrScore> _parser = new pb::MessageParser<FashionAttrScore>(() => new FashionAttrScore());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FashionAttrScore> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[177]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FashionAttrScore() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FashionAttrScore(FashionAttrScore other) : this() {
      attrType_ = other.attrType_;
      score_ = other.score_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FashionAttrScore Clone() {
      return new FashionAttrScore(this);
    }

    /// <summary>Field number for the "attr_type" field.</summary>
    public const int AttrTypeFieldNumber = 1;
    private int attrType_;
    /// <summary>
    /// 属性类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttrType {
      get { return attrType_; }
      set {
        attrType_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private int score_;
    /// <summary>
    /// 得分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FashionAttrScore);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FashionAttrScore other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AttrType != other.AttrType) return false;
      if (Score != other.Score) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AttrType != 0) hash ^= AttrType.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AttrType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AttrType);
      }
      if (Score != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttrType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttrType);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FashionAttrScore other) {
      if (other == null) {
        return;
      }
      if (other.AttrType != 0) {
        AttrType = other.AttrType;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AttrType = input.ReadInt32();
            break;
          }
          case 16: {
            Score = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 作品上映相关
  /// 作品上映角色信息
  /// </summary>
  public sealed partial class PlayerAVWorkShowInfo : pb::IMessage<PlayerAVWorkShowInfo> {
    private static readonly pb::MessageParser<PlayerAVWorkShowInfo> _parser = new pb::MessageParser<PlayerAVWorkShowInfo>(() => new PlayerAVWorkShowInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerAVWorkShowInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[178]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAVWorkShowInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAVWorkShowInfo(PlayerAVWorkShowInfo other) : this() {
      hallInfo_ = other.hallInfo_.Clone();
      enjoyTimes_ = other.enjoyTimes_;
      snackCdTime_ = other.snackCdTime_;
      shareFriendTimes_ = other.shareFriendTimes_;
      shareWorldTimes_ = other.shareWorldTimes_;
      shareGuildTimes_ = other.shareGuildTimes_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAVWorkShowInfo Clone() {
      return new PlayerAVWorkShowInfo(this);
    }

    /// <summary>Field number for the "hall_info" field.</summary>
    public const int HallInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Stardom.AVWorkShowPlayerHallInfo> _repeated_hallInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Stardom.AVWorkShowPlayerHallInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.AVWorkShowPlayerHallInfo> hallInfo_ = new pbc::RepeatedField<global::Stardom.AVWorkShowPlayerHallInfo>();
    /// <summary>
    /// 放映厅信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.AVWorkShowPlayerHallInfo> HallInfo {
      get { return hallInfo_; }
    }

    /// <summary>Field number for the "enjoy_times" field.</summary>
    public const int EnjoyTimesFieldNumber = 2;
    private int enjoyTimes_;
    /// <summary>
    /// 已点赞次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EnjoyTimes {
      get { return enjoyTimes_; }
      set {
        enjoyTimes_ = value;
      }
    }

    /// <summary>Field number for the "snack_cd_time" field.</summary>
    public const int SnackCdTimeFieldNumber = 3;
    private ulong snackCdTime_;
    /// <summary>
    /// 掏零食cd时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SnackCdTime {
      get { return snackCdTime_; }
      set {
        snackCdTime_ = value;
      }
    }

    /// <summary>Field number for the "share_friend_times" field.</summary>
    public const int ShareFriendTimesFieldNumber = 4;
    private int shareFriendTimes_;
    /// <summary>
    /// 分享好友次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShareFriendTimes {
      get { return shareFriendTimes_; }
      set {
        shareFriendTimes_ = value;
      }
    }

    /// <summary>Field number for the "share_world_times" field.</summary>
    public const int ShareWorldTimesFieldNumber = 5;
    private int shareWorldTimes_;
    /// <summary>
    /// 分享世界次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShareWorldTimes {
      get { return shareWorldTimes_; }
      set {
        shareWorldTimes_ = value;
      }
    }

    /// <summary>Field number for the "share_guild_times" field.</summary>
    public const int ShareGuildTimesFieldNumber = 6;
    private int shareGuildTimes_;
    /// <summary>
    /// 分享协会次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShareGuildTimes {
      get { return shareGuildTimes_; }
      set {
        shareGuildTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerAVWorkShowInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerAVWorkShowInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!hallInfo_.Equals(other.hallInfo_)) return false;
      if (EnjoyTimes != other.EnjoyTimes) return false;
      if (SnackCdTime != other.SnackCdTime) return false;
      if (ShareFriendTimes != other.ShareFriendTimes) return false;
      if (ShareWorldTimes != other.ShareWorldTimes) return false;
      if (ShareGuildTimes != other.ShareGuildTimes) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= hallInfo_.GetHashCode();
      if (EnjoyTimes != 0) hash ^= EnjoyTimes.GetHashCode();
      if (SnackCdTime != 0UL) hash ^= SnackCdTime.GetHashCode();
      if (ShareFriendTimes != 0) hash ^= ShareFriendTimes.GetHashCode();
      if (ShareWorldTimes != 0) hash ^= ShareWorldTimes.GetHashCode();
      if (ShareGuildTimes != 0) hash ^= ShareGuildTimes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      hallInfo_.WriteTo(output, _repeated_hallInfo_codec);
      if (EnjoyTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EnjoyTimes);
      }
      if (SnackCdTime != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(SnackCdTime);
      }
      if (ShareFriendTimes != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ShareFriendTimes);
      }
      if (ShareWorldTimes != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ShareWorldTimes);
      }
      if (ShareGuildTimes != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ShareGuildTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += hallInfo_.CalculateSize(_repeated_hallInfo_codec);
      if (EnjoyTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnjoyTimes);
      }
      if (SnackCdTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SnackCdTime);
      }
      if (ShareFriendTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShareFriendTimes);
      }
      if (ShareWorldTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShareWorldTimes);
      }
      if (ShareGuildTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShareGuildTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerAVWorkShowInfo other) {
      if (other == null) {
        return;
      }
      hallInfo_.Add(other.hallInfo_);
      if (other.EnjoyTimes != 0) {
        EnjoyTimes = other.EnjoyTimes;
      }
      if (other.SnackCdTime != 0UL) {
        SnackCdTime = other.SnackCdTime;
      }
      if (other.ShareFriendTimes != 0) {
        ShareFriendTimes = other.ShareFriendTimes;
      }
      if (other.ShareWorldTimes != 0) {
        ShareWorldTimes = other.ShareWorldTimes;
      }
      if (other.ShareGuildTimes != 0) {
        ShareGuildTimes = other.ShareGuildTimes;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            hallInfo_.AddEntriesFrom(input, _repeated_hallInfo_codec);
            break;
          }
          case 16: {
            EnjoyTimes = input.ReadInt32();
            break;
          }
          case 24: {
            SnackCdTime = input.ReadUInt64();
            break;
          }
          case 32: {
            ShareFriendTimes = input.ReadInt32();
            break;
          }
          case 40: {
            ShareWorldTimes = input.ReadInt32();
            break;
          }
          case 48: {
            ShareGuildTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 作品上映角色放映厅信息
  /// </summary>
  public sealed partial class AVWorkShowPlayerHallInfo : pb::IMessage<AVWorkShowPlayerHallInfo> {
    private static readonly pb::MessageParser<AVWorkShowPlayerHallInfo> _parser = new pb::MessageParser<AVWorkShowPlayerHallInfo>(() => new AVWorkShowPlayerHallInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AVWorkShowPlayerHallInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[179]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowPlayerHallInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowPlayerHallInfo(AVWorkShowPlayerHallInfo other) : this() {
      cid_ = other.cid_;
      uuid_ = other.uuid_;
      workId_ = other.workId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowPlayerHallInfo Clone() {
      return new AVWorkShowPlayerHallInfo(this);
    }

    /// <summary>Field number for the "cid" field.</summary>
    public const int CidFieldNumber = 1;
    private int cid_;
    /// <summary>
    /// 配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cid {
      get { return cid_; }
      set {
        cid_ = value;
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 2;
    private ulong uuid_;
    /// <summary>
    /// 放映厅uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "work_id" field.</summary>
    public const int WorkIdFieldNumber = 3;
    private int workId_;
    /// <summary>
    /// 作品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WorkId {
      get { return workId_; }
      set {
        workId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AVWorkShowPlayerHallInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AVWorkShowPlayerHallInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cid != other.Cid) return false;
      if (Uuid != other.Uuid) return false;
      if (WorkId != other.WorkId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cid != 0) hash ^= Cid.GetHashCode();
      if (Uuid != 0UL) hash ^= Uuid.GetHashCode();
      if (WorkId != 0) hash ^= WorkId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Cid);
      }
      if (Uuid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Uuid);
      }
      if (WorkId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(WorkId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cid);
      }
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (WorkId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WorkId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AVWorkShowPlayerHallInfo other) {
      if (other == null) {
        return;
      }
      if (other.Cid != 0) {
        Cid = other.Cid;
      }
      if (other.Uuid != 0UL) {
        Uuid = other.Uuid;
      }
      if (other.WorkId != 0) {
        WorkId = other.WorkId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Cid = input.ReadInt32();
            break;
          }
          case 16: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 24: {
            WorkId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 作品上映信息
  /// </summary>
  public sealed partial class AVWorkShowInfo : pb::IMessage<AVWorkShowInfo> {
    private static readonly pb::MessageParser<AVWorkShowInfo> _parser = new pb::MessageParser<AVWorkShowInfo>(() => new AVWorkShowInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AVWorkShowInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[180]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowInfo(AVWorkShowInfo other) : this() {
      bazaarList_ = other.bazaarList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowInfo Clone() {
      return new AVWorkShowInfo(this);
    }

    /// <summary>Field number for the "bazaar_list" field.</summary>
    public const int BazaarListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Stardom.AVWorkShowBazaarInfo> _repeated_bazaarList_codec
        = pb::FieldCodec.ForMessage(10, global::Stardom.AVWorkShowBazaarInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.AVWorkShowBazaarInfo> bazaarList_ = new pbc::RepeatedField<global::Stardom.AVWorkShowBazaarInfo>();
    /// <summary>
    /// 题材信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.AVWorkShowBazaarInfo> BazaarList {
      get { return bazaarList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AVWorkShowInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AVWorkShowInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!bazaarList_.Equals(other.bazaarList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= bazaarList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      bazaarList_.WriteTo(output, _repeated_bazaarList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bazaarList_.CalculateSize(_repeated_bazaarList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AVWorkShowInfo other) {
      if (other == null) {
        return;
      }
      bazaarList_.Add(other.bazaarList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bazaarList_.AddEntriesFrom(input, _repeated_bazaarList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 作品上映市场信息
  /// </summary>
  public sealed partial class AVWorkShowBazaarInfo : pb::IMessage<AVWorkShowBazaarInfo> {
    private static readonly pb::MessageParser<AVWorkShowBazaarInfo> _parser = new pb::MessageParser<AVWorkShowBazaarInfo>(() => new AVWorkShowBazaarInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AVWorkShowBazaarInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[181]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowBazaarInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowBazaarInfo(AVWorkShowBazaarInfo other) : this() {
      workType_ = other.workType_;
      guestId_ = other.guestId_;
      popularStar_ = other.popularStar_;
      planStar_ = other.planStar_;
      showNum_ = other.showNum_;
      hot_ = other.hot_;
      rank_ = other.rank_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowBazaarInfo Clone() {
      return new AVWorkShowBazaarInfo(this);
    }

    /// <summary>Field number for the "work_type" field.</summary>
    public const int WorkTypeFieldNumber = 1;
    private int workType_;
    /// <summary>
    /// 题材类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WorkType {
      get { return workType_; }
      set {
        workType_ = value;
      }
    }

    /// <summary>Field number for the "guest_id" field.</summary>
    public const int GuestIdFieldNumber = 2;
    private int guestId_;
    /// <summary>
    /// 嘉宾
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuestId {
      get { return guestId_; }
      set {
        guestId_ = value;
      }
    }

    /// <summary>Field number for the "popular_star" field.</summary>
    public const int PopularStarFieldNumber = 3;
    private int popularStar_;
    /// <summary>
    /// 人气星级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PopularStar {
      get { return popularStar_; }
      set {
        popularStar_ = value;
      }
    }

    /// <summary>Field number for the "plan_star" field.</summary>
    public const int PlanStarFieldNumber = 4;
    private int planStar_;
    /// <summary>
    /// 排片星级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlanStar {
      get { return planStar_; }
      set {
        planStar_ = value;
      }
    }

    /// <summary>Field number for the "show_num" field.</summary>
    public const int ShowNumFieldNumber = 5;
    private int showNum_;
    /// <summary>
    /// 上映数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShowNum {
      get { return showNum_; }
      set {
        showNum_ = value;
      }
    }

    /// <summary>Field number for the "hot" field.</summary>
    public const int HotFieldNumber = 6;
    private int hot_;
    /// <summary>
    /// 热度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hot {
      get { return hot_; }
      set {
        hot_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 7;
    private int rank_;
    /// <summary>
    /// 热度排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AVWorkShowBazaarInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AVWorkShowBazaarInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WorkType != other.WorkType) return false;
      if (GuestId != other.GuestId) return false;
      if (PopularStar != other.PopularStar) return false;
      if (PlanStar != other.PlanStar) return false;
      if (ShowNum != other.ShowNum) return false;
      if (Hot != other.Hot) return false;
      if (Rank != other.Rank) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WorkType != 0) hash ^= WorkType.GetHashCode();
      if (GuestId != 0) hash ^= GuestId.GetHashCode();
      if (PopularStar != 0) hash ^= PopularStar.GetHashCode();
      if (PlanStar != 0) hash ^= PlanStar.GetHashCode();
      if (ShowNum != 0) hash ^= ShowNum.GetHashCode();
      if (Hot != 0) hash ^= Hot.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WorkType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WorkType);
      }
      if (GuestId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GuestId);
      }
      if (PopularStar != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PopularStar);
      }
      if (PlanStar != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PlanStar);
      }
      if (ShowNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ShowNum);
      }
      if (Hot != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Hot);
      }
      if (Rank != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Rank);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorkType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WorkType);
      }
      if (GuestId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuestId);
      }
      if (PopularStar != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PopularStar);
      }
      if (PlanStar != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlanStar);
      }
      if (ShowNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShowNum);
      }
      if (Hot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hot);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AVWorkShowBazaarInfo other) {
      if (other == null) {
        return;
      }
      if (other.WorkType != 0) {
        WorkType = other.WorkType;
      }
      if (other.GuestId != 0) {
        GuestId = other.GuestId;
      }
      if (other.PopularStar != 0) {
        PopularStar = other.PopularStar;
      }
      if (other.PlanStar != 0) {
        PlanStar = other.PlanStar;
      }
      if (other.ShowNum != 0) {
        ShowNum = other.ShowNum;
      }
      if (other.Hot != 0) {
        Hot = other.Hot;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            WorkType = input.ReadInt32();
            break;
          }
          case 16: {
            GuestId = input.ReadInt32();
            break;
          }
          case 24: {
            PopularStar = input.ReadInt32();
            break;
          }
          case 32: {
            PlanStar = input.ReadInt32();
            break;
          }
          case 40: {
            ShowNum = input.ReadInt32();
            break;
          }
          case 48: {
            Hot = input.ReadInt32();
            break;
          }
          case 56: {
            Rank = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 作品上映热度信息
  /// </summary>
  public sealed partial class AVWorkShowHotInfo : pb::IMessage<AVWorkShowHotInfo> {
    private static readonly pb::MessageParser<AVWorkShowHotInfo> _parser = new pb::MessageParser<AVWorkShowHotInfo>(() => new AVWorkShowHotInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AVWorkShowHotInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[182]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowHotInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowHotInfo(AVWorkShowHotInfo other) : this() {
      workType_ = other.workType_;
      hot_ = other.hot_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowHotInfo Clone() {
      return new AVWorkShowHotInfo(this);
    }

    /// <summary>Field number for the "work_type" field.</summary>
    public const int WorkTypeFieldNumber = 1;
    private int workType_;
    /// <summary>
    /// 题材类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WorkType {
      get { return workType_; }
      set {
        workType_ = value;
      }
    }

    /// <summary>Field number for the "hot" field.</summary>
    public const int HotFieldNumber = 2;
    private int hot_;
    /// <summary>
    /// 热度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hot {
      get { return hot_; }
      set {
        hot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AVWorkShowHotInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AVWorkShowHotInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WorkType != other.WorkType) return false;
      if (Hot != other.Hot) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WorkType != 0) hash ^= WorkType.GetHashCode();
      if (Hot != 0) hash ^= Hot.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WorkType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WorkType);
      }
      if (Hot != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Hot);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorkType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WorkType);
      }
      if (Hot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hot);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AVWorkShowHotInfo other) {
      if (other == null) {
        return;
      }
      if (other.WorkType != 0) {
        WorkType = other.WorkType;
      }
      if (other.Hot != 0) {
        Hot = other.Hot;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            WorkType = input.ReadInt32();
            break;
          }
          case 16: {
            Hot = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 热度变化记录
  /// </summary>
  public sealed partial class AVWorkShowHotRecord : pb::IMessage<AVWorkShowHotRecord> {
    private static readonly pb::MessageParser<AVWorkShowHotRecord> _parser = new pb::MessageParser<AVWorkShowHotRecord>(() => new AVWorkShowHotRecord());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AVWorkShowHotRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[183]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowHotRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowHotRecord(AVWorkShowHotRecord other) : this() {
      id_ = other.id_;
      timeStamp_ = other.timeStamp_;
      type_ = other.type_;
      guestId_ = other.guestId_;
      paramList_ = other.paramList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowHotRecord Clone() {
      return new AVWorkShowHotRecord(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 记录id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "time_stamp" field.</summary>
    public const int TimeStampFieldNumber = 2;
    private ulong timeStamp_;
    /// <summary>
    /// 时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    /// <summary>
    /// 类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "guest_id" field.</summary>
    public const int GuestIdFieldNumber = 4;
    private int guestId_;
    /// <summary>
    /// 嘉宾id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuestId {
      get { return guestId_; }
      set {
        guestId_ = value;
      }
    }

    /// <summary>Field number for the "param_list" field.</summary>
    public const int ParamListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Stardom.KeyParam> _repeated_paramList_codec
        = pb::FieldCodec.ForMessage(42, global::Stardom.KeyParam.Parser);
    private readonly pbc::RepeatedField<global::Stardom.KeyParam> paramList_ = new pbc::RepeatedField<global::Stardom.KeyParam>();
    /// <summary>
    /// 参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.KeyParam> ParamList {
      get { return paramList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AVWorkShowHotRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AVWorkShowHotRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (TimeStamp != other.TimeStamp) return false;
      if (Type != other.Type) return false;
      if (GuestId != other.GuestId) return false;
      if(!paramList_.Equals(other.paramList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (TimeStamp != 0UL) hash ^= TimeStamp.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (GuestId != 0) hash ^= GuestId.GetHashCode();
      hash ^= paramList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (TimeStamp != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TimeStamp);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (GuestId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GuestId);
      }
      paramList_.WriteTo(output, _repeated_paramList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (TimeStamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimeStamp);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (GuestId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuestId);
      }
      size += paramList_.CalculateSize(_repeated_paramList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AVWorkShowHotRecord other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.TimeStamp != 0UL) {
        TimeStamp = other.TimeStamp;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.GuestId != 0) {
        GuestId = other.GuestId;
      }
      paramList_.Add(other.paramList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            TimeStamp = input.ReadUInt64();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 32: {
            GuestId = input.ReadInt32();
            break;
          }
          case 42: {
            paramList_.AddEntriesFrom(input, _repeated_paramList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 作品上映玩家信息
  /// </summary>
  public sealed partial class AVWorkShowPlayerInfo : pb::IMessage<AVWorkShowPlayerInfo> {
    private static readonly pb::MessageParser<AVWorkShowPlayerInfo> _parser = new pb::MessageParser<AVWorkShowPlayerInfo>(() => new AVWorkShowPlayerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AVWorkShowPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[184]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowPlayerInfo(AVWorkShowPlayerInfo other) : this() {
      playerId_ = other.playerId_;
      name_ = other.name_;
      headId_ = other.headId_;
      sex_ = other.sex_;
      userId_ = other.userId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowPlayerInfo Clone() {
      return new AVWorkShowPlayerInfo(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "head_id" field.</summary>
    public const int HeadIdFieldNumber = 3;
    private int headId_;
    /// <summary>
    /// 头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadId {
      get { return headId_; }
      set {
        headId_ = value;
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 4;
    private int sex_;
    /// <summary>
    /// 性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 5;
    private ulong userId_;
    /// <summary>
    /// user_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AVWorkShowPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AVWorkShowPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Name != other.Name) return false;
      if (HeadId != other.HeadId) return false;
      if (Sex != other.Sex) return false;
      if (UserId != other.UserId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (HeadId != 0) hash ^= HeadId.GetHashCode();
      if (Sex != 0) hash ^= Sex.GetHashCode();
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HeadId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HeadId);
      }
      if (Sex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Sex);
      }
      if (UserId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(UserId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HeadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadId);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AVWorkShowPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.HeadId != 0) {
        HeadId = other.HeadId;
      }
      if (other.Sex != 0) {
        Sex = other.Sex;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            HeadId = input.ReadInt32();
            break;
          }
          case 32: {
            Sex = input.ReadInt32();
            break;
          }
          case 40: {
            UserId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 作品上映零食信息
  /// </summary>
  public sealed partial class AVWorkShowSnackInfo : pb::IMessage<AVWorkShowSnackInfo> {
    private static readonly pb::MessageParser<AVWorkShowSnackInfo> _parser = new pb::MessageParser<AVWorkShowSnackInfo>(() => new AVWorkShowSnackInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AVWorkShowSnackInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[185]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowSnackInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowSnackInfo(AVWorkShowSnackInfo other) : this() {
      ItemBase = other.itemBase_ != null ? other.ItemBase.Clone() : null;
      energy_ = other.energy_;
      shareTimes_ = other.shareTimes_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowSnackInfo Clone() {
      return new AVWorkShowSnackInfo(this);
    }

    /// <summary>Field number for the "item_base" field.</summary>
    public const int ItemBaseFieldNumber = 1;
    private global::Stardom.ItemBaseInfo itemBase_;
    /// <summary>
    /// 物品信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.ItemBaseInfo ItemBase {
      get { return itemBase_; }
      set {
        itemBase_ = value;
      }
    }

    /// <summary>Field number for the "energy" field.</summary>
    public const int EnergyFieldNumber = 2;
    private int energy_;
    /// <summary>
    /// 储量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Energy {
      get { return energy_; }
      set {
        energy_ = value;
      }
    }

    /// <summary>Field number for the "share_times" field.</summary>
    public const int ShareTimesFieldNumber = 3;
    private int shareTimes_;
    /// <summary>
    /// 分享次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShareTimes {
      get { return shareTimes_; }
      set {
        shareTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AVWorkShowSnackInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AVWorkShowSnackInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ItemBase, other.ItemBase)) return false;
      if (Energy != other.Energy) return false;
      if (ShareTimes != other.ShareTimes) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (itemBase_ != null) hash ^= ItemBase.GetHashCode();
      if (Energy != 0) hash ^= Energy.GetHashCode();
      if (ShareTimes != 0) hash ^= ShareTimes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (itemBase_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ItemBase);
      }
      if (Energy != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Energy);
      }
      if (ShareTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ShareTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (itemBase_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ItemBase);
      }
      if (Energy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Energy);
      }
      if (ShareTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShareTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AVWorkShowSnackInfo other) {
      if (other == null) {
        return;
      }
      if (other.itemBase_ != null) {
        if (itemBase_ == null) {
          itemBase_ = new global::Stardom.ItemBaseInfo();
        }
        ItemBase.MergeFrom(other.ItemBase);
      }
      if (other.Energy != 0) {
        Energy = other.Energy;
      }
      if (other.ShareTimes != 0) {
        ShareTimes = other.ShareTimes;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (itemBase_ == null) {
              itemBase_ = new global::Stardom.ItemBaseInfo();
            }
            input.ReadMessage(itemBase_);
            break;
          }
          case 16: {
            Energy = input.ReadInt32();
            break;
          }
          case 24: {
            ShareTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 作品上映历史记录
  /// </summary>
  public sealed partial class AVWorkShowRecordInfo : pb::IMessage<AVWorkShowRecordInfo> {
    private static readonly pb::MessageParser<AVWorkShowRecordInfo> _parser = new pb::MessageParser<AVWorkShowRecordInfo>(() => new AVWorkShowRecordInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AVWorkShowRecordInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[186]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowRecordInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowRecordInfo(AVWorkShowRecordInfo other) : this() {
      PlayerInfo = other.playerInfo_ != null ? other.PlayerInfo.Clone() : null;
      timeStamp_ = other.timeStamp_;
      recordType_ = other.recordType_;
      paramList_ = other.paramList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowRecordInfo Clone() {
      return new AVWorkShowRecordInfo(this);
    }

    /// <summary>Field number for the "player_info" field.</summary>
    public const int PlayerInfoFieldNumber = 1;
    private global::Stardom.AVWorkShowPlayerInfo playerInfo_;
    /// <summary>
    /// 玩家信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.AVWorkShowPlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    /// <summary>Field number for the "time_stamp" field.</summary>
    public const int TimeStampFieldNumber = 2;
    private ulong timeStamp_;
    /// <summary>
    /// 时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "record_type" field.</summary>
    public const int RecordTypeFieldNumber = 3;
    private int recordType_;
    /// <summary>
    /// 记录类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecordType {
      get { return recordType_; }
      set {
        recordType_ = value;
      }
    }

    /// <summary>Field number for the "param_list" field.</summary>
    public const int ParamListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Stardom.KeyParam> _repeated_paramList_codec
        = pb::FieldCodec.ForMessage(42, global::Stardom.KeyParam.Parser);
    private readonly pbc::RepeatedField<global::Stardom.KeyParam> paramList_ = new pbc::RepeatedField<global::Stardom.KeyParam>();
    /// <summary>
    /// 参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.KeyParam> ParamList {
      get { return paramList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AVWorkShowRecordInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AVWorkShowRecordInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      if (TimeStamp != other.TimeStamp) return false;
      if (RecordType != other.RecordType) return false;
      if(!paramList_.Equals(other.paramList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (TimeStamp != 0UL) hash ^= TimeStamp.GetHashCode();
      if (RecordType != 0) hash ^= RecordType.GetHashCode();
      hash ^= paramList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerInfo);
      }
      if (TimeStamp != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TimeStamp);
      }
      if (RecordType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RecordType);
      }
      paramList_.WriteTo(output, _repeated_paramList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (TimeStamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimeStamp);
      }
      if (RecordType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecordType);
      }
      size += paramList_.CalculateSize(_repeated_paramList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AVWorkShowRecordInfo other) {
      if (other == null) {
        return;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          playerInfo_ = new global::Stardom.AVWorkShowPlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      if (other.TimeStamp != 0UL) {
        TimeStamp = other.TimeStamp;
      }
      if (other.RecordType != 0) {
        RecordType = other.RecordType;
      }
      paramList_.Add(other.paramList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::Stardom.AVWorkShowPlayerInfo();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
          case 16: {
            TimeStamp = input.ReadUInt64();
            break;
          }
          case 24: {
            RecordType = input.ReadInt32();
            break;
          }
          case 42: {
            paramList_.AddEntriesFrom(input, _repeated_paramList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 作品上映留言
  /// </summary>
  public sealed partial class AVWorkShowMessageInfo : pb::IMessage<AVWorkShowMessageInfo> {
    private static readonly pb::MessageParser<AVWorkShowMessageInfo> _parser = new pb::MessageParser<AVWorkShowMessageInfo>(() => new AVWorkShowMessageInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AVWorkShowMessageInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[187]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowMessageInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowMessageInfo(AVWorkShowMessageInfo other) : this() {
      PlayerInfo = other.playerInfo_ != null ? other.PlayerInfo.Clone() : null;
      timeStamp_ = other.timeStamp_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowMessageInfo Clone() {
      return new AVWorkShowMessageInfo(this);
    }

    /// <summary>Field number for the "player_info" field.</summary>
    public const int PlayerInfoFieldNumber = 1;
    private global::Stardom.AVWorkShowPlayerInfo playerInfo_;
    /// <summary>
    /// 玩家信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.AVWorkShowPlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    /// <summary>Field number for the "time_stamp" field.</summary>
    public const int TimeStampFieldNumber = 2;
    private ulong timeStamp_;
    /// <summary>
    /// 时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private string message_ = "";
    /// <summary>
    /// 留言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AVWorkShowMessageInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AVWorkShowMessageInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      if (TimeStamp != other.TimeStamp) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (TimeStamp != 0UL) hash ^= TimeStamp.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerInfo);
      }
      if (TimeStamp != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TimeStamp);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (TimeStamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimeStamp);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AVWorkShowMessageInfo other) {
      if (other == null) {
        return;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          playerInfo_ = new global::Stardom.AVWorkShowPlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      if (other.TimeStamp != 0UL) {
        TimeStamp = other.TimeStamp;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::Stardom.AVWorkShowPlayerInfo();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
          case 16: {
            TimeStamp = input.ReadUInt64();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 作品上映掏零食奖励记录
  /// </summary>
  public sealed partial class AVWorkShowSnackRecordInfo : pb::IMessage<AVWorkShowSnackRecordInfo> {
    private static readonly pb::MessageParser<AVWorkShowSnackRecordInfo> _parser = new pb::MessageParser<AVWorkShowSnackRecordInfo>(() => new AVWorkShowSnackRecordInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AVWorkShowSnackRecordInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[188]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowSnackRecordInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowSnackRecordInfo(AVWorkShowSnackRecordInfo other) : this() {
      PlayerInfo = other.playerInfo_ != null ? other.PlayerInfo.Clone() : null;
      timeStamp_ = other.timeStamp_;
      recordType_ = other.recordType_;
      itemList_ = other.itemList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowSnackRecordInfo Clone() {
      return new AVWorkShowSnackRecordInfo(this);
    }

    /// <summary>Field number for the "player_info" field.</summary>
    public const int PlayerInfoFieldNumber = 1;
    private global::Stardom.AVWorkShowPlayerInfo playerInfo_;
    /// <summary>
    /// 玩家信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.AVWorkShowPlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    /// <summary>Field number for the "time_stamp" field.</summary>
    public const int TimeStampFieldNumber = 2;
    private ulong timeStamp_;
    /// <summary>
    /// 时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "record_type" field.</summary>
    public const int RecordTypeFieldNumber = 3;
    private int recordType_;
    /// <summary>
    /// 记录类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecordType {
      get { return recordType_; }
      set {
        recordType_ = value;
      }
    }

    /// <summary>Field number for the "item_list" field.</summary>
    public const int ItemListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Stardom.ItemBaseInfo> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(42, global::Stardom.ItemBaseInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.ItemBaseInfo> itemList_ = new pbc::RepeatedField<global::Stardom.ItemBaseInfo>();
    /// <summary>
    /// 奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.ItemBaseInfo> ItemList {
      get { return itemList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AVWorkShowSnackRecordInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AVWorkShowSnackRecordInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      if (TimeStamp != other.TimeStamp) return false;
      if (RecordType != other.RecordType) return false;
      if(!itemList_.Equals(other.itemList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (TimeStamp != 0UL) hash ^= TimeStamp.GetHashCode();
      if (RecordType != 0) hash ^= RecordType.GetHashCode();
      hash ^= itemList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerInfo);
      }
      if (TimeStamp != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TimeStamp);
      }
      if (RecordType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RecordType);
      }
      itemList_.WriteTo(output, _repeated_itemList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (TimeStamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimeStamp);
      }
      if (RecordType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecordType);
      }
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AVWorkShowSnackRecordInfo other) {
      if (other == null) {
        return;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          playerInfo_ = new global::Stardom.AVWorkShowPlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      if (other.TimeStamp != 0UL) {
        TimeStamp = other.TimeStamp;
      }
      if (other.RecordType != 0) {
        RecordType = other.RecordType;
      }
      itemList_.Add(other.itemList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::Stardom.AVWorkShowPlayerInfo();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
          case 16: {
            TimeStamp = input.ReadUInt64();
            break;
          }
          case 24: {
            RecordType = input.ReadInt32();
            break;
          }
          case 42: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 作品上映放映厅基本信息
  /// </summary>
  public sealed partial class AVWorkShowHallBaseInfo : pb::IMessage<AVWorkShowHallBaseInfo> {
    private static readonly pb::MessageParser<AVWorkShowHallBaseInfo> _parser = new pb::MessageParser<AVWorkShowHallBaseInfo>(() => new AVWorkShowHallBaseInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AVWorkShowHallBaseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[189]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowHallBaseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowHallBaseInfo(AVWorkShowHallBaseInfo other) : this() {
      uuid_ = other.uuid_;
      PlayerInfo = other.playerInfo_ != null ? other.PlayerInfo.Clone() : null;
      WorkInfo = other.workInfo_ != null ? other.WorkInfo.Clone() : null;
      isEnjoy_ = other.isEnjoy_;
      hot_ = other.hot_;
      snackList_ = other.snackList_.Clone();
      npcList_ = other.npcList_.Clone();
      visitorList_ = other.visitorList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowHallBaseInfo Clone() {
      return new AVWorkShowHallBaseInfo(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    /// <summary>
    /// 放映厅uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "player_info" field.</summary>
    public const int PlayerInfoFieldNumber = 2;
    private global::Stardom.AVWorkShowPlayerInfo playerInfo_;
    /// <summary>
    /// 玩家信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.AVWorkShowPlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    /// <summary>Field number for the "work_info" field.</summary>
    public const int WorkInfoFieldNumber = 3;
    private global::Stardom.AVWorkInfo workInfo_;
    /// <summary>
    /// 作品信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.AVWorkInfo WorkInfo {
      get { return workInfo_; }
      set {
        workInfo_ = value;
      }
    }

    /// <summary>Field number for the "is_enjoy" field.</summary>
    public const int IsEnjoyFieldNumber = 4;
    private int isEnjoy_;
    /// <summary>
    /// 是否有点赞
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsEnjoy {
      get { return isEnjoy_; }
      set {
        isEnjoy_ = value;
      }
    }

    /// <summary>Field number for the "hot" field.</summary>
    public const int HotFieldNumber = 5;
    private int hot_;
    /// <summary>
    /// 热度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hot {
      get { return hot_; }
      set {
        hot_ = value;
      }
    }

    /// <summary>Field number for the "snack_list" field.</summary>
    public const int SnackListFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Stardom.AVWorkShowSnackInfo> _repeated_snackList_codec
        = pb::FieldCodec.ForMessage(50, global::Stardom.AVWorkShowSnackInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.AVWorkShowSnackInfo> snackList_ = new pbc::RepeatedField<global::Stardom.AVWorkShowSnackInfo>();
    /// <summary>
    /// 零食列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.AVWorkShowSnackInfo> SnackList {
      get { return snackList_; }
    }

    /// <summary>Field number for the "npc_list" field.</summary>
    public const int NpcListFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_npcList_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> npcList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// npc列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> NpcList {
      get { return npcList_; }
    }

    /// <summary>Field number for the "visitor_list" field.</summary>
    public const int VisitorListFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Stardom.AVWorkShowPlayerInfo> _repeated_visitorList_codec
        = pb::FieldCodec.ForMessage(66, global::Stardom.AVWorkShowPlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.AVWorkShowPlayerInfo> visitorList_ = new pbc::RepeatedField<global::Stardom.AVWorkShowPlayerInfo>();
    /// <summary>
    /// 客人列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.AVWorkShowPlayerInfo> VisitorList {
      get { return visitorList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AVWorkShowHallBaseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AVWorkShowHallBaseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      if (!object.Equals(WorkInfo, other.WorkInfo)) return false;
      if (IsEnjoy != other.IsEnjoy) return false;
      if (Hot != other.Hot) return false;
      if(!snackList_.Equals(other.snackList_)) return false;
      if(!npcList_.Equals(other.npcList_)) return false;
      if(!visitorList_.Equals(other.visitorList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid != 0UL) hash ^= Uuid.GetHashCode();
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (workInfo_ != null) hash ^= WorkInfo.GetHashCode();
      if (IsEnjoy != 0) hash ^= IsEnjoy.GetHashCode();
      if (Hot != 0) hash ^= Hot.GetHashCode();
      hash ^= snackList_.GetHashCode();
      hash ^= npcList_.GetHashCode();
      hash ^= visitorList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      if (playerInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlayerInfo);
      }
      if (workInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(WorkInfo);
      }
      if (IsEnjoy != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(IsEnjoy);
      }
      if (Hot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Hot);
      }
      snackList_.WriteTo(output, _repeated_snackList_codec);
      npcList_.WriteTo(output, _repeated_npcList_codec);
      visitorList_.WriteTo(output, _repeated_visitorList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (workInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WorkInfo);
      }
      if (IsEnjoy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsEnjoy);
      }
      if (Hot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hot);
      }
      size += snackList_.CalculateSize(_repeated_snackList_codec);
      size += npcList_.CalculateSize(_repeated_npcList_codec);
      size += visitorList_.CalculateSize(_repeated_visitorList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AVWorkShowHallBaseInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uuid != 0UL) {
        Uuid = other.Uuid;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          playerInfo_ = new global::Stardom.AVWorkShowPlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      if (other.workInfo_ != null) {
        if (workInfo_ == null) {
          workInfo_ = new global::Stardom.AVWorkInfo();
        }
        WorkInfo.MergeFrom(other.WorkInfo);
      }
      if (other.IsEnjoy != 0) {
        IsEnjoy = other.IsEnjoy;
      }
      if (other.Hot != 0) {
        Hot = other.Hot;
      }
      snackList_.Add(other.snackList_);
      npcList_.Add(other.npcList_);
      visitorList_.Add(other.visitorList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 18: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::Stardom.AVWorkShowPlayerInfo();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
          case 26: {
            if (workInfo_ == null) {
              workInfo_ = new global::Stardom.AVWorkInfo();
            }
            input.ReadMessage(workInfo_);
            break;
          }
          case 32: {
            IsEnjoy = input.ReadInt32();
            break;
          }
          case 40: {
            Hot = input.ReadInt32();
            break;
          }
          case 50: {
            snackList_.AddEntriesFrom(input, _repeated_snackList_codec);
            break;
          }
          case 58:
          case 56: {
            npcList_.AddEntriesFrom(input, _repeated_npcList_codec);
            break;
          }
          case 66: {
            visitorList_.AddEntriesFrom(input, _repeated_visitorList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 作品上映放映厅记录信息
  /// </summary>
  public sealed partial class AVWorkShowHallRecordInfo : pb::IMessage<AVWorkShowHallRecordInfo> {
    private static readonly pb::MessageParser<AVWorkShowHallRecordInfo> _parser = new pb::MessageParser<AVWorkShowHallRecordInfo>(() => new AVWorkShowHallRecordInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AVWorkShowHallRecordInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[190]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowHallRecordInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowHallRecordInfo(AVWorkShowHallRecordInfo other) : this() {
      messageList_ = other.messageList_.Clone();
      recordList_ = other.recordList_.Clone();
      snackRecordList_ = other.snackRecordList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowHallRecordInfo Clone() {
      return new AVWorkShowHallRecordInfo(this);
    }

    /// <summary>Field number for the "message_list" field.</summary>
    public const int MessageListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Stardom.AVWorkShowMessageInfo> _repeated_messageList_codec
        = pb::FieldCodec.ForMessage(10, global::Stardom.AVWorkShowMessageInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.AVWorkShowMessageInfo> messageList_ = new pbc::RepeatedField<global::Stardom.AVWorkShowMessageInfo>();
    /// <summary>
    /// 留言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.AVWorkShowMessageInfo> MessageList {
      get { return messageList_; }
    }

    /// <summary>Field number for the "record_list" field.</summary>
    public const int RecordListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Stardom.AVWorkShowRecordInfo> _repeated_recordList_codec
        = pb::FieldCodec.ForMessage(18, global::Stardom.AVWorkShowRecordInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.AVWorkShowRecordInfo> recordList_ = new pbc::RepeatedField<global::Stardom.AVWorkShowRecordInfo>();
    /// <summary>
    /// 历史记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.AVWorkShowRecordInfo> RecordList {
      get { return recordList_; }
    }

    /// <summary>Field number for the "snack_record_list" field.</summary>
    public const int SnackRecordListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Stardom.AVWorkShowSnackRecordInfo> _repeated_snackRecordList_codec
        = pb::FieldCodec.ForMessage(26, global::Stardom.AVWorkShowSnackRecordInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.AVWorkShowSnackRecordInfo> snackRecordList_ = new pbc::RepeatedField<global::Stardom.AVWorkShowSnackRecordInfo>();
    /// <summary>
    /// 零食领取记录  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.AVWorkShowSnackRecordInfo> SnackRecordList {
      get { return snackRecordList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AVWorkShowHallRecordInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AVWorkShowHallRecordInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!messageList_.Equals(other.messageList_)) return false;
      if(!recordList_.Equals(other.recordList_)) return false;
      if(!snackRecordList_.Equals(other.snackRecordList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= messageList_.GetHashCode();
      hash ^= recordList_.GetHashCode();
      hash ^= snackRecordList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      messageList_.WriteTo(output, _repeated_messageList_codec);
      recordList_.WriteTo(output, _repeated_recordList_codec);
      snackRecordList_.WriteTo(output, _repeated_snackRecordList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += messageList_.CalculateSize(_repeated_messageList_codec);
      size += recordList_.CalculateSize(_repeated_recordList_codec);
      size += snackRecordList_.CalculateSize(_repeated_snackRecordList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AVWorkShowHallRecordInfo other) {
      if (other == null) {
        return;
      }
      messageList_.Add(other.messageList_);
      recordList_.Add(other.recordList_);
      snackRecordList_.Add(other.snackRecordList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            messageList_.AddEntriesFrom(input, _repeated_messageList_codec);
            break;
          }
          case 18: {
            recordList_.AddEntriesFrom(input, _repeated_recordList_codec);
            break;
          }
          case 26: {
            snackRecordList_.AddEntriesFrom(input, _repeated_snackRecordList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 作品上映热度变化记录
  /// </summary>
  public sealed partial class AVWorkShowHotChangeRecord : pb::IMessage<AVWorkShowHotChangeRecord> {
    private static readonly pb::MessageParser<AVWorkShowHotChangeRecord> _parser = new pb::MessageParser<AVWorkShowHotChangeRecord>(() => new AVWorkShowHotChangeRecord());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AVWorkShowHotChangeRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[191]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowHotChangeRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowHotChangeRecord(AVWorkShowHotChangeRecord other) : this() {
      id_ = other.id_;
      workType_ = other.workType_;
      deltaValue_ = other.deltaValue_;
      value_ = other.value_;
      timeStamp_ = other.timeStamp_;
      guestId_ = other.guestId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVWorkShowHotChangeRecord Clone() {
      return new AVWorkShowHotChangeRecord(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "work_type" field.</summary>
    public const int WorkTypeFieldNumber = 2;
    private int workType_;
    /// <summary>
    /// 作品类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WorkType {
      get { return workType_; }
      set {
        workType_ = value;
      }
    }

    /// <summary>Field number for the "delta_value" field.</summary>
    public const int DeltaValueFieldNumber = 3;
    private int deltaValue_;
    /// <summary>
    /// 变化值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeltaValue {
      get { return deltaValue_; }
      set {
        deltaValue_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 4;
    private int value_;
    /// <summary>
    /// 当前值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "time_stamp" field.</summary>
    public const int TimeStampFieldNumber = 5;
    private ulong timeStamp_;
    /// <summary>
    /// 时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "guest_id" field.</summary>
    public const int GuestIdFieldNumber = 6;
    private int guestId_;
    /// <summary>
    /// 嘉宾id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuestId {
      get { return guestId_; }
      set {
        guestId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AVWorkShowHotChangeRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AVWorkShowHotChangeRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (WorkType != other.WorkType) return false;
      if (DeltaValue != other.DeltaValue) return false;
      if (Value != other.Value) return false;
      if (TimeStamp != other.TimeStamp) return false;
      if (GuestId != other.GuestId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (WorkType != 0) hash ^= WorkType.GetHashCode();
      if (DeltaValue != 0) hash ^= DeltaValue.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (TimeStamp != 0UL) hash ^= TimeStamp.GetHashCode();
      if (GuestId != 0) hash ^= GuestId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (WorkType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WorkType);
      }
      if (DeltaValue != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DeltaValue);
      }
      if (Value != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Value);
      }
      if (TimeStamp != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(TimeStamp);
      }
      if (GuestId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(GuestId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (WorkType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WorkType);
      }
      if (DeltaValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeltaValue);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (TimeStamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimeStamp);
      }
      if (GuestId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuestId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AVWorkShowHotChangeRecord other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.WorkType != 0) {
        WorkType = other.WorkType;
      }
      if (other.DeltaValue != 0) {
        DeltaValue = other.DeltaValue;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      if (other.TimeStamp != 0UL) {
        TimeStamp = other.TimeStamp;
      }
      if (other.GuestId != 0) {
        GuestId = other.GuestId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            WorkType = input.ReadInt32();
            break;
          }
          case 24: {
            DeltaValue = input.ReadInt32();
            break;
          }
          case 32: {
            Value = input.ReadInt32();
            break;
          }
          case 40: {
            TimeStamp = input.ReadUInt64();
            break;
          }
          case 48: {
            GuestId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家组队信息
  /// </summary>
  public sealed partial class PlayerTeamInfo : pb::IMessage<PlayerTeamInfo> {
    private static readonly pb::MessageParser<PlayerTeamInfo> _parser = new pb::MessageParser<PlayerTeamInfo>(() => new PlayerTeamInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerTeamInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[192]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerTeamInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerTeamInfo(PlayerTeamInfo other) : this() {
      teamPlayInfo_ = other.teamPlayInfo_.Clone();
      hangingLeaderTimes_ = other.hangingLeaderTimes_;
      playTotelTimes_ = other.playTotelTimes_;
      buyTimes_ = other.buyTimes_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerTeamInfo Clone() {
      return new PlayerTeamInfo(this);
    }

    /// <summary>Field number for the "team_play_info" field.</summary>
    public const int TeamPlayInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Stardom.TeamPlayInfo> _repeated_teamPlayInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Stardom.TeamPlayInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.TeamPlayInfo> teamPlayInfo_ = new pbc::RepeatedField<global::Stardom.TeamPlayInfo>();
    /// <summary>
    /// 组队玩法信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.TeamPlayInfo> TeamPlayInfo {
      get { return teamPlayInfo_; }
    }

    /// <summary>Field number for the "hanging_leader_times" field.</summary>
    public const int HangingLeaderTimesFieldNumber = 2;
    private int hangingLeaderTimes_;
    /// <summary>
    /// 挂机副本队长奖励次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HangingLeaderTimes {
      get { return hangingLeaderTimes_; }
      set {
        hangingLeaderTimes_ = value;
      }
    }

    /// <summary>Field number for the "play_totel_times" field.</summary>
    public const int PlayTotelTimesFieldNumber = 3;
    private int playTotelTimes_;
    /// <summary>
    /// 今日总次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayTotelTimes {
      get { return playTotelTimes_; }
      set {
        playTotelTimes_ = value;
      }
    }

    /// <summary>Field number for the "buy_times" field.</summary>
    public const int BuyTimesFieldNumber = 4;
    private int buyTimes_;
    /// <summary>
    /// 今日已购买次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuyTimes {
      get { return buyTimes_; }
      set {
        buyTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerTeamInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerTeamInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!teamPlayInfo_.Equals(other.teamPlayInfo_)) return false;
      if (HangingLeaderTimes != other.HangingLeaderTimes) return false;
      if (PlayTotelTimes != other.PlayTotelTimes) return false;
      if (BuyTimes != other.BuyTimes) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= teamPlayInfo_.GetHashCode();
      if (HangingLeaderTimes != 0) hash ^= HangingLeaderTimes.GetHashCode();
      if (PlayTotelTimes != 0) hash ^= PlayTotelTimes.GetHashCode();
      if (BuyTimes != 0) hash ^= BuyTimes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      teamPlayInfo_.WriteTo(output, _repeated_teamPlayInfo_codec);
      if (HangingLeaderTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HangingLeaderTimes);
      }
      if (PlayTotelTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlayTotelTimes);
      }
      if (BuyTimes != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BuyTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += teamPlayInfo_.CalculateSize(_repeated_teamPlayInfo_codec);
      if (HangingLeaderTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HangingLeaderTimes);
      }
      if (PlayTotelTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayTotelTimes);
      }
      if (BuyTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuyTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerTeamInfo other) {
      if (other == null) {
        return;
      }
      teamPlayInfo_.Add(other.teamPlayInfo_);
      if (other.HangingLeaderTimes != 0) {
        HangingLeaderTimes = other.HangingLeaderTimes;
      }
      if (other.PlayTotelTimes != 0) {
        PlayTotelTimes = other.PlayTotelTimes;
      }
      if (other.BuyTimes != 0) {
        BuyTimes = other.BuyTimes;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            teamPlayInfo_.AddEntriesFrom(input, _repeated_teamPlayInfo_codec);
            break;
          }
          case 16: {
            HangingLeaderTimes = input.ReadInt32();
            break;
          }
          case 24: {
            PlayTotelTimes = input.ReadInt32();
            break;
          }
          case 32: {
            BuyTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 组队玩法信息
  /// </summary>
  public sealed partial class TeamPlayInfo : pb::IMessage<TeamPlayInfo> {
    private static readonly pb::MessageParser<TeamPlayInfo> _parser = new pb::MessageParser<TeamPlayInfo>(() => new TeamPlayInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamPlayInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[193]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayInfo(TeamPlayInfo other) : this() {
      teamPlayId_ = other.teamPlayId_;
      teamPlayTimes_ = other.teamPlayTimes_;
      teamPlayResetTime_ = other.teamPlayResetTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayInfo Clone() {
      return new TeamPlayInfo(this);
    }

    /// <summary>Field number for the "team_play_id" field.</summary>
    public const int TeamPlayIdFieldNumber = 1;
    private int teamPlayId_;
    /// <summary>
    /// 组队玩法id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamPlayId {
      get { return teamPlayId_; }
      set {
        teamPlayId_ = value;
      }
    }

    /// <summary>Field number for the "team_play_times" field.</summary>
    public const int TeamPlayTimesFieldNumber = 2;
    private int teamPlayTimes_;
    /// <summary>
    /// 组队玩法次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamPlayTimes {
      get { return teamPlayTimes_; }
      set {
        teamPlayTimes_ = value;
      }
    }

    /// <summary>Field number for the "team_play_reset_time" field.</summary>
    public const int TeamPlayResetTimeFieldNumber = 3;
    private ulong teamPlayResetTime_;
    /// <summary>
    /// 组队玩法刷新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamPlayResetTime {
      get { return teamPlayResetTime_; }
      set {
        teamPlayResetTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamPlayInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamPlayInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamPlayId != other.TeamPlayId) return false;
      if (TeamPlayTimes != other.TeamPlayTimes) return false;
      if (TeamPlayResetTime != other.TeamPlayResetTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamPlayId != 0) hash ^= TeamPlayId.GetHashCode();
      if (TeamPlayTimes != 0) hash ^= TeamPlayTimes.GetHashCode();
      if (TeamPlayResetTime != 0UL) hash ^= TeamPlayResetTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamPlayId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TeamPlayId);
      }
      if (TeamPlayTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TeamPlayTimes);
      }
      if (TeamPlayResetTime != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(TeamPlayResetTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamPlayId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamPlayId);
      }
      if (TeamPlayTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamPlayTimes);
      }
      if (TeamPlayResetTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamPlayResetTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamPlayInfo other) {
      if (other == null) {
        return;
      }
      if (other.TeamPlayId != 0) {
        TeamPlayId = other.TeamPlayId;
      }
      if (other.TeamPlayTimes != 0) {
        TeamPlayTimes = other.TeamPlayTimes;
      }
      if (other.TeamPlayResetTime != 0UL) {
        TeamPlayResetTime = other.TeamPlayResetTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamPlayId = input.ReadInt32();
            break;
          }
          case 16: {
            TeamPlayTimes = input.ReadInt32();
            break;
          }
          case 24: {
            TeamPlayResetTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 组队设置
  /// </summary>
  public sealed partial class TeamSetting : pb::IMessage<TeamSetting> {
    private static readonly pb::MessageParser<TeamSetting> _parser = new pb::MessageParser<TeamSetting>(() => new TeamSetting());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamSetting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[194]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamSetting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamSetting(TeamSetting other) : this() {
      teamPlayId_ = other.teamPlayId_;
      premssionType_ = other.premssionType_;
      limitLevel_ = other.limitLevel_;
      isAutoAgree_ = other.isAutoAgree_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamSetting Clone() {
      return new TeamSetting(this);
    }

    /// <summary>Field number for the "team_play_id" field.</summary>
    public const int TeamPlayIdFieldNumber = 1;
    private int teamPlayId_;
    /// <summary>
    /// 组队玩法id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamPlayId {
      get { return teamPlayId_; }
      set {
        teamPlayId_ = value;
      }
    }

    /// <summary>Field number for the "premssion_type" field.</summary>
    public const int PremssionTypeFieldNumber = 2;
    private int premssionType_;
    /// <summary>
    /// 公开权限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PremssionType {
      get { return premssionType_; }
      set {
        premssionType_ = value;
      }
    }

    /// <summary>Field number for the "limit_level" field.</summary>
    public const int LimitLevelFieldNumber = 3;
    private int limitLevel_;
    /// <summary>
    /// 限制等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LimitLevel {
      get { return limitLevel_; }
      set {
        limitLevel_ = value;
      }
    }

    /// <summary>Field number for the "is_auto_agree" field.</summary>
    public const int IsAutoAgreeFieldNumber = 4;
    private int isAutoAgree_;
    /// <summary>
    /// 是否自动同意(1是0否)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsAutoAgree {
      get { return isAutoAgree_; }
      set {
        isAutoAgree_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamSetting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamSetting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamPlayId != other.TeamPlayId) return false;
      if (PremssionType != other.PremssionType) return false;
      if (LimitLevel != other.LimitLevel) return false;
      if (IsAutoAgree != other.IsAutoAgree) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamPlayId != 0) hash ^= TeamPlayId.GetHashCode();
      if (PremssionType != 0) hash ^= PremssionType.GetHashCode();
      if (LimitLevel != 0) hash ^= LimitLevel.GetHashCode();
      if (IsAutoAgree != 0) hash ^= IsAutoAgree.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamPlayId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TeamPlayId);
      }
      if (PremssionType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PremssionType);
      }
      if (LimitLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LimitLevel);
      }
      if (IsAutoAgree != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(IsAutoAgree);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamPlayId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamPlayId);
      }
      if (PremssionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PremssionType);
      }
      if (LimitLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LimitLevel);
      }
      if (IsAutoAgree != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsAutoAgree);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamSetting other) {
      if (other == null) {
        return;
      }
      if (other.TeamPlayId != 0) {
        TeamPlayId = other.TeamPlayId;
      }
      if (other.PremssionType != 0) {
        PremssionType = other.PremssionType;
      }
      if (other.LimitLevel != 0) {
        LimitLevel = other.LimitLevel;
      }
      if (other.IsAutoAgree != 0) {
        IsAutoAgree = other.IsAutoAgree;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamPlayId = input.ReadInt32();
            break;
          }
          case 16: {
            PremssionType = input.ReadInt32();
            break;
          }
          case 24: {
            LimitLevel = input.ReadInt32();
            break;
          }
          case 32: {
            IsAutoAgree = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 组队成员信息
  /// </summary>
  public sealed partial class TeamMemberInfo : pb::IMessage<TeamMemberInfo> {
    private static readonly pb::MessageParser<TeamMemberInfo> _parser = new pb::MessageParser<TeamMemberInfo>(() => new TeamMemberInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamMemberInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[195]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMemberInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMemberInfo(TeamMemberInfo other) : this() {
      id_ = other.id_;
      playerId_ = other.playerId_;
      name_ = other.name_;
      nickName_ = other.nickName_;
      level_ = other.level_;
      sex_ = other.sex_;
      headId_ = other.headId_;
      fightPower_ = other.fightPower_;
      pianoLevel_ = other.pianoLevel_;
      drumLevel_ = other.drumLevel_;
      postId_ = other.postId_;
      isReady_ = other.isReady_;
      isHangUp_ = other.isHangUp_;
      titleId_ = other.titleId_;
      Fashion = other.fashion_ != null ? other.Fashion.Clone() : null;
      roleInfos_ = other.roleInfos_.Clone();
      activeSkills_ = other.activeSkills_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMemberInfo Clone() {
      return new TeamMemberInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// id(1的是队长)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private ulong playerId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// 名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nick_name" field.</summary>
    public const int NickNameFieldNumber = 4;
    private string nickName_ = "";
    /// <summary>
    /// 昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 5;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 6;
    private int sex_;
    /// <summary>
    /// 性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "head_id" field.</summary>
    public const int HeadIdFieldNumber = 7;
    private int headId_;
    /// <summary>
    /// 头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadId {
      get { return headId_; }
      set {
        headId_ = value;
      }
    }

    /// <summary>Field number for the "fight_power" field.</summary>
    public const int FightPowerFieldNumber = 8;
    private int fightPower_;
    /// <summary>
    /// 战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FightPower {
      get { return fightPower_; }
      set {
        fightPower_ = value;
      }
    }

    /// <summary>Field number for the "piano_level" field.</summary>
    public const int PianoLevelFieldNumber = 9;
    private int pianoLevel_;
    /// <summary>
    /// 钢琴等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PianoLevel {
      get { return pianoLevel_; }
      set {
        pianoLevel_ = value;
      }
    }

    /// <summary>Field number for the "drum_level" field.</summary>
    public const int DrumLevelFieldNumber = 10;
    private int drumLevel_;
    /// <summary>
    /// 架子鼓等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DrumLevel {
      get { return drumLevel_; }
      set {
        drumLevel_ = value;
      }
    }

    /// <summary>Field number for the "post_id" field.</summary>
    public const int PostIdFieldNumber = 11;
    private int postId_;
    /// <summary>
    /// 职位id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PostId {
      get { return postId_; }
      set {
        postId_ = value;
      }
    }

    /// <summary>Field number for the "is_ready" field.</summary>
    public const int IsReadyFieldNumber = 12;
    private int isReady_;
    /// <summary>
    /// 是否准备(1是0否)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsReady {
      get { return isReady_; }
      set {
        isReady_ = value;
      }
    }

    /// <summary>Field number for the "is_hang_up" field.</summary>
    public const int IsHangUpFieldNumber = 13;
    private int isHangUp_;
    /// <summary>
    /// 是否挂起(1是0否)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsHangUp {
      get { return isHangUp_; }
      set {
        isHangUp_ = value;
      }
    }

    /// <summary>Field number for the "title_id" field.</summary>
    public const int TitleIdFieldNumber = 14;
    private int titleId_;
    /// <summary>
    /// 称号id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TitleId {
      get { return titleId_; }
      set {
        titleId_ = value;
      }
    }

    /// <summary>Field number for the "fashion" field.</summary>
    public const int FashionFieldNumber = 20;
    private global::Stardom.FashionSchemeInfo fashion_;
    /// <summary>
    /// 时装
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.FashionSchemeInfo Fashion {
      get { return fashion_; }
      set {
        fashion_ = value;
      }
    }

    /// <summary>Field number for the "role_infos" field.</summary>
    public const int RoleInfosFieldNumber = 21;
    private static readonly pb::FieldCodec<global::Stardom.TeamPlayRoleInfo> _repeated_roleInfos_codec
        = pb::FieldCodec.ForMessage(170, global::Stardom.TeamPlayRoleInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.TeamPlayRoleInfo> roleInfos_ = new pbc::RepeatedField<global::Stardom.TeamPlayRoleInfo>();
    /// <summary>
    /// 玩家战斗上阵卡牌信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.TeamPlayRoleInfo> RoleInfos {
      get { return roleInfos_; }
    }

    /// <summary>Field number for the "active_skills" field.</summary>
    public const int ActiveSkillsFieldNumber = 22;
    private static readonly pb::FieldCodec<int> _repeated_activeSkills_codec
        = pb::FieldCodec.ForInt32(178);
    private readonly pbc::RepeatedField<int> activeSkills_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 玩家粉丝技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ActiveSkills {
      get { return activeSkills_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamMemberInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamMemberInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (PlayerId != other.PlayerId) return false;
      if (Name != other.Name) return false;
      if (NickName != other.NickName) return false;
      if (Level != other.Level) return false;
      if (Sex != other.Sex) return false;
      if (HeadId != other.HeadId) return false;
      if (FightPower != other.FightPower) return false;
      if (PianoLevel != other.PianoLevel) return false;
      if (DrumLevel != other.DrumLevel) return false;
      if (PostId != other.PostId) return false;
      if (IsReady != other.IsReady) return false;
      if (IsHangUp != other.IsHangUp) return false;
      if (TitleId != other.TitleId) return false;
      if (!object.Equals(Fashion, other.Fashion)) return false;
      if(!roleInfos_.Equals(other.roleInfos_)) return false;
      if(!activeSkills_.Equals(other.activeSkills_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (NickName.Length != 0) hash ^= NickName.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Sex != 0) hash ^= Sex.GetHashCode();
      if (HeadId != 0) hash ^= HeadId.GetHashCode();
      if (FightPower != 0) hash ^= FightPower.GetHashCode();
      if (PianoLevel != 0) hash ^= PianoLevel.GetHashCode();
      if (DrumLevel != 0) hash ^= DrumLevel.GetHashCode();
      if (PostId != 0) hash ^= PostId.GetHashCode();
      if (IsReady != 0) hash ^= IsReady.GetHashCode();
      if (IsHangUp != 0) hash ^= IsHangUp.GetHashCode();
      if (TitleId != 0) hash ^= TitleId.GetHashCode();
      if (fashion_ != null) hash ^= Fashion.GetHashCode();
      hash ^= roleInfos_.GetHashCode();
      hash ^= activeSkills_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (PlayerId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(PlayerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NickName);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Level);
      }
      if (Sex != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Sex);
      }
      if (HeadId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HeadId);
      }
      if (FightPower != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FightPower);
      }
      if (PianoLevel != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(PianoLevel);
      }
      if (DrumLevel != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(DrumLevel);
      }
      if (PostId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(PostId);
      }
      if (IsReady != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(IsReady);
      }
      if (IsHangUp != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(IsHangUp);
      }
      if (TitleId != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(TitleId);
      }
      if (fashion_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Fashion);
      }
      roleInfos_.WriteTo(output, _repeated_roleInfos_codec);
      activeSkills_.WriteTo(output, _repeated_activeSkills_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (HeadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadId);
      }
      if (FightPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FightPower);
      }
      if (PianoLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PianoLevel);
      }
      if (DrumLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DrumLevel);
      }
      if (PostId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PostId);
      }
      if (IsReady != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsReady);
      }
      if (IsHangUp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsHangUp);
      }
      if (TitleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TitleId);
      }
      if (fashion_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Fashion);
      }
      size += roleInfos_.CalculateSize(_repeated_roleInfos_codec);
      size += activeSkills_.CalculateSize(_repeated_activeSkills_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamMemberInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.NickName.Length != 0) {
        NickName = other.NickName;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Sex != 0) {
        Sex = other.Sex;
      }
      if (other.HeadId != 0) {
        HeadId = other.HeadId;
      }
      if (other.FightPower != 0) {
        FightPower = other.FightPower;
      }
      if (other.PianoLevel != 0) {
        PianoLevel = other.PianoLevel;
      }
      if (other.DrumLevel != 0) {
        DrumLevel = other.DrumLevel;
      }
      if (other.PostId != 0) {
        PostId = other.PostId;
      }
      if (other.IsReady != 0) {
        IsReady = other.IsReady;
      }
      if (other.IsHangUp != 0) {
        IsHangUp = other.IsHangUp;
      }
      if (other.TitleId != 0) {
        TitleId = other.TitleId;
      }
      if (other.fashion_ != null) {
        if (fashion_ == null) {
          fashion_ = new global::Stardom.FashionSchemeInfo();
        }
        Fashion.MergeFrom(other.Fashion);
      }
      roleInfos_.Add(other.roleInfos_);
      activeSkills_.Add(other.activeSkills_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            NickName = input.ReadString();
            break;
          }
          case 40: {
            Level = input.ReadInt32();
            break;
          }
          case 48: {
            Sex = input.ReadInt32();
            break;
          }
          case 56: {
            HeadId = input.ReadInt32();
            break;
          }
          case 64: {
            FightPower = input.ReadInt32();
            break;
          }
          case 72: {
            PianoLevel = input.ReadInt32();
            break;
          }
          case 80: {
            DrumLevel = input.ReadInt32();
            break;
          }
          case 88: {
            PostId = input.ReadInt32();
            break;
          }
          case 96: {
            IsReady = input.ReadInt32();
            break;
          }
          case 104: {
            IsHangUp = input.ReadInt32();
            break;
          }
          case 112: {
            TitleId = input.ReadInt32();
            break;
          }
          case 162: {
            if (fashion_ == null) {
              fashion_ = new global::Stardom.FashionSchemeInfo();
            }
            input.ReadMessage(fashion_);
            break;
          }
          case 170: {
            roleInfos_.AddEntriesFrom(input, _repeated_roleInfos_codec);
            break;
          }
          case 178:
          case 176: {
            activeSkills_.AddEntriesFrom(input, _repeated_activeSkills_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 队伍信息
  /// </summary>
  public sealed partial class TeamInfo : pb::IMessage<TeamInfo> {
    private static readonly pb::MessageParser<TeamInfo> _parser = new pb::MessageParser<TeamInfo>(() => new TeamInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[196]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInfo(TeamInfo other) : this() {
      teamId_ = other.teamId_;
      TeamSetting = other.teamSetting_ != null ? other.TeamSetting.Clone() : null;
      teamMembers_ = other.teamMembers_.Clone();
      worldInviteCd_ = other.worldInviteCd_;
      isSolo_ = other.isSolo_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInfo Clone() {
      return new TeamInfo(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private ulong teamId_;
    /// <summary>
    /// 队伍uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "team_setting" field.</summary>
    public const int TeamSettingFieldNumber = 2;
    private global::Stardom.TeamSetting teamSetting_;
    /// <summary>
    /// 队伍设置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.TeamSetting TeamSetting {
      get { return teamSetting_; }
      set {
        teamSetting_ = value;
      }
    }

    /// <summary>Field number for the "team_members" field.</summary>
    public const int TeamMembersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Stardom.TeamMemberInfo> _repeated_teamMembers_codec
        = pb::FieldCodec.ForMessage(26, global::Stardom.TeamMemberInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.TeamMemberInfo> teamMembers_ = new pbc::RepeatedField<global::Stardom.TeamMemberInfo>();
    /// <summary>
    /// 队伍人员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.TeamMemberInfo> TeamMembers {
      get { return teamMembers_; }
    }

    /// <summary>Field number for the "world_invite_cd" field.</summary>
    public const int WorldInviteCdFieldNumber = 4;
    private ulong worldInviteCd_;
    /// <summary>
    /// 世界喊话CD
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong WorldInviteCd {
      get { return worldInviteCd_; }
      set {
        worldInviteCd_ = value;
      }
    }

    /// <summary>Field number for the "is_solo" field.</summary>
    public const int IsSoloFieldNumber = 5;
    private int isSolo_;
    /// <summary>
    /// 是否是单人副本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsSolo {
      get { return isSolo_; }
      set {
        isSolo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamId != other.TeamId) return false;
      if (!object.Equals(TeamSetting, other.TeamSetting)) return false;
      if(!teamMembers_.Equals(other.teamMembers_)) return false;
      if (WorldInviteCd != other.WorldInviteCd) return false;
      if (IsSolo != other.IsSolo) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamId != 0UL) hash ^= TeamId.GetHashCode();
      if (teamSetting_ != null) hash ^= TeamSetting.GetHashCode();
      hash ^= teamMembers_.GetHashCode();
      if (WorldInviteCd != 0UL) hash ^= WorldInviteCd.GetHashCode();
      if (IsSolo != 0) hash ^= IsSolo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TeamId);
      }
      if (teamSetting_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TeamSetting);
      }
      teamMembers_.WriteTo(output, _repeated_teamMembers_codec);
      if (WorldInviteCd != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(WorldInviteCd);
      }
      if (IsSolo != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(IsSolo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamId);
      }
      if (teamSetting_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamSetting);
      }
      size += teamMembers_.CalculateSize(_repeated_teamMembers_codec);
      if (WorldInviteCd != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WorldInviteCd);
      }
      if (IsSolo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsSolo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamInfo other) {
      if (other == null) {
        return;
      }
      if (other.TeamId != 0UL) {
        TeamId = other.TeamId;
      }
      if (other.teamSetting_ != null) {
        if (teamSetting_ == null) {
          teamSetting_ = new global::Stardom.TeamSetting();
        }
        TeamSetting.MergeFrom(other.TeamSetting);
      }
      teamMembers_.Add(other.teamMembers_);
      if (other.WorldInviteCd != 0UL) {
        WorldInviteCd = other.WorldInviteCd;
      }
      if (other.IsSolo != 0) {
        IsSolo = other.IsSolo;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (teamSetting_ == null) {
              teamSetting_ = new global::Stardom.TeamSetting();
            }
            input.ReadMessage(teamSetting_);
            break;
          }
          case 26: {
            teamMembers_.AddEntriesFrom(input, _repeated_teamMembers_codec);
            break;
          }
          case 32: {
            WorldInviteCd = input.ReadUInt64();
            break;
          }
          case 40: {
            IsSolo = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 队伍基础信息
  /// </summary>
  public sealed partial class TeamBaseInfo : pb::IMessage<TeamBaseInfo> {
    private static readonly pb::MessageParser<TeamBaseInfo> _parser = new pb::MessageParser<TeamBaseInfo>(() => new TeamBaseInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamBaseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[197]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamBaseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamBaseInfo(TeamBaseInfo other) : this() {
      teamId_ = other.teamId_;
      TeamSetting = other.teamSetting_ != null ? other.TeamSetting.Clone() : null;
      leaderPlayerId_ = other.leaderPlayerId_;
      leaderLevel_ = other.leaderLevel_;
      leaderSex_ = other.leaderSex_;
      leaderHeadId_ = other.leaderHeadId_;
      leaderName_ = other.leaderName_;
      memberNum_ = other.memberNum_;
      createTime_ = other.createTime_;
      maxPianoLevel_ = other.maxPianoLevel_;
      maxDrumLevel_ = other.maxDrumLevel_;
      maxFightPower_ = other.maxFightPower_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamBaseInfo Clone() {
      return new TeamBaseInfo(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private ulong teamId_;
    /// <summary>
    /// 队伍uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "team_setting" field.</summary>
    public const int TeamSettingFieldNumber = 2;
    private global::Stardom.TeamSetting teamSetting_;
    /// <summary>
    /// 队伍设置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.TeamSetting TeamSetting {
      get { return teamSetting_; }
      set {
        teamSetting_ = value;
      }
    }

    /// <summary>Field number for the "leader_player_id" field.</summary>
    public const int LeaderPlayerIdFieldNumber = 3;
    private ulong leaderPlayerId_;
    /// <summary>
    /// 队长id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LeaderPlayerId {
      get { return leaderPlayerId_; }
      set {
        leaderPlayerId_ = value;
      }
    }

    /// <summary>Field number for the "leader_level" field.</summary>
    public const int LeaderLevelFieldNumber = 4;
    private int leaderLevel_;
    /// <summary>
    /// 队长等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeaderLevel {
      get { return leaderLevel_; }
      set {
        leaderLevel_ = value;
      }
    }

    /// <summary>Field number for the "leader_sex" field.</summary>
    public const int LeaderSexFieldNumber = 5;
    private int leaderSex_;
    /// <summary>
    /// 队长性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeaderSex {
      get { return leaderSex_; }
      set {
        leaderSex_ = value;
      }
    }

    /// <summary>Field number for the "leader_head_id" field.</summary>
    public const int LeaderHeadIdFieldNumber = 6;
    private int leaderHeadId_;
    /// <summary>
    /// 队长头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeaderHeadId {
      get { return leaderHeadId_; }
      set {
        leaderHeadId_ = value;
      }
    }

    /// <summary>Field number for the "leader_name" field.</summary>
    public const int LeaderNameFieldNumber = 7;
    private string leaderName_ = "";
    /// <summary>
    /// 队长名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LeaderName {
      get { return leaderName_; }
      set {
        leaderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "member_num" field.</summary>
    public const int MemberNumFieldNumber = 8;
    private int memberNum_;
    /// <summary>
    /// 人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MemberNum {
      get { return memberNum_; }
      set {
        memberNum_ = value;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 9;
    private ulong createTime_;
    /// <summary>
    /// 创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "max_piano_level" field.</summary>
    public const int MaxPianoLevelFieldNumber = 10;
    private int maxPianoLevel_;
    /// <summary>
    /// 最高钢琴等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxPianoLevel {
      get { return maxPianoLevel_; }
      set {
        maxPianoLevel_ = value;
      }
    }

    /// <summary>Field number for the "max_drum_level" field.</summary>
    public const int MaxDrumLevelFieldNumber = 11;
    private int maxDrumLevel_;
    /// <summary>
    /// 最高架子鼓等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxDrumLevel {
      get { return maxDrumLevel_; }
      set {
        maxDrumLevel_ = value;
      }
    }

    /// <summary>Field number for the "max_fight_power" field.</summary>
    public const int MaxFightPowerFieldNumber = 12;
    private int maxFightPower_;
    /// <summary>
    /// 最高战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxFightPower {
      get { return maxFightPower_; }
      set {
        maxFightPower_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamBaseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamBaseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamId != other.TeamId) return false;
      if (!object.Equals(TeamSetting, other.TeamSetting)) return false;
      if (LeaderPlayerId != other.LeaderPlayerId) return false;
      if (LeaderLevel != other.LeaderLevel) return false;
      if (LeaderSex != other.LeaderSex) return false;
      if (LeaderHeadId != other.LeaderHeadId) return false;
      if (LeaderName != other.LeaderName) return false;
      if (MemberNum != other.MemberNum) return false;
      if (CreateTime != other.CreateTime) return false;
      if (MaxPianoLevel != other.MaxPianoLevel) return false;
      if (MaxDrumLevel != other.MaxDrumLevel) return false;
      if (MaxFightPower != other.MaxFightPower) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamId != 0UL) hash ^= TeamId.GetHashCode();
      if (teamSetting_ != null) hash ^= TeamSetting.GetHashCode();
      if (LeaderPlayerId != 0UL) hash ^= LeaderPlayerId.GetHashCode();
      if (LeaderLevel != 0) hash ^= LeaderLevel.GetHashCode();
      if (LeaderSex != 0) hash ^= LeaderSex.GetHashCode();
      if (LeaderHeadId != 0) hash ^= LeaderHeadId.GetHashCode();
      if (LeaderName.Length != 0) hash ^= LeaderName.GetHashCode();
      if (MemberNum != 0) hash ^= MemberNum.GetHashCode();
      if (CreateTime != 0UL) hash ^= CreateTime.GetHashCode();
      if (MaxPianoLevel != 0) hash ^= MaxPianoLevel.GetHashCode();
      if (MaxDrumLevel != 0) hash ^= MaxDrumLevel.GetHashCode();
      if (MaxFightPower != 0) hash ^= MaxFightPower.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TeamId);
      }
      if (teamSetting_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TeamSetting);
      }
      if (LeaderPlayerId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(LeaderPlayerId);
      }
      if (LeaderLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LeaderLevel);
      }
      if (LeaderSex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LeaderSex);
      }
      if (LeaderHeadId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LeaderHeadId);
      }
      if (LeaderName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(LeaderName);
      }
      if (MemberNum != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MemberNum);
      }
      if (CreateTime != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(CreateTime);
      }
      if (MaxPianoLevel != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MaxPianoLevel);
      }
      if (MaxDrumLevel != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MaxDrumLevel);
      }
      if (MaxFightPower != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(MaxFightPower);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamId);
      }
      if (teamSetting_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamSetting);
      }
      if (LeaderPlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LeaderPlayerId);
      }
      if (LeaderLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeaderLevel);
      }
      if (LeaderSex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeaderSex);
      }
      if (LeaderHeadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeaderHeadId);
      }
      if (LeaderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LeaderName);
      }
      if (MemberNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemberNum);
      }
      if (CreateTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreateTime);
      }
      if (MaxPianoLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPianoLevel);
      }
      if (MaxDrumLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxDrumLevel);
      }
      if (MaxFightPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxFightPower);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamBaseInfo other) {
      if (other == null) {
        return;
      }
      if (other.TeamId != 0UL) {
        TeamId = other.TeamId;
      }
      if (other.teamSetting_ != null) {
        if (teamSetting_ == null) {
          teamSetting_ = new global::Stardom.TeamSetting();
        }
        TeamSetting.MergeFrom(other.TeamSetting);
      }
      if (other.LeaderPlayerId != 0UL) {
        LeaderPlayerId = other.LeaderPlayerId;
      }
      if (other.LeaderLevel != 0) {
        LeaderLevel = other.LeaderLevel;
      }
      if (other.LeaderSex != 0) {
        LeaderSex = other.LeaderSex;
      }
      if (other.LeaderHeadId != 0) {
        LeaderHeadId = other.LeaderHeadId;
      }
      if (other.LeaderName.Length != 0) {
        LeaderName = other.LeaderName;
      }
      if (other.MemberNum != 0) {
        MemberNum = other.MemberNum;
      }
      if (other.CreateTime != 0UL) {
        CreateTime = other.CreateTime;
      }
      if (other.MaxPianoLevel != 0) {
        MaxPianoLevel = other.MaxPianoLevel;
      }
      if (other.MaxDrumLevel != 0) {
        MaxDrumLevel = other.MaxDrumLevel;
      }
      if (other.MaxFightPower != 0) {
        MaxFightPower = other.MaxFightPower;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (teamSetting_ == null) {
              teamSetting_ = new global::Stardom.TeamSetting();
            }
            input.ReadMessage(teamSetting_);
            break;
          }
          case 24: {
            LeaderPlayerId = input.ReadUInt64();
            break;
          }
          case 32: {
            LeaderLevel = input.ReadInt32();
            break;
          }
          case 40: {
            LeaderSex = input.ReadInt32();
            break;
          }
          case 48: {
            LeaderHeadId = input.ReadInt32();
            break;
          }
          case 58: {
            LeaderName = input.ReadString();
            break;
          }
          case 64: {
            MemberNum = input.ReadInt32();
            break;
          }
          case 72: {
            CreateTime = input.ReadUInt64();
            break;
          }
          case 80: {
            MaxPianoLevel = input.ReadInt32();
            break;
          }
          case 88: {
            MaxDrumLevel = input.ReadInt32();
            break;
          }
          case 96: {
            MaxFightPower = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 队伍申请信息
  /// </summary>
  public sealed partial class TeamApplyInfo : pb::IMessage<TeamApplyInfo> {
    private static readonly pb::MessageParser<TeamApplyInfo> _parser = new pb::MessageParser<TeamApplyInfo>(() => new TeamApplyInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamApplyInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[198]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamApplyInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamApplyInfo(TeamApplyInfo other) : this() {
      playerId_ = other.playerId_;
      name_ = other.name_;
      level_ = other.level_;
      sex_ = other.sex_;
      headId_ = other.headId_;
      pianoLevel_ = other.pianoLevel_;
      drumLevel_ = other.drumLevel_;
      fightPower_ = other.fightPower_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamApplyInfo Clone() {
      return new TeamApplyInfo(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    /// <summary>
    /// id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 4;
    private int sex_;
    /// <summary>
    /// 性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "head_id" field.</summary>
    public const int HeadIdFieldNumber = 5;
    private int headId_;
    /// <summary>
    /// 头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadId {
      get { return headId_; }
      set {
        headId_ = value;
      }
    }

    /// <summary>Field number for the "piano_level" field.</summary>
    public const int PianoLevelFieldNumber = 6;
    private int pianoLevel_;
    /// <summary>
    /// 钢琴等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PianoLevel {
      get { return pianoLevel_; }
      set {
        pianoLevel_ = value;
      }
    }

    /// <summary>Field number for the "drum_level" field.</summary>
    public const int DrumLevelFieldNumber = 7;
    private int drumLevel_;
    /// <summary>
    /// 架子鼓等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DrumLevel {
      get { return drumLevel_; }
      set {
        drumLevel_ = value;
      }
    }

    /// <summary>Field number for the "fight_power" field.</summary>
    public const int FightPowerFieldNumber = 8;
    private int fightPower_;
    /// <summary>
    /// 战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FightPower {
      get { return fightPower_; }
      set {
        fightPower_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamApplyInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamApplyInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Name != other.Name) return false;
      if (Level != other.Level) return false;
      if (Sex != other.Sex) return false;
      if (HeadId != other.HeadId) return false;
      if (PianoLevel != other.PianoLevel) return false;
      if (DrumLevel != other.DrumLevel) return false;
      if (FightPower != other.FightPower) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Sex != 0) hash ^= Sex.GetHashCode();
      if (HeadId != 0) hash ^= HeadId.GetHashCode();
      if (PianoLevel != 0) hash ^= PianoLevel.GetHashCode();
      if (DrumLevel != 0) hash ^= DrumLevel.GetHashCode();
      if (FightPower != 0) hash ^= FightPower.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (Sex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Sex);
      }
      if (HeadId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HeadId);
      }
      if (PianoLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PianoLevel);
      }
      if (DrumLevel != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(DrumLevel);
      }
      if (FightPower != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FightPower);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (HeadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadId);
      }
      if (PianoLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PianoLevel);
      }
      if (DrumLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DrumLevel);
      }
      if (FightPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FightPower);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamApplyInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Sex != 0) {
        Sex = other.Sex;
      }
      if (other.HeadId != 0) {
        HeadId = other.HeadId;
      }
      if (other.PianoLevel != 0) {
        PianoLevel = other.PianoLevel;
      }
      if (other.DrumLevel != 0) {
        DrumLevel = other.DrumLevel;
      }
      if (other.FightPower != 0) {
        FightPower = other.FightPower;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            Sex = input.ReadInt32();
            break;
          }
          case 40: {
            HeadId = input.ReadInt32();
            break;
          }
          case 48: {
            PianoLevel = input.ReadInt32();
            break;
          }
          case 56: {
            DrumLevel = input.ReadInt32();
            break;
          }
          case 64: {
            FightPower = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 队伍玩法角色信息
  /// </summary>
  public sealed partial class TeamPlayRoleInfo : pb::IMessage<TeamPlayRoleInfo> {
    private static readonly pb::MessageParser<TeamPlayRoleInfo> _parser = new pb::MessageParser<TeamPlayRoleInfo>(() => new TeamPlayRoleInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamPlayRoleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[199]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayRoleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayRoleInfo(TeamPlayRoleInfo other) : this() {
      uuid_ = other.uuid_;
      isPlayer_ = other.isPlayer_;
      FightInfo = other.fightInfo_ != null ? other.FightInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayRoleInfo Clone() {
      return new TeamPlayRoleInfo(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    /// <summary>
    /// 唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "is_player" field.</summary>
    public const int IsPlayerFieldNumber = 2;
    private int isPlayer_;
    /// <summary>
    /// 是否是玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsPlayer {
      get { return isPlayer_; }
      set {
        isPlayer_ = value;
      }
    }

    /// <summary>Field number for the "fight_info" field.</summary>
    public const int FightInfoFieldNumber = 6;
    private global::Stardom.InitFighterInfo fightInfo_;
    /// <summary>
    /// 战斗信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.InitFighterInfo FightInfo {
      get { return fightInfo_; }
      set {
        fightInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamPlayRoleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamPlayRoleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (IsPlayer != other.IsPlayer) return false;
      if (!object.Equals(FightInfo, other.FightInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid != 0UL) hash ^= Uuid.GetHashCode();
      if (IsPlayer != 0) hash ^= IsPlayer.GetHashCode();
      if (fightInfo_ != null) hash ^= FightInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      if (IsPlayer != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(IsPlayer);
      }
      if (fightInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(FightInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (IsPlayer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsPlayer);
      }
      if (fightInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FightInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamPlayRoleInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uuid != 0UL) {
        Uuid = other.Uuid;
      }
      if (other.IsPlayer != 0) {
        IsPlayer = other.IsPlayer;
      }
      if (other.fightInfo_ != null) {
        if (fightInfo_ == null) {
          fightInfo_ = new global::Stardom.InitFighterInfo();
        }
        FightInfo.MergeFrom(other.FightInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 16: {
            IsPlayer = input.ReadInt32();
            break;
          }
          case 50: {
            if (fightInfo_ == null) {
              fightInfo_ = new global::Stardom.InitFighterInfo();
            }
            input.ReadMessage(fightInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 队伍阵容角色信息
  /// </summary>
  public sealed partial class TeamPlayEmbattleRoleInfo : pb::IMessage<TeamPlayEmbattleRoleInfo> {
    private static readonly pb::MessageParser<TeamPlayEmbattleRoleInfo> _parser = new pb::MessageParser<TeamPlayEmbattleRoleInfo>(() => new TeamPlayEmbattleRoleInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamPlayEmbattleRoleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[200]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayEmbattleRoleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayEmbattleRoleInfo(TeamPlayEmbattleRoleInfo other) : this() {
      playerId_ = other.playerId_;
      name_ = other.name_;
      RoleInfo = other.roleInfo_ != null ? other.RoleInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayEmbattleRoleInfo Clone() {
      return new TeamPlayEmbattleRoleInfo(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 玩家名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "role_info" field.</summary>
    public const int RoleInfoFieldNumber = 3;
    private global::Stardom.TeamPlayRoleInfo roleInfo_;
    /// <summary>
    /// 角色信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.TeamPlayRoleInfo RoleInfo {
      get { return roleInfo_; }
      set {
        roleInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamPlayEmbattleRoleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamPlayEmbattleRoleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(RoleInfo, other.RoleInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (roleInfo_ != null) hash ^= RoleInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (roleInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RoleInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (roleInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoleInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamPlayEmbattleRoleInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.roleInfo_ != null) {
        if (roleInfo_ == null) {
          roleInfo_ = new global::Stardom.TeamPlayRoleInfo();
        }
        RoleInfo.MergeFrom(other.RoleInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (roleInfo_ == null) {
              roleInfo_ = new global::Stardom.TeamPlayRoleInfo();
            }
            input.ReadMessage(roleInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 组队副本基础数据
  /// </summary>
  public sealed partial class TeamPlayBaseInfo : pb::IMessage<TeamPlayBaseInfo> {
    private static readonly pb::MessageParser<TeamPlayBaseInfo> _parser = new pb::MessageParser<TeamPlayBaseInfo>(() => new TeamPlayBaseInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamPlayBaseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[201]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayBaseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayBaseInfo(TeamPlayBaseInfo other) : this() {
      teamPlayId_ = other.teamPlayId_;
      tacit_ = other.tacit_;
      status_ = other.status_;
      timeout_ = other.timeout_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayBaseInfo Clone() {
      return new TeamPlayBaseInfo(this);
    }

    /// <summary>Field number for the "team_play_id" field.</summary>
    public const int TeamPlayIdFieldNumber = 1;
    private int teamPlayId_;
    /// <summary>
    /// 组队副本id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamPlayId {
      get { return teamPlayId_; }
      set {
        teamPlayId_ = value;
      }
    }

    /// <summary>Field number for the "tacit" field.</summary>
    public const int TacitFieldNumber = 3;
    private int tacit_;
    /// <summary>
    /// 组队副本默契值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tacit {
      get { return tacit_; }
      set {
        tacit_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private int status_;
    /// <summary>
    /// 状态(1准备,2开始,3奖励,4结束)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "timeout" field.</summary>
    public const int TimeoutFieldNumber = 5;
    private ulong timeout_;
    /// <summary>
    /// 状态剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timeout {
      get { return timeout_; }
      set {
        timeout_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamPlayBaseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamPlayBaseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamPlayId != other.TeamPlayId) return false;
      if (Tacit != other.Tacit) return false;
      if (Status != other.Status) return false;
      if (Timeout != other.Timeout) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamPlayId != 0) hash ^= TeamPlayId.GetHashCode();
      if (Tacit != 0) hash ^= Tacit.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Timeout != 0UL) hash ^= Timeout.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamPlayId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TeamPlayId);
      }
      if (Tacit != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Tacit);
      }
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Status);
      }
      if (Timeout != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Timeout);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamPlayId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamPlayId);
      }
      if (Tacit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tacit);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Timeout != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timeout);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamPlayBaseInfo other) {
      if (other == null) {
        return;
      }
      if (other.TeamPlayId != 0) {
        TeamPlayId = other.TeamPlayId;
      }
      if (other.Tacit != 0) {
        Tacit = other.Tacit;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Timeout != 0UL) {
        Timeout = other.Timeout;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamPlayId = input.ReadInt32();
            break;
          }
          case 24: {
            Tacit = input.ReadInt32();
            break;
          }
          case 32: {
            Status = input.ReadInt32();
            break;
          }
          case 40: {
            Timeout = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 组队副本关卡数据
  /// </summary>
  public sealed partial class TeamPlayStageInfo : pb::IMessage<TeamPlayStageInfo> {
    private static readonly pb::MessageParser<TeamPlayStageInfo> _parser = new pb::MessageParser<TeamPlayStageInfo>(() => new TeamPlayStageInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamPlayStageInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[202]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayStageInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayStageInfo(TeamPlayStageInfo other) : this() {
      stageId_ = other.stageId_;
      score_ = other.score_;
      playerIds_ = other.playerIds_.Clone();
      status_ = other.status_;
      timeout_ = other.timeout_;
      events_ = other.events_.Clone();
      RapInfo = other.rapInfo_ != null ? other.RapInfo.Clone() : null;
      PianoInfo = other.pianoInfo_ != null ? other.PianoInfo.Clone() : null;
      PianoFollowInfo = other.pianoFollowInfo_ != null ? other.PianoFollowInfo.Clone() : null;
      DrumInfo = other.drumInfo_ != null ? other.DrumInfo.Clone() : null;
      MoleInfo = other.moleInfo_ != null ? other.MoleInfo.Clone() : null;
      SingdanceInfo = other.singdanceInfo_ != null ? other.SingdanceInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayStageInfo Clone() {
      return new TeamPlayStageInfo(this);
    }

    /// <summary>Field number for the "stage_id" field.</summary>
    public const int StageIdFieldNumber = 1;
    private int stageId_;
    /// <summary>
    /// 关卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StageId {
      get { return stageId_; }
      set {
        stageId_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private int score_;
    /// <summary>
    /// 积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "player_ids" field.</summary>
    public const int PlayerIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<ulong> _repeated_playerIds_codec
        = pb::FieldCodec.ForUInt64(34);
    private readonly pbc::RepeatedField<ulong> playerIds_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// 关卡表演者id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> PlayerIds {
      get { return playerIds_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 5;
    private int status_;
    /// <summary>
    /// 状态(1准备,2开始,3结束)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "timeout" field.</summary>
    public const int TimeoutFieldNumber = 6;
    private ulong timeout_;
    /// <summary>
    /// 状态结束剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timeout {
      get { return timeout_; }
      set {
        timeout_ = value;
      }
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Stardom.TeamPlayEventInfo> _repeated_events_codec
        = pb::FieldCodec.ForMessage(74, global::Stardom.TeamPlayEventInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.TeamPlayEventInfo> events_ = new pbc::RepeatedField<global::Stardom.TeamPlayEventInfo>();
    /// <summary>
    /// 事件信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.TeamPlayEventInfo> Events {
      get { return events_; }
    }

    /// <summary>Field number for the "rap_info" field.</summary>
    public const int RapInfoFieldNumber = 10;
    private global::Stardom.TeamPlayRapInfo rapInfo_;
    /// <summary>
    /// rap数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.TeamPlayRapInfo RapInfo {
      get { return rapInfo_; }
      set {
        rapInfo_ = value;
      }
    }

    /// <summary>Field number for the "piano_info" field.</summary>
    public const int PianoInfoFieldNumber = 11;
    private global::Stardom.TeamPlayPianoInfo pianoInfo_;
    /// <summary>
    /// 钢琴数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.TeamPlayPianoInfo PianoInfo {
      get { return pianoInfo_; }
      set {
        pianoInfo_ = value;
      }
    }

    /// <summary>Field number for the "piano_follow_info" field.</summary>
    public const int PianoFollowInfoFieldNumber = 12;
    private global::Stardom.TeamPlayPianoFollowInfo pianoFollowInfo_;
    /// <summary>
    /// 钢琴听旋律数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.TeamPlayPianoFollowInfo PianoFollowInfo {
      get { return pianoFollowInfo_; }
      set {
        pianoFollowInfo_ = value;
      }
    }

    /// <summary>Field number for the "drum_info" field.</summary>
    public const int DrumInfoFieldNumber = 13;
    private global::Stardom.TeamPlayDrumInfo drumInfo_;
    /// <summary>
    /// 架子鼓数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.TeamPlayDrumInfo DrumInfo {
      get { return drumInfo_; }
      set {
        drumInfo_ = value;
      }
    }

    /// <summary>Field number for the "mole_info" field.</summary>
    public const int MoleInfoFieldNumber = 14;
    private global::Stardom.TeamPlayMoleInfo moleInfo_;
    /// <summary>
    /// 打地鼠数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.TeamPlayMoleInfo MoleInfo {
      get { return moleInfo_; }
      set {
        moleInfo_ = value;
      }
    }

    /// <summary>Field number for the "singdance_info" field.</summary>
    public const int SingdanceInfoFieldNumber = 15;
    private global::Stardom.TeamPlaySingDanceInfo singdanceInfo_;
    /// <summary>
    /// 唱跳数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.TeamPlaySingDanceInfo SingdanceInfo {
      get { return singdanceInfo_; }
      set {
        singdanceInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamPlayStageInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamPlayStageInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StageId != other.StageId) return false;
      if (Score != other.Score) return false;
      if(!playerIds_.Equals(other.playerIds_)) return false;
      if (Status != other.Status) return false;
      if (Timeout != other.Timeout) return false;
      if(!events_.Equals(other.events_)) return false;
      if (!object.Equals(RapInfo, other.RapInfo)) return false;
      if (!object.Equals(PianoInfo, other.PianoInfo)) return false;
      if (!object.Equals(PianoFollowInfo, other.PianoFollowInfo)) return false;
      if (!object.Equals(DrumInfo, other.DrumInfo)) return false;
      if (!object.Equals(MoleInfo, other.MoleInfo)) return false;
      if (!object.Equals(SingdanceInfo, other.SingdanceInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StageId != 0) hash ^= StageId.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      hash ^= playerIds_.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Timeout != 0UL) hash ^= Timeout.GetHashCode();
      hash ^= events_.GetHashCode();
      if (rapInfo_ != null) hash ^= RapInfo.GetHashCode();
      if (pianoInfo_ != null) hash ^= PianoInfo.GetHashCode();
      if (pianoFollowInfo_ != null) hash ^= PianoFollowInfo.GetHashCode();
      if (drumInfo_ != null) hash ^= DrumInfo.GetHashCode();
      if (moleInfo_ != null) hash ^= MoleInfo.GetHashCode();
      if (singdanceInfo_ != null) hash ^= SingdanceInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StageId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StageId);
      }
      if (Score != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Score);
      }
      playerIds_.WriteTo(output, _repeated_playerIds_codec);
      if (Status != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Status);
      }
      if (Timeout != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Timeout);
      }
      events_.WriteTo(output, _repeated_events_codec);
      if (rapInfo_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(RapInfo);
      }
      if (pianoInfo_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(PianoInfo);
      }
      if (pianoFollowInfo_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(PianoFollowInfo);
      }
      if (drumInfo_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(DrumInfo);
      }
      if (moleInfo_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(MoleInfo);
      }
      if (singdanceInfo_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(SingdanceInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StageId);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      size += playerIds_.CalculateSize(_repeated_playerIds_codec);
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Timeout != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timeout);
      }
      size += events_.CalculateSize(_repeated_events_codec);
      if (rapInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RapInfo);
      }
      if (pianoInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PianoInfo);
      }
      if (pianoFollowInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PianoFollowInfo);
      }
      if (drumInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DrumInfo);
      }
      if (moleInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MoleInfo);
      }
      if (singdanceInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SingdanceInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamPlayStageInfo other) {
      if (other == null) {
        return;
      }
      if (other.StageId != 0) {
        StageId = other.StageId;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      playerIds_.Add(other.playerIds_);
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Timeout != 0UL) {
        Timeout = other.Timeout;
      }
      events_.Add(other.events_);
      if (other.rapInfo_ != null) {
        if (rapInfo_ == null) {
          rapInfo_ = new global::Stardom.TeamPlayRapInfo();
        }
        RapInfo.MergeFrom(other.RapInfo);
      }
      if (other.pianoInfo_ != null) {
        if (pianoInfo_ == null) {
          pianoInfo_ = new global::Stardom.TeamPlayPianoInfo();
        }
        PianoInfo.MergeFrom(other.PianoInfo);
      }
      if (other.pianoFollowInfo_ != null) {
        if (pianoFollowInfo_ == null) {
          pianoFollowInfo_ = new global::Stardom.TeamPlayPianoFollowInfo();
        }
        PianoFollowInfo.MergeFrom(other.PianoFollowInfo);
      }
      if (other.drumInfo_ != null) {
        if (drumInfo_ == null) {
          drumInfo_ = new global::Stardom.TeamPlayDrumInfo();
        }
        DrumInfo.MergeFrom(other.DrumInfo);
      }
      if (other.moleInfo_ != null) {
        if (moleInfo_ == null) {
          moleInfo_ = new global::Stardom.TeamPlayMoleInfo();
        }
        MoleInfo.MergeFrom(other.MoleInfo);
      }
      if (other.singdanceInfo_ != null) {
        if (singdanceInfo_ == null) {
          singdanceInfo_ = new global::Stardom.TeamPlaySingDanceInfo();
        }
        SingdanceInfo.MergeFrom(other.SingdanceInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StageId = input.ReadInt32();
            break;
          }
          case 24: {
            Score = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            playerIds_.AddEntriesFrom(input, _repeated_playerIds_codec);
            break;
          }
          case 40: {
            Status = input.ReadInt32();
            break;
          }
          case 48: {
            Timeout = input.ReadUInt64();
            break;
          }
          case 74: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
          case 82: {
            if (rapInfo_ == null) {
              rapInfo_ = new global::Stardom.TeamPlayRapInfo();
            }
            input.ReadMessage(rapInfo_);
            break;
          }
          case 90: {
            if (pianoInfo_ == null) {
              pianoInfo_ = new global::Stardom.TeamPlayPianoInfo();
            }
            input.ReadMessage(pianoInfo_);
            break;
          }
          case 98: {
            if (pianoFollowInfo_ == null) {
              pianoFollowInfo_ = new global::Stardom.TeamPlayPianoFollowInfo();
            }
            input.ReadMessage(pianoFollowInfo_);
            break;
          }
          case 106: {
            if (drumInfo_ == null) {
              drumInfo_ = new global::Stardom.TeamPlayDrumInfo();
            }
            input.ReadMessage(drumInfo_);
            break;
          }
          case 114: {
            if (moleInfo_ == null) {
              moleInfo_ = new global::Stardom.TeamPlayMoleInfo();
            }
            input.ReadMessage(moleInfo_);
            break;
          }
          case 122: {
            if (singdanceInfo_ == null) {
              singdanceInfo_ = new global::Stardom.TeamPlaySingDanceInfo();
            }
            input.ReadMessage(singdanceInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 组队副本rap数据
  /// </summary>
  public sealed partial class TeamPlayRapInfo : pb::IMessage<TeamPlayRapInfo> {
    private static readonly pb::MessageParser<TeamPlayRapInfo> _parser = new pb::MessageParser<TeamPlayRapInfo>(() => new TeamPlayRapInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamPlayRapInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[203]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayRapInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayRapInfo(TeamPlayRapInfo other) : this() {
      answerId_ = other.answerId_;
      musicWords_ = other.musicWords_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayRapInfo Clone() {
      return new TeamPlayRapInfo(this);
    }

    /// <summary>Field number for the "answer_id" field.</summary>
    public const int AnswerIdFieldNumber = 1;
    private int answerId_;
    /// <summary>
    /// 题目id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AnswerId {
      get { return answerId_; }
      set {
        answerId_ = value;
      }
    }

    /// <summary>Field number for the "music_words" field.</summary>
    public const int MusicWordsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Stardom.TeamPlayMusicWordInfo> _repeated_musicWords_codec
        = pb::FieldCodec.ForMessage(18, global::Stardom.TeamPlayMusicWordInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.TeamPlayMusicWordInfo> musicWords_ = new pbc::RepeatedField<global::Stardom.TeamPlayMusicWordInfo>();
    /// <summary>
    /// 歌词信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.TeamPlayMusicWordInfo> MusicWords {
      get { return musicWords_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamPlayRapInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamPlayRapInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AnswerId != other.AnswerId) return false;
      if(!musicWords_.Equals(other.musicWords_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AnswerId != 0) hash ^= AnswerId.GetHashCode();
      hash ^= musicWords_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AnswerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AnswerId);
      }
      musicWords_.WriteTo(output, _repeated_musicWords_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AnswerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AnswerId);
      }
      size += musicWords_.CalculateSize(_repeated_musicWords_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamPlayRapInfo other) {
      if (other == null) {
        return;
      }
      if (other.AnswerId != 0) {
        AnswerId = other.AnswerId;
      }
      musicWords_.Add(other.musicWords_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AnswerId = input.ReadInt32();
            break;
          }
          case 18: {
            musicWords_.AddEntriesFrom(input, _repeated_musicWords_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 组队副本钢琴数据
  /// </summary>
  public sealed partial class TeamPlayPianoInfo : pb::IMessage<TeamPlayPianoInfo> {
    private static readonly pb::MessageParser<TeamPlayPianoInfo> _parser = new pb::MessageParser<TeamPlayPianoInfo>(() => new TeamPlayPianoInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamPlayPianoInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[204]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayPianoInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayPianoInfo(TeamPlayPianoInfo other) : this() {
      melodyId_ = other.melodyId_;
      historyOpt_ = other.historyOpt_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayPianoInfo Clone() {
      return new TeamPlayPianoInfo(this);
    }

    /// <summary>Field number for the "melody_id" field.</summary>
    public const int MelodyIdFieldNumber = 1;
    private int melodyId_;
    /// <summary>
    /// 乐谱id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MelodyId {
      get { return melodyId_; }
      set {
        melodyId_ = value;
      }
    }

    /// <summary>Field number for the "history_opt" field.</summary>
    public const int HistoryOptFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_historyOpt_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> historyOpt_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 操作纪录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HistoryOpt {
      get { return historyOpt_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamPlayPianoInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamPlayPianoInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MelodyId != other.MelodyId) return false;
      if(!historyOpt_.Equals(other.historyOpt_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MelodyId != 0) hash ^= MelodyId.GetHashCode();
      hash ^= historyOpt_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MelodyId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MelodyId);
      }
      historyOpt_.WriteTo(output, _repeated_historyOpt_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MelodyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MelodyId);
      }
      size += historyOpt_.CalculateSize(_repeated_historyOpt_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamPlayPianoInfo other) {
      if (other == null) {
        return;
      }
      if (other.MelodyId != 0) {
        MelodyId = other.MelodyId;
      }
      historyOpt_.Add(other.historyOpt_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MelodyId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            historyOpt_.AddEntriesFrom(input, _repeated_historyOpt_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 组队副本钢琴听旋律数据
  /// </summary>
  public sealed partial class TeamPlayPianoFollowInfo : pb::IMessage<TeamPlayPianoFollowInfo> {
    private static readonly pb::MessageParser<TeamPlayPianoFollowInfo> _parser = new pb::MessageParser<TeamPlayPianoFollowInfo>(() => new TeamPlayPianoFollowInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamPlayPianoFollowInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[205]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayPianoFollowInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayPianoFollowInfo(TeamPlayPianoFollowInfo other) : this() {
      round_ = other.round_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayPianoFollowInfo Clone() {
      return new TeamPlayPianoFollowInfo(this);
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 1;
    private int round_;
    /// <summary>
    /// round
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamPlayPianoFollowInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamPlayPianoFollowInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Round != other.Round) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Round != 0) hash ^= Round.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Round != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Round);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamPlayPianoFollowInfo other) {
      if (other == null) {
        return;
      }
      if (other.Round != 0) {
        Round = other.Round;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Round = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 组队副本架子鼓数据
  /// </summary>
  public sealed partial class TeamPlayDrumInfo : pb::IMessage<TeamPlayDrumInfo> {
    private static readonly pb::MessageParser<TeamPlayDrumInfo> _parser = new pb::MessageParser<TeamPlayDrumInfo>(() => new TeamPlayDrumInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamPlayDrumInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[206]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayDrumInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayDrumInfo(TeamPlayDrumInfo other) : this() {
      melodyId_ = other.melodyId_;
      historyOpt_ = other.historyOpt_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayDrumInfo Clone() {
      return new TeamPlayDrumInfo(this);
    }

    /// <summary>Field number for the "melody_id" field.</summary>
    public const int MelodyIdFieldNumber = 1;
    private int melodyId_;
    /// <summary>
    /// 乐谱id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MelodyId {
      get { return melodyId_; }
      set {
        melodyId_ = value;
      }
    }

    /// <summary>Field number for the "history_opt" field.</summary>
    public const int HistoryOptFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_historyOpt_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> historyOpt_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 操作纪录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HistoryOpt {
      get { return historyOpt_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamPlayDrumInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamPlayDrumInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MelodyId != other.MelodyId) return false;
      if(!historyOpt_.Equals(other.historyOpt_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MelodyId != 0) hash ^= MelodyId.GetHashCode();
      hash ^= historyOpt_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MelodyId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MelodyId);
      }
      historyOpt_.WriteTo(output, _repeated_historyOpt_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MelodyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MelodyId);
      }
      size += historyOpt_.CalculateSize(_repeated_historyOpt_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamPlayDrumInfo other) {
      if (other == null) {
        return;
      }
      if (other.MelodyId != 0) {
        MelodyId = other.MelodyId;
      }
      historyOpt_.Add(other.historyOpt_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MelodyId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            historyOpt_.AddEntriesFrom(input, _repeated_historyOpt_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 组队副本打地鼠数据
  /// </summary>
  public sealed partial class TeamPlayMoleInfo : pb::IMessage<TeamPlayMoleInfo> {
    private static readonly pb::MessageParser<TeamPlayMoleInfo> _parser = new pb::MessageParser<TeamPlayMoleInfo>(() => new TeamPlayMoleInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamPlayMoleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[207]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayMoleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayMoleInfo(TeamPlayMoleInfo other) : this() {
      moleGameId_ = other.moleGameId_;
      moles_ = other.moles_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayMoleInfo Clone() {
      return new TeamPlayMoleInfo(this);
    }

    /// <summary>Field number for the "mole_game_id" field.</summary>
    public const int MoleGameIdFieldNumber = 1;
    private int moleGameId_;
    /// <summary>
    /// 地鼠游戏id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoleGameId {
      get { return moleGameId_; }
      set {
        moleGameId_ = value;
      }
    }

    /// <summary>Field number for the "moles" field.</summary>
    public const int MolesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Stardom.TeamPlayMole> _repeated_moles_codec
        = pb::FieldCodec.ForMessage(18, global::Stardom.TeamPlayMole.Parser);
    private readonly pbc::RepeatedField<global::Stardom.TeamPlayMole> moles_ = new pbc::RepeatedField<global::Stardom.TeamPlayMole>();
    /// <summary>
    /// 地鼠信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.TeamPlayMole> Moles {
      get { return moles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamPlayMoleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamPlayMoleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MoleGameId != other.MoleGameId) return false;
      if(!moles_.Equals(other.moles_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MoleGameId != 0) hash ^= MoleGameId.GetHashCode();
      hash ^= moles_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MoleGameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MoleGameId);
      }
      moles_.WriteTo(output, _repeated_moles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MoleGameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoleGameId);
      }
      size += moles_.CalculateSize(_repeated_moles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamPlayMoleInfo other) {
      if (other == null) {
        return;
      }
      if (other.MoleGameId != 0) {
        MoleGameId = other.MoleGameId;
      }
      moles_.Add(other.moles_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MoleGameId = input.ReadInt32();
            break;
          }
          case 18: {
            moles_.AddEntriesFrom(input, _repeated_moles_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 组队副本地鼠数据
  /// </summary>
  public sealed partial class TeamPlayMole : pb::IMessage<TeamPlayMole> {
    private static readonly pb::MessageParser<TeamPlayMole> _parser = new pb::MessageParser<TeamPlayMole>(() => new TeamPlayMole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamPlayMole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[208]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayMole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayMole(TeamPlayMole other) : this() {
      holeId_ = other.holeId_;
      monsterId_ = other.monsterId_;
      endTime_ = other.endTime_;
      bitTimes_ = other.bitTimes_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayMole Clone() {
      return new TeamPlayMole(this);
    }

    /// <summary>Field number for the "hole_id" field.</summary>
    public const int HoleIdFieldNumber = 1;
    private int holeId_;
    /// <summary>
    /// 洞id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HoleId {
      get { return holeId_; }
      set {
        holeId_ = value;
      }
    }

    /// <summary>Field number for the "monster_id" field.</summary>
    public const int MonsterIdFieldNumber = 2;
    private int monsterId_;
    /// <summary>
    /// 怪物id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterId {
      get { return monsterId_; }
      set {
        monsterId_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 3;
    private ulong endTime_;
    /// <summary>
    /// 结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "bit_times" field.</summary>
    public const int BitTimesFieldNumber = 4;
    private int bitTimes_;
    /// <summary>
    /// 击打次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BitTimes {
      get { return bitTimes_; }
      set {
        bitTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamPlayMole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamPlayMole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HoleId != other.HoleId) return false;
      if (MonsterId != other.MonsterId) return false;
      if (EndTime != other.EndTime) return false;
      if (BitTimes != other.BitTimes) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HoleId != 0) hash ^= HoleId.GetHashCode();
      if (MonsterId != 0) hash ^= MonsterId.GetHashCode();
      if (EndTime != 0UL) hash ^= EndTime.GetHashCode();
      if (BitTimes != 0) hash ^= BitTimes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HoleId);
      }
      if (MonsterId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MonsterId);
      }
      if (EndTime != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(EndTime);
      }
      if (BitTimes != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BitTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HoleId);
      }
      if (MonsterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterId);
      }
      if (EndTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndTime);
      }
      if (BitTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BitTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamPlayMole other) {
      if (other == null) {
        return;
      }
      if (other.HoleId != 0) {
        HoleId = other.HoleId;
      }
      if (other.MonsterId != 0) {
        MonsterId = other.MonsterId;
      }
      if (other.EndTime != 0UL) {
        EndTime = other.EndTime;
      }
      if (other.BitTimes != 0) {
        BitTimes = other.BitTimes;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HoleId = input.ReadInt32();
            break;
          }
          case 16: {
            MonsterId = input.ReadInt32();
            break;
          }
          case 24: {
            EndTime = input.ReadUInt64();
            break;
          }
          case 32: {
            BitTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 组队副本唱跳关卡
  /// </summary>
  public sealed partial class TeamPlaySingDanceInfo : pb::IMessage<TeamPlaySingDanceInfo> {
    private static readonly pb::MessageParser<TeamPlaySingDanceInfo> _parser = new pb::MessageParser<TeamPlaySingDanceInfo>(() => new TeamPlaySingDanceInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamPlaySingDanceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[209]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlaySingDanceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlaySingDanceInfo(TeamPlaySingDanceInfo other) : this() {
      fightCd_ = other.fightCd_;
      musicWords_ = other.musicWords_.Clone();
      posInfos_ = other.posInfos_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlaySingDanceInfo Clone() {
      return new TeamPlaySingDanceInfo(this);
    }

    /// <summary>Field number for the "fight_cd" field.</summary>
    public const int FightCdFieldNumber = 1;
    private ulong fightCd_;
    /// <summary>
    /// 关卡cd  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FightCd {
      get { return fightCd_; }
      set {
        fightCd_ = value;
      }
    }

    /// <summary>Field number for the "music_words" field.</summary>
    public const int MusicWordsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Stardom.TeamPlayMusicWordInfo> _repeated_musicWords_codec
        = pb::FieldCodec.ForMessage(18, global::Stardom.TeamPlayMusicWordInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.TeamPlayMusicWordInfo> musicWords_ = new pbc::RepeatedField<global::Stardom.TeamPlayMusicWordInfo>();
    /// <summary>
    /// 歌词信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.TeamPlayMusicWordInfo> MusicWords {
      get { return musicWords_; }
    }

    /// <summary>Field number for the "pos_infos" field.</summary>
    public const int PosInfosFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Stardom.TeamPlaySingDancePosInfo> _repeated_posInfos_codec
        = pb::FieldCodec.ForMessage(26, global::Stardom.TeamPlaySingDancePosInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.TeamPlaySingDancePosInfo> posInfos_ = new pbc::RepeatedField<global::Stardom.TeamPlaySingDancePosInfo>();
    /// <summary>
    /// 坑位信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.TeamPlaySingDancePosInfo> PosInfos {
      get { return posInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamPlaySingDanceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamPlaySingDanceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FightCd != other.FightCd) return false;
      if(!musicWords_.Equals(other.musicWords_)) return false;
      if(!posInfos_.Equals(other.posInfos_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FightCd != 0UL) hash ^= FightCd.GetHashCode();
      hash ^= musicWords_.GetHashCode();
      hash ^= posInfos_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FightCd != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(FightCd);
      }
      musicWords_.WriteTo(output, _repeated_musicWords_codec);
      posInfos_.WriteTo(output, _repeated_posInfos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FightCd != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FightCd);
      }
      size += musicWords_.CalculateSize(_repeated_musicWords_codec);
      size += posInfos_.CalculateSize(_repeated_posInfos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamPlaySingDanceInfo other) {
      if (other == null) {
        return;
      }
      if (other.FightCd != 0UL) {
        FightCd = other.FightCd;
      }
      musicWords_.Add(other.musicWords_);
      posInfos_.Add(other.posInfos_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FightCd = input.ReadUInt64();
            break;
          }
          case 18: {
            musicWords_.AddEntriesFrom(input, _repeated_musicWords_codec);
            break;
          }
          case 26: {
            posInfos_.AddEntriesFrom(input, _repeated_posInfos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 组队副本战斗关卡坑位信息
  /// </summary>
  public sealed partial class TeamPlaySingDancePosInfo : pb::IMessage<TeamPlaySingDancePosInfo> {
    private static readonly pb::MessageParser<TeamPlaySingDancePosInfo> _parser = new pb::MessageParser<TeamPlaySingDancePosInfo>(() => new TeamPlaySingDancePosInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamPlaySingDancePosInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[210]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlaySingDancePosInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlaySingDancePosInfo(TeamPlaySingDancePosInfo other) : this() {
      posId_ = other.posId_;
      monsterId_ = other.monsterId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlaySingDancePosInfo Clone() {
      return new TeamPlaySingDancePosInfo(this);
    }

    /// <summary>Field number for the "pos_id" field.</summary>
    public const int PosIdFieldNumber = 1;
    private int posId_;
    /// <summary>
    /// 坑位id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosId {
      get { return posId_; }
      set {
        posId_ = value;
      }
    }

    /// <summary>Field number for the "monster_id" field.</summary>
    public const int MonsterIdFieldNumber = 2;
    private int monsterId_;
    /// <summary>
    /// 怪物id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterId {
      get { return monsterId_; }
      set {
        monsterId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamPlaySingDancePosInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamPlaySingDancePosInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PosId != other.PosId) return false;
      if (MonsterId != other.MonsterId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PosId != 0) hash ^= PosId.GetHashCode();
      if (MonsterId != 0) hash ^= MonsterId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PosId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PosId);
      }
      if (MonsterId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MonsterId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PosId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosId);
      }
      if (MonsterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamPlaySingDancePosInfo other) {
      if (other == null) {
        return;
      }
      if (other.PosId != 0) {
        PosId = other.PosId;
      }
      if (other.MonsterId != 0) {
        MonsterId = other.MonsterId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PosId = input.ReadInt32();
            break;
          }
          case 16: {
            MonsterId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 组队副本事件信息
  /// </summary>
  public sealed partial class TeamPlayEventInfo : pb::IMessage<TeamPlayEventInfo> {
    private static readonly pb::MessageParser<TeamPlayEventInfo> _parser = new pb::MessageParser<TeamPlayEventInfo>(() => new TeamPlayEventInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamPlayEventInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[211]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayEventInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayEventInfo(TeamPlayEventInfo other) : this() {
      id_ = other.id_;
      eventId_ = other.eventId_;
      players_ = other.players_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayEventInfo Clone() {
      return new TeamPlayEventInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 2;
    private int eventId_;
    /// <summary>
    /// 事件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventId {
      get { return eventId_; }
      set {
        eventId_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Stardom.TeamPlayEventPlayerTarget> _repeated_players_codec
        = pb::FieldCodec.ForMessage(34, global::Stardom.TeamPlayEventPlayerTarget.Parser);
    private readonly pbc::RepeatedField<global::Stardom.TeamPlayEventPlayerTarget> players_ = new pbc::RepeatedField<global::Stardom.TeamPlayEventPlayerTarget>();
    /// <summary>
    /// 参与玩家目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.TeamPlayEventPlayerTarget> Players {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamPlayEventInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamPlayEventInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (EventId != other.EventId) return false;
      if(!players_.Equals(other.players_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (EventId != 0) hash ^= EventId.GetHashCode();
      hash ^= players_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (EventId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EventId);
      }
      players_.WriteTo(output, _repeated_players_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (EventId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventId);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamPlayEventInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.EventId != 0) {
        EventId = other.EventId;
      }
      players_.Add(other.players_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            EventId = input.ReadInt32();
            break;
          }
          case 34: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 组队副本事件玩家目标
  /// </summary>
  public sealed partial class TeamPlayEventPlayerTarget : pb::IMessage<TeamPlayEventPlayerTarget> {
    private static readonly pb::MessageParser<TeamPlayEventPlayerTarget> _parser = new pb::MessageParser<TeamPlayEventPlayerTarget>(() => new TeamPlayEventPlayerTarget());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamPlayEventPlayerTarget> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[212]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayEventPlayerTarget() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayEventPlayerTarget(TeamPlayEventPlayerTarget other) : this() {
      playerId_ = other.playerId_;
      key_ = other.key_;
      endTime_ = other.endTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayEventPlayerTarget Clone() {
      return new TeamPlayEventPlayerTarget(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 3;
    private int key_;
    /// <summary>
    /// 玩家需要输入的key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 4;
    private ulong endTime_;
    /// <summary>
    /// 结束时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamPlayEventPlayerTarget);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamPlayEventPlayerTarget other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Key != other.Key) return false;
      if (EndTime != other.EndTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (Key != 0) hash ^= Key.GetHashCode();
      if (EndTime != 0UL) hash ^= EndTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (Key != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Key);
      }
      if (EndTime != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(EndTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      if (EndTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamPlayEventPlayerTarget other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.EndTime != 0UL) {
        EndTime = other.EndTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 24: {
            Key = input.ReadInt32();
            break;
          }
          case 32: {
            EndTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 保存的事件描述
  /// </summary>
  public sealed partial class TeamPlayEventDesc : pb::IMessage<TeamPlayEventDesc> {
    private static readonly pb::MessageParser<TeamPlayEventDesc> _parser = new pb::MessageParser<TeamPlayEventDesc>(() => new TeamPlayEventDesc());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamPlayEventDesc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[213]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayEventDesc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayEventDesc(TeamPlayEventDesc other) : this() {
      eventId_ = other.eventId_;
      keyParams_ = other.keyParams_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayEventDesc Clone() {
      return new TeamPlayEventDesc(this);
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 1;
    private int eventId_;
    /// <summary>
    /// 事件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventId {
      get { return eventId_; }
      set {
        eventId_ = value;
      }
    }

    /// <summary>Field number for the "key_params" field.</summary>
    public const int KeyParamsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Stardom.KeyParam> _repeated_keyParams_codec
        = pb::FieldCodec.ForMessage(18, global::Stardom.KeyParam.Parser);
    private readonly pbc::RepeatedField<global::Stardom.KeyParam> keyParams_ = new pbc::RepeatedField<global::Stardom.KeyParam>();
    /// <summary>
    /// 参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.KeyParam> KeyParams {
      get { return keyParams_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamPlayEventDesc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamPlayEventDesc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if(!keyParams_.Equals(other.keyParams_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventId != 0) hash ^= EventId.GetHashCode();
      hash ^= keyParams_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EventId);
      }
      keyParams_.WriteTo(output, _repeated_keyParams_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventId);
      }
      size += keyParams_.CalculateSize(_repeated_keyParams_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamPlayEventDesc other) {
      if (other == null) {
        return;
      }
      if (other.EventId != 0) {
        EventId = other.EventId;
      }
      keyParams_.Add(other.keyParams_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EventId = input.ReadInt32();
            break;
          }
          case 18: {
            keyParams_.AddEntriesFrom(input, _repeated_keyParams_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 组队副本歌词
  /// </summary>
  public sealed partial class TeamPlayMusicWordInfo : pb::IMessage<TeamPlayMusicWordInfo> {
    private static readonly pb::MessageParser<TeamPlayMusicWordInfo> _parser = new pb::MessageParser<TeamPlayMusicWordInfo>(() => new TeamPlayMusicWordInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamPlayMusicWordInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[214]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayMusicWordInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayMusicWordInfo(TeamPlayMusicWordInfo other) : this() {
      type_ = other.type_;
      Music = other.music_ != null ? other.Music.Clone() : null;
      EventMusic = other.eventMusic_ != null ? other.EventMusic.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayMusicWordInfo Clone() {
      return new TeamPlayMusicWordInfo(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    /// 类型 1是普通，2是事件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "music" field.</summary>
    public const int MusicFieldNumber = 2;
    private global::Stardom.TeamPlayMusic music_;
    /// <summary>
    /// 普通歌词
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.TeamPlayMusic Music {
      get { return music_; }
      set {
        music_ = value;
      }
    }

    /// <summary>Field number for the "event_music" field.</summary>
    public const int EventMusicFieldNumber = 3;
    private global::Stardom.TeamPlayEventMusic eventMusic_;
    /// <summary>
    /// 事件歌词
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.TeamPlayEventMusic EventMusic {
      get { return eventMusic_; }
      set {
        eventMusic_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamPlayMusicWordInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamPlayMusicWordInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(Music, other.Music)) return false;
      if (!object.Equals(EventMusic, other.EventMusic)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (music_ != null) hash ^= Music.GetHashCode();
      if (eventMusic_ != null) hash ^= EventMusic.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (music_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Music);
      }
      if (eventMusic_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EventMusic);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (music_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Music);
      }
      if (eventMusic_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventMusic);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamPlayMusicWordInfo other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.music_ != null) {
        if (music_ == null) {
          music_ = new global::Stardom.TeamPlayMusic();
        }
        Music.MergeFrom(other.Music);
      }
      if (other.eventMusic_ != null) {
        if (eventMusic_ == null) {
          eventMusic_ = new global::Stardom.TeamPlayEventMusic();
        }
        EventMusic.MergeFrom(other.EventMusic);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18: {
            if (music_ == null) {
              music_ = new global::Stardom.TeamPlayMusic();
            }
            input.ReadMessage(music_);
            break;
          }
          case 26: {
            if (eventMusic_ == null) {
              eventMusic_ = new global::Stardom.TeamPlayEventMusic();
            }
            input.ReadMessage(eventMusic_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 组队副本普通歌词
  /// </summary>
  public sealed partial class TeamPlayMusic : pb::IMessage<TeamPlayMusic> {
    private static readonly pb::MessageParser<TeamPlayMusic> _parser = new pb::MessageParser<TeamPlayMusic>(() => new TeamPlayMusic());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamPlayMusic> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[215]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayMusic() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayMusic(TeamPlayMusic other) : this() {
      name_ = other.name_;
      musicWordId_ = other.musicWordId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayMusic Clone() {
      return new TeamPlayMusic(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// 玩家名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "music_word_id" field.</summary>
    public const int MusicWordIdFieldNumber = 2;
    private int musicWordId_;
    /// <summary>
    /// 歌词id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MusicWordId {
      get { return musicWordId_; }
      set {
        musicWordId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamPlayMusic);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamPlayMusic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (MusicWordId != other.MusicWordId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (MusicWordId != 0) hash ^= MusicWordId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (MusicWordId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MusicWordId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (MusicWordId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MusicWordId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamPlayMusic other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.MusicWordId != 0) {
        MusicWordId = other.MusicWordId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            MusicWordId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 组队副本QTE歌词
  /// </summary>
  public sealed partial class TeamPlayEventMusic : pb::IMessage<TeamPlayEventMusic> {
    private static readonly pb::MessageParser<TeamPlayEventMusic> _parser = new pb::MessageParser<TeamPlayEventMusic>(() => new TeamPlayEventMusic());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamPlayEventMusic> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[216]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayEventMusic() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayEventMusic(TeamPlayEventMusic other) : this() {
      eventId_ = other.eventId_;
      keyParams_ = other.keyParams_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayEventMusic Clone() {
      return new TeamPlayEventMusic(this);
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 1;
    private int eventId_;
    /// <summary>
    /// 事件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventId {
      get { return eventId_; }
      set {
        eventId_ = value;
      }
    }

    /// <summary>Field number for the "key_params" field.</summary>
    public const int KeyParamsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Stardom.KeyParam> _repeated_keyParams_codec
        = pb::FieldCodec.ForMessage(18, global::Stardom.KeyParam.Parser);
    private readonly pbc::RepeatedField<global::Stardom.KeyParam> keyParams_ = new pbc::RepeatedField<global::Stardom.KeyParam>();
    /// <summary>
    /// 参数  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.KeyParam> KeyParams {
      get { return keyParams_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamPlayEventMusic);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamPlayEventMusic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if(!keyParams_.Equals(other.keyParams_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventId != 0) hash ^= EventId.GetHashCode();
      hash ^= keyParams_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EventId);
      }
      keyParams_.WriteTo(output, _repeated_keyParams_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventId);
      }
      size += keyParams_.CalculateSize(_repeated_keyParams_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamPlayEventMusic other) {
      if (other == null) {
        return;
      }
      if (other.EventId != 0) {
        EventId = other.EventId;
      }
      keyParams_.Add(other.keyParams_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EventId = input.ReadInt32();
            break;
          }
          case 18: {
            keyParams_.AddEntriesFrom(input, _repeated_keyParams_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 组队副本机器人信息
  /// </summary>
  public sealed partial class TeamPlayRobotInfo : pb::IMessage<TeamPlayRobotInfo> {
    private static readonly pb::MessageParser<TeamPlayRobotInfo> _parser = new pb::MessageParser<TeamPlayRobotInfo>(() => new TeamPlayRobotInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamPlayRobotInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[217]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayRobotInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayRobotInfo(TeamPlayRobotInfo other) : this() {
      id_ = other.id_;
      posX_ = other.posX_;
      posY_ = other.posY_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayRobotInfo Clone() {
      return new TeamPlayRobotInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 组队队员id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "pos_x" field.</summary>
    public const int PosXFieldNumber = 2;
    private int posX_;
    /// <summary>
    /// x坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "pos_y" field.</summary>
    public const int PosYFieldNumber = 3;
    private int posY_;
    /// <summary>
    /// y坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamPlayRobotInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamPlayRobotInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (PosX != other.PosX) return false;
      if (PosY != other.PosY) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (PosX != 0) hash ^= PosX.GetHashCode();
      if (PosY != 0) hash ^= PosY.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (PosX != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PosX);
      }
      if (PosY != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PosY);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (PosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosX);
      }
      if (PosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosY);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamPlayRobotInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.PosX != 0) {
        PosX = other.PosX;
      }
      if (other.PosY != 0) {
        PosY = other.PosY;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            PosX = input.ReadInt32();
            break;
          }
          case 24: {
            PosY = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 组队副本个人dps
  /// </summary>
  public sealed partial class TeamPlayMemberDps : pb::IMessage<TeamPlayMemberDps> {
    private static readonly pb::MessageParser<TeamPlayMemberDps> _parser = new pb::MessageParser<TeamPlayMemberDps>(() => new TeamPlayMemberDps());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamPlayMemberDps> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[218]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayMemberDps() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayMemberDps(TeamPlayMemberDps other) : this() {
      playerId_ = other.playerId_;
      name_ = other.name_;
      headId_ = other.headId_;
      sex_ = other.sex_;
      dps_ = other.dps_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayMemberDps Clone() {
      return new TeamPlayMemberDps(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 玩家名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "head_id" field.</summary>
    public const int HeadIdFieldNumber = 3;
    private int headId_;
    /// <summary>
    /// 头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadId {
      get { return headId_; }
      set {
        headId_ = value;
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 4;
    private int sex_;
    /// <summary>
    /// 性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "dps" field.</summary>
    public const int DpsFieldNumber = 5;
    private int dps_;
    /// <summary>
    /// dps
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dps {
      get { return dps_; }
      set {
        dps_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamPlayMemberDps);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamPlayMemberDps other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Name != other.Name) return false;
      if (HeadId != other.HeadId) return false;
      if (Sex != other.Sex) return false;
      if (Dps != other.Dps) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (HeadId != 0) hash ^= HeadId.GetHashCode();
      if (Sex != 0) hash ^= Sex.GetHashCode();
      if (Dps != 0) hash ^= Dps.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HeadId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HeadId);
      }
      if (Sex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Sex);
      }
      if (Dps != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Dps);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HeadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadId);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (Dps != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dps);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamPlayMemberDps other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.HeadId != 0) {
        HeadId = other.HeadId;
      }
      if (other.Sex != 0) {
        Sex = other.Sex;
      }
      if (other.Dps != 0) {
        Dps = other.Dps;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            HeadId = input.ReadInt32();
            break;
          }
          case 32: {
            Sex = input.ReadInt32();
            break;
          }
          case 40: {
            Dps = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 组队副本dps信息
  /// </summary>
  public sealed partial class TeamPlayDpsInfo : pb::IMessage<TeamPlayDpsInfo> {
    private static readonly pb::MessageParser<TeamPlayDpsInfo> _parser = new pb::MessageParser<TeamPlayDpsInfo>(() => new TeamPlayDpsInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamPlayDpsInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[219]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayDpsInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayDpsInfo(TeamPlayDpsInfo other) : this() {
      posId_ = other.posId_;
      memberDps_ = other.memberDps_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayDpsInfo Clone() {
      return new TeamPlayDpsInfo(this);
    }

    /// <summary>Field number for the "pos_id" field.</summary>
    public const int PosIdFieldNumber = 1;
    private int posId_;
    /// <summary>
    /// 职位id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosId {
      get { return posId_; }
      set {
        posId_ = value;
      }
    }

    /// <summary>Field number for the "member_dps" field.</summary>
    public const int MemberDpsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Stardom.TeamPlayMemberDps> _repeated_memberDps_codec
        = pb::FieldCodec.ForMessage(18, global::Stardom.TeamPlayMemberDps.Parser);
    private readonly pbc::RepeatedField<global::Stardom.TeamPlayMemberDps> memberDps_ = new pbc::RepeatedField<global::Stardom.TeamPlayMemberDps>();
    /// <summary>
    /// 玩家dps
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.TeamPlayMemberDps> MemberDps {
      get { return memberDps_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamPlayDpsInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamPlayDpsInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PosId != other.PosId) return false;
      if(!memberDps_.Equals(other.memberDps_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PosId != 0) hash ^= PosId.GetHashCode();
      hash ^= memberDps_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PosId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PosId);
      }
      memberDps_.WriteTo(output, _repeated_memberDps_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PosId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosId);
      }
      size += memberDps_.CalculateSize(_repeated_memberDps_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamPlayDpsInfo other) {
      if (other == null) {
        return;
      }
      if (other.PosId != 0) {
        PosId = other.PosId;
      }
      memberDps_.Add(other.memberDps_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PosId = input.ReadInt32();
            break;
          }
          case 18: {
            memberDps_.AddEntriesFrom(input, _repeated_memberDps_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 训练仪玩家数据
  /// </summary>
  public sealed partial class PlayerTrainToolInfo : pb::IMessage<PlayerTrainToolInfo> {
    private static readonly pb::MessageParser<PlayerTrainToolInfo> _parser = new pb::MessageParser<PlayerTrainToolInfo>(() => new PlayerTrainToolInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerTrainToolInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[220]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerTrainToolInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerTrainToolInfo(PlayerTrainToolInfo other) : this() {
      ardentValue_ = other.ardentValue_;
      assistTimes_ = other.assistTimes_;
      plotedTraintools_ = other.plotedTraintools_.Clone();
      friendTimes_ = other.friendTimes_.Clone();
      traintoolInfos_ = other.traintoolInfos_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerTrainToolInfo Clone() {
      return new PlayerTrainToolInfo(this);
    }

    /// <summary>Field number for the "ardent_value" field.</summary>
    public const int ArdentValueFieldNumber = 1;
    private int ardentValue_;
    /// <summary>
    /// 热心值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ArdentValue {
      get { return ardentValue_; }
      set {
        ardentValue_ = value;
      }
    }

    /// <summary>Field number for the "assist_times" field.</summary>
    public const int AssistTimesFieldNumber = 2;
    private int assistTimes_;
    /// <summary>
    /// 今日助战次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AssistTimes {
      get { return assistTimes_; }
      set {
        assistTimes_ = value;
      }
    }

    /// <summary>Field number for the "ploted_traintools" field.</summary>
    public const int PlotedTraintoolsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_plotedTraintools_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> plotedTraintools_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 已播放剧情的训练仪
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PlotedTraintools {
      get { return plotedTraintools_; }
    }

    /// <summary>Field number for the "friend_times" field.</summary>
    public const int FriendTimesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Stardom.TrainToolFriendTimes> _repeated_friendTimes_codec
        = pb::FieldCodec.ForMessage(34, global::Stardom.TrainToolFriendTimes.Parser);
    private readonly pbc::RepeatedField<global::Stardom.TrainToolFriendTimes> friendTimes_ = new pbc::RepeatedField<global::Stardom.TrainToolFriendTimes>();
    /// <summary>
    /// 好友助战信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.TrainToolFriendTimes> FriendTimes {
      get { return friendTimes_; }
    }

    /// <summary>Field number for the "traintool_infos" field.</summary>
    public const int TraintoolInfosFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Stardom.TrainToolInfo> _repeated_traintoolInfos_codec
        = pb::FieldCodec.ForMessage(42, global::Stardom.TrainToolInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.TrainToolInfo> traintoolInfos_ = new pbc::RepeatedField<global::Stardom.TrainToolInfo>();
    /// <summary>
    /// 训练仪数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.TrainToolInfo> TraintoolInfos {
      get { return traintoolInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerTrainToolInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerTrainToolInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ArdentValue != other.ArdentValue) return false;
      if (AssistTimes != other.AssistTimes) return false;
      if(!plotedTraintools_.Equals(other.plotedTraintools_)) return false;
      if(!friendTimes_.Equals(other.friendTimes_)) return false;
      if(!traintoolInfos_.Equals(other.traintoolInfos_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ArdentValue != 0) hash ^= ArdentValue.GetHashCode();
      if (AssistTimes != 0) hash ^= AssistTimes.GetHashCode();
      hash ^= plotedTraintools_.GetHashCode();
      hash ^= friendTimes_.GetHashCode();
      hash ^= traintoolInfos_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ArdentValue != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ArdentValue);
      }
      if (AssistTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AssistTimes);
      }
      plotedTraintools_.WriteTo(output, _repeated_plotedTraintools_codec);
      friendTimes_.WriteTo(output, _repeated_friendTimes_codec);
      traintoolInfos_.WriteTo(output, _repeated_traintoolInfos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ArdentValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArdentValue);
      }
      if (AssistTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AssistTimes);
      }
      size += plotedTraintools_.CalculateSize(_repeated_plotedTraintools_codec);
      size += friendTimes_.CalculateSize(_repeated_friendTimes_codec);
      size += traintoolInfos_.CalculateSize(_repeated_traintoolInfos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerTrainToolInfo other) {
      if (other == null) {
        return;
      }
      if (other.ArdentValue != 0) {
        ArdentValue = other.ArdentValue;
      }
      if (other.AssistTimes != 0) {
        AssistTimes = other.AssistTimes;
      }
      plotedTraintools_.Add(other.plotedTraintools_);
      friendTimes_.Add(other.friendTimes_);
      traintoolInfos_.Add(other.traintoolInfos_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ArdentValue = input.ReadInt32();
            break;
          }
          case 16: {
            AssistTimes = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            plotedTraintools_.AddEntriesFrom(input, _repeated_plotedTraintools_codec);
            break;
          }
          case 34: {
            friendTimes_.AddEntriesFrom(input, _repeated_friendTimes_codec);
            break;
          }
          case 42: {
            traintoolInfos_.AddEntriesFrom(input, _repeated_traintoolInfos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 训练仪好友助战次数
  /// </summary>
  public sealed partial class TrainToolFriendTimes : pb::IMessage<TrainToolFriendTimes> {
    private static readonly pb::MessageParser<TrainToolFriendTimes> _parser = new pb::MessageParser<TrainToolFriendTimes>(() => new TrainToolFriendTimes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrainToolFriendTimes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[221]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainToolFriendTimes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainToolFriendTimes(TrainToolFriendTimes other) : this() {
      playerId_ = other.playerId_;
      times_ = other.times_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainToolFriendTimes Clone() {
      return new TrainToolFriendTimes(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    /// <summary>
    /// 好友角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "times" field.</summary>
    public const int TimesFieldNumber = 2;
    private int times_;
    /// <summary>
    /// 助战次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrainToolFriendTimes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrainToolFriendTimes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Times != other.Times) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (Times != 0) hash ^= Times.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (Times != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Times);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Times);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrainToolFriendTimes other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.Times != 0) {
        Times = other.Times;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 16: {
            Times = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 训练仪数据
  /// </summary>
  public sealed partial class TrainToolInfo : pb::IMessage<TrainToolInfo> {
    private static readonly pb::MessageParser<TrainToolInfo> _parser = new pb::MessageParser<TrainToolInfo>(() => new TrainToolInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrainToolInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[222]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainToolInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainToolInfo(TrainToolInfo other) : this() {
      traintoolId_ = other.traintoolId_;
      curLayer_ = other.curLayer_;
      continueFailures_ = other.continueFailures_;
      challengeCd_ = other.challengeCd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainToolInfo Clone() {
      return new TrainToolInfo(this);
    }

    /// <summary>Field number for the "traintool_id" field.</summary>
    public const int TraintoolIdFieldNumber = 1;
    private int traintoolId_;
    /// <summary>
    /// 助战塔id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TraintoolId {
      get { return traintoolId_; }
      set {
        traintoolId_ = value;
      }
    }

    /// <summary>Field number for the "cur_layer" field.</summary>
    public const int CurLayerFieldNumber = 2;
    private int curLayer_;
    /// <summary>
    /// 已通关层数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurLayer {
      get { return curLayer_; }
      set {
        curLayer_ = value;
      }
    }

    /// <summary>Field number for the "continue_failures" field.</summary>
    public const int ContinueFailuresFieldNumber = 6;
    private int continueFailures_;
    /// <summary>
    /// 连续失败次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ContinueFailures {
      get { return continueFailures_; }
      set {
        continueFailures_ = value;
      }
    }

    /// <summary>Field number for the "challenge_cd" field.</summary>
    public const int ChallengeCdFieldNumber = 7;
    private ulong challengeCd_;
    /// <summary>
    /// 挑战cd
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChallengeCd {
      get { return challengeCd_; }
      set {
        challengeCd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrainToolInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrainToolInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TraintoolId != other.TraintoolId) return false;
      if (CurLayer != other.CurLayer) return false;
      if (ContinueFailures != other.ContinueFailures) return false;
      if (ChallengeCd != other.ChallengeCd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TraintoolId != 0) hash ^= TraintoolId.GetHashCode();
      if (CurLayer != 0) hash ^= CurLayer.GetHashCode();
      if (ContinueFailures != 0) hash ^= ContinueFailures.GetHashCode();
      if (ChallengeCd != 0UL) hash ^= ChallengeCd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TraintoolId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TraintoolId);
      }
      if (CurLayer != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurLayer);
      }
      if (ContinueFailures != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ContinueFailures);
      }
      if (ChallengeCd != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(ChallengeCd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TraintoolId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TraintoolId);
      }
      if (CurLayer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurLayer);
      }
      if (ContinueFailures != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContinueFailures);
      }
      if (ChallengeCd != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChallengeCd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrainToolInfo other) {
      if (other == null) {
        return;
      }
      if (other.TraintoolId != 0) {
        TraintoolId = other.TraintoolId;
      }
      if (other.CurLayer != 0) {
        CurLayer = other.CurLayer;
      }
      if (other.ContinueFailures != 0) {
        ContinueFailures = other.ContinueFailures;
      }
      if (other.ChallengeCd != 0UL) {
        ChallengeCd = other.ChallengeCd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TraintoolId = input.ReadInt32();
            break;
          }
          case 16: {
            CurLayer = input.ReadInt32();
            break;
          }
          case 48: {
            ContinueFailures = input.ReadInt32();
            break;
          }
          case 56: {
            ChallengeCd = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 训练仪助阵信息
  /// </summary>
  public sealed partial class TrainToolAssistInfo : pb::IMessage<TrainToolAssistInfo> {
    private static readonly pb::MessageParser<TrainToolAssistInfo> _parser = new pb::MessageParser<TrainToolAssistInfo>(() => new TrainToolAssistInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrainToolAssistInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[223]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainToolAssistInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainToolAssistInfo(TrainToolAssistInfo other) : this() {
      CardInfo = other.cardInfo_ != null ? other.CardInfo.Clone() : null;
      assistRecords_ = other.assistRecords_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainToolAssistInfo Clone() {
      return new TrainToolAssistInfo(this);
    }

    /// <summary>Field number for the "card_info" field.</summary>
    public const int CardInfoFieldNumber = 1;
    private global::Stardom.InitFighterInfo cardInfo_;
    /// <summary>
    /// 助战卡牌信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.InitFighterInfo CardInfo {
      get { return cardInfo_; }
      set {
        cardInfo_ = value;
      }
    }

    /// <summary>Field number for the "assist_records" field.</summary>
    public const int AssistRecordsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Stardom.TrainToolAssistRecord> _repeated_assistRecords_codec
        = pb::FieldCodec.ForMessage(18, global::Stardom.TrainToolAssistRecord.Parser);
    private readonly pbc::RepeatedField<global::Stardom.TrainToolAssistRecord> assistRecords_ = new pbc::RepeatedField<global::Stardom.TrainToolAssistRecord>();
    /// <summary>
    /// 助战记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.TrainToolAssistRecord> AssistRecords {
      get { return assistRecords_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrainToolAssistInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrainToolAssistInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CardInfo, other.CardInfo)) return false;
      if(!assistRecords_.Equals(other.assistRecords_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cardInfo_ != null) hash ^= CardInfo.GetHashCode();
      hash ^= assistRecords_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (cardInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardInfo);
      }
      assistRecords_.WriteTo(output, _repeated_assistRecords_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cardInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardInfo);
      }
      size += assistRecords_.CalculateSize(_repeated_assistRecords_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrainToolAssistInfo other) {
      if (other == null) {
        return;
      }
      if (other.cardInfo_ != null) {
        if (cardInfo_ == null) {
          cardInfo_ = new global::Stardom.InitFighterInfo();
        }
        CardInfo.MergeFrom(other.CardInfo);
      }
      assistRecords_.Add(other.assistRecords_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (cardInfo_ == null) {
              cardInfo_ = new global::Stardom.InitFighterInfo();
            }
            input.ReadMessage(cardInfo_);
            break;
          }
          case 18: {
            assistRecords_.AddEntriesFrom(input, _repeated_assistRecords_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 训练仪助战记录
  /// </summary>
  public sealed partial class TrainToolAssistRecord : pb::IMessage<TrainToolAssistRecord> {
    private static readonly pb::MessageParser<TrainToolAssistRecord> _parser = new pb::MessageParser<TrainToolAssistRecord>(() => new TrainToolAssistRecord());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrainToolAssistRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[224]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainToolAssistRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainToolAssistRecord(TrainToolAssistRecord other) : this() {
      playerId_ = other.playerId_;
      name_ = other.name_;
      level_ = other.level_;
      headId_ = other.headId_;
      sex_ = other.sex_;
      timestamp_ = other.timestamp_;
      cardId_ = other.cardId_;
      traintoolId_ = other.traintoolId_;
      layer_ = other.layer_;
      isSuc_ = other.isSuc_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainToolAssistRecord Clone() {
      return new TrainToolAssistRecord(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    /// <summary>
    /// 角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "head_id" field.</summary>
    public const int HeadIdFieldNumber = 4;
    private int headId_;
    /// <summary>
    /// 头像id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadId {
      get { return headId_; }
      set {
        headId_ = value;
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 5;
    private int sex_;
    /// <summary>
    /// 性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 6;
    private ulong timestamp_;
    /// <summary>
    /// 助战时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 7;
    private int cardId_;
    /// <summary>
    /// 助战卡牌id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "traintool_id" field.</summary>
    public const int TraintoolIdFieldNumber = 8;
    private int traintoolId_;
    /// <summary>
    /// 助战的训练仪id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TraintoolId {
      get { return traintoolId_; }
      set {
        traintoolId_ = value;
      }
    }

    /// <summary>Field number for the "layer" field.</summary>
    public const int LayerFieldNumber = 9;
    private int layer_;
    /// <summary>
    /// 助战层数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Layer {
      get { return layer_; }
      set {
        layer_ = value;
      }
    }

    /// <summary>Field number for the "is_suc" field.</summary>
    public const int IsSucFieldNumber = 10;
    private int isSuc_;
    /// <summary>
    /// 是否胜利(1赢0输)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsSuc {
      get { return isSuc_; }
      set {
        isSuc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrainToolAssistRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrainToolAssistRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Name != other.Name) return false;
      if (Level != other.Level) return false;
      if (HeadId != other.HeadId) return false;
      if (Sex != other.Sex) return false;
      if (Timestamp != other.Timestamp) return false;
      if (CardId != other.CardId) return false;
      if (TraintoolId != other.TraintoolId) return false;
      if (Layer != other.Layer) return false;
      if (IsSuc != other.IsSuc) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (HeadId != 0) hash ^= HeadId.GetHashCode();
      if (Sex != 0) hash ^= Sex.GetHashCode();
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (CardId != 0) hash ^= CardId.GetHashCode();
      if (TraintoolId != 0) hash ^= TraintoolId.GetHashCode();
      if (Layer != 0) hash ^= Layer.GetHashCode();
      if (IsSuc != 0) hash ^= IsSuc.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (HeadId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HeadId);
      }
      if (Sex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Sex);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Timestamp);
      }
      if (CardId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CardId);
      }
      if (TraintoolId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(TraintoolId);
      }
      if (Layer != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Layer);
      }
      if (IsSuc != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(IsSuc);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (HeadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadId);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (TraintoolId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TraintoolId);
      }
      if (Layer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Layer);
      }
      if (IsSuc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsSuc);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrainToolAssistRecord other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.HeadId != 0) {
        HeadId = other.HeadId;
      }
      if (other.Sex != 0) {
        Sex = other.Sex;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      if (other.TraintoolId != 0) {
        TraintoolId = other.TraintoolId;
      }
      if (other.Layer != 0) {
        Layer = other.Layer;
      }
      if (other.IsSuc != 0) {
        IsSuc = other.IsSuc;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            HeadId = input.ReadInt32();
            break;
          }
          case 40: {
            Sex = input.ReadInt32();
            break;
          }
          case 48: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 56: {
            CardId = input.ReadInt32();
            break;
          }
          case 64: {
            TraintoolId = input.ReadInt32();
            break;
          }
          case 72: {
            Layer = input.ReadInt32();
            break;
          }
          case 80: {
            IsSuc = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 训练仪好友助战卡牌信息
  /// </summary>
  public sealed partial class TrainToolFriendAssistInfo : pb::IMessage<TrainToolFriendAssistInfo> {
    private static readonly pb::MessageParser<TrainToolFriendAssistInfo> _parser = new pb::MessageParser<TrainToolFriendAssistInfo>(() => new TrainToolFriendAssistInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrainToolFriendAssistInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[225]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainToolFriendAssistInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainToolFriendAssistInfo(TrainToolFriendAssistInfo other) : this() {
      playerId_ = other.playerId_;
      name_ = other.name_;
      CardInfo = other.cardInfo_ != null ? other.CardInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainToolFriendAssistInfo Clone() {
      return new TrainToolFriendAssistInfo(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    /// <summary>
    /// 角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "card_info" field.</summary>
    public const int CardInfoFieldNumber = 3;
    private global::Stardom.InitFighterInfo cardInfo_;
    /// <summary>
    /// 卡牌信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.InitFighterInfo CardInfo {
      get { return cardInfo_; }
      set {
        cardInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrainToolFriendAssistInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrainToolFriendAssistInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(CardInfo, other.CardInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (cardInfo_ != null) hash ^= CardInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (cardInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CardInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (cardInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrainToolFriendAssistInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.cardInfo_ != null) {
        if (cardInfo_ == null) {
          cardInfo_ = new global::Stardom.InitFighterInfo();
        }
        CardInfo.MergeFrom(other.CardInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (cardInfo_ == null) {
              cardInfo_ = new global::Stardom.InitFighterInfo();
            }
            input.ReadMessage(cardInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 称号信息
  /// </summary>
  public sealed partial class PlayerTitleInfo : pb::IMessage<PlayerTitleInfo> {
    private static readonly pb::MessageParser<PlayerTitleInfo> _parser = new pb::MessageParser<PlayerTitleInfo>(() => new PlayerTitleInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerTitleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[226]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerTitleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerTitleInfo(PlayerTitleInfo other) : this() {
      titles_ = other.titles_.Clone();
      useTitleId_ = other.useTitleId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerTitleInfo Clone() {
      return new PlayerTitleInfo(this);
    }

    /// <summary>Field number for the "titles" field.</summary>
    public const int TitlesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Stardom.TitleInfo> _repeated_titles_codec
        = pb::FieldCodec.ForMessage(10, global::Stardom.TitleInfo.Parser);
    private readonly pbc::RepeatedField<global::Stardom.TitleInfo> titles_ = new pbc::RepeatedField<global::Stardom.TitleInfo>();
    /// <summary>
    /// 已激活称号列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stardom.TitleInfo> Titles {
      get { return titles_; }
    }

    /// <summary>Field number for the "use_title_id" field.</summary>
    public const int UseTitleIdFieldNumber = 2;
    private int useTitleId_;
    /// <summary>
    /// 使用称号id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UseTitleId {
      get { return useTitleId_; }
      set {
        useTitleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerTitleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerTitleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!titles_.Equals(other.titles_)) return false;
      if (UseTitleId != other.UseTitleId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= titles_.GetHashCode();
      if (UseTitleId != 0) hash ^= UseTitleId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      titles_.WriteTo(output, _repeated_titles_codec);
      if (UseTitleId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UseTitleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += titles_.CalculateSize(_repeated_titles_codec);
      if (UseTitleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UseTitleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerTitleInfo other) {
      if (other == null) {
        return;
      }
      titles_.Add(other.titles_);
      if (other.UseTitleId != 0) {
        UseTitleId = other.UseTitleId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            titles_.AddEntriesFrom(input, _repeated_titles_codec);
            break;
          }
          case 16: {
            UseTitleId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 称号物品
  /// </summary>
  public sealed partial class TitleInfo : pb::IMessage<TitleInfo> {
    private static readonly pb::MessageParser<TitleInfo> _parser = new pb::MessageParser<TitleInfo>(() => new TitleInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TitleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stardom.CommonTypesReflection.Descriptor.MessageTypes[227]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TitleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TitleInfo(TitleInfo other) : this() {
      Base = other.base_ != null ? other.Base.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TitleInfo Clone() {
      return new TitleInfo(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Stardom.ItemBaseInfo base_;
    /// <summary>
    /// 物品基础数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stardom.ItemBaseInfo Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TitleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TitleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TitleInfo other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          base_ = new global::Stardom.ItemBaseInfo();
        }
        Base.MergeFrom(other.Base);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (base_ == null) {
              base_ = new global::Stardom.ItemBaseInfo();
            }
            input.ReadMessage(base_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
